(ns mend.core
  (:require [clojure.walk :refer [postwalk]]

            [com.rpl.specter :refer [nthpath]]

            [instacheck.core :as instacheck]
            [instacheck.codegen :as instacheck-codegen]

            ;; Not actually used here, but convenient for testing
            [clojure.pprint :refer [pprint]]
            [clojure.test.check.generators :as gen]
            [com.gfredericks.test.chuck :as chuck]))

;; Find each :path in a grammar and replace it with :value
;; This allows us to replace stub generators in the grammar with
;; references to generators in a different namespace, avoid mutual
;; recursion, etc. Uses specter setval so the following type of path
;; is supported:
;;   [:RULE :parsers (nthpath 6) :parsers (nthpath 1)]
(def common-grammar-updates
  [;; Replace regex number generators with actual numeric/sized types
   {:path [:integer]
    :value {:tag :nt :keyword :gen/int}}
   {:path [:non-negative-integer]
    :value {:tag :nt :keyword :gen/nat}}
   {:path [:positive-integer]
    :value {:tag :nt :keyword :gen/s-pos-int}}
   {:path [:floating-point-number]
    :value {:tag :nt :keyword :gen/double}}])

(def html5-grammar-updates
  [;; Replace the stub CSS value generator with real one
   {:path [:attr-val-global__style]
    :value {:tag :nt :keyword :css-assignments-test}}
   ;; Simplify rules that result in lots of noise/unicode
   {:path [:name]
    :value {:tag :nt :keyword :rgen/simple-identifier}}
   {:path [:reference]
    :value {:tag :string :string "&#x00c9;"}}
   {:path [:comment]
    :value {:tag :string :string "<!-- HTML comment -->"}}
   {:path [:attribute-data]
    :value {:tag :nt :keyword :rgen/simple-identifier}}
   {:path [:aria-attribute]
    :value {:tag :epsilon}}
   {:path [:role-attribute]
    :value {:tag :epsilon}}
   {:path [:event-attribute]
    :value {:tag :epsilon}}
   {:path [:custom-data-attribute]
    :value {:tag :epsilon}}
   ;; More with more efficient native generators
   {:path [:attr-val-img__src]
    :value {:tag :nt :keyword :rgen/image-path}}
   ])

(def css3-grammar-updates
  [;; Remove recursive definitions
   {:path [:nonprop-image]
    :value {:tag :nt :keyword :nonprop-url}}
   {:path [:nonprop-calc-value]
    :value {:tag :nt :keyword :any-number}}
   ;; More with more efficient native generators
   {:path [:nonprop-custom-ident]
    :value {:tag :cat :parsers [{:tag :nt :keyword :rgen/simple-identifier}
                                {:tag :string :string " "}]}}
   ;; Remove css-unknown from css-declaration
   {:path [:css-declaration :parsers (nthpath 0) :parsers (nthpath 0)]
    :value {:tag :nt, :keyword :css-known-standard}}
   ;; Simplify rules that result in lots of noise/unicode
   {:path [:IDENT]
    :value {:tag :nt :keyword :gen/symbol}}
   {:path [:css-comment]
    :value {:tag :string :string "/* CSS comment */ "}}

   {:path [:quoted-string]
    :value {:tag :string :string "'QUOTED STRING'"}}
   ])

(defn reduce-strings*
  [a p2]
  (let [p1 (last a)]
    (if (and (= :string (:tag p1)) (= :string (:tag p2)))
      ;; Two strings, concatenate
      (conj (pop a) {:tag :string :string (str (:string p1) (:string p2))})
      (conj a p2))))

(defn reduce-strings
  "Combine strings and spaces that immediately follow each other in
  a concatenation."
  [x]
  (if (and (= :cat (:tag x))
           (:parsers x))
    (assoc x :parsers (reduce reduce-strings* [] (:parsers x)))
    x))

(defn replace-spaces
  "Replaces spaces with literal space strings."
  [x]
  (if (and (= :nt (:tag x))
           (#{:S :rS} (:keyword x)))
    {:tag :string :string (str " ")}
    x))

(defn html5-grammar-update-fn [grammar]
  (let [g1 (instacheck/apply-grammar-updates grammar common-grammar-updates)
        g2 (instacheck/apply-grammar-updates g1 html5-grammar-updates)
        g3 (postwalk replace-spaces g2)
        g4 (postwalk reduce-strings g3)]
    g4))

(defn css3-grammar-update-fn [grammar]
  (let [g1 (instacheck/apply-grammar-updates grammar common-grammar-updates)
        g2 (instacheck/apply-grammar-updates g1 css3-grammar-updates)
        g3 (postwalk replace-spaces g2)
        g4 (postwalk reduce-strings g3)]
    g4))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn ns-prefix [ctx]
  (str
"(ns " (:namespace ctx) "
   (:require [clojure.test.check.generators :as gen]
             [com.gfredericks.test.chuck.generators :as chuck]
             [instacheck.generators :as igen]
             [rend.misc-generators :as rgen]))

;; Generated by mend.cli

"))


(defn grammar->ns
  [ctx grammar]
  (str (ns-prefix ctx)
       (if (:function ctx)
         (instacheck-codegen/grammar->generator-func-source ctx grammar)
         (instacheck-codegen/grammar->generator-defs-source ctx grammar))))

