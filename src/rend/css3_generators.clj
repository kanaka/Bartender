(ns rend.css3-generators
   (:require [clojure.test.check.generators :as gen]
             [com.gfredericks.test.chuck.generators :as chuck]
             [instacheck.generators :as igen]
             [rend.misc-generators :as rgen]))

;; Generated by mend.cli

(defn- css3-generators-part-0 [gmap weights]
  (let [
        gen-nonprop-single-animation-direction
        (igen/freq [
          [(get weights [:nonprop-single-animation-direction :alt 0] 100)
            (gen/return "normal")]
          [(get weights [:nonprop-single-animation-direction :alt 1] 100)
            (gen/return "reverse")]
          [(get weights [:nonprop-single-animation-direction :alt 2] 100)
            (gen/return "alternate")]
          [(get weights [:nonprop-single-animation-direction :alt 3] 100)
            (gen/return "alternate-reverse")]])
        gmap (assoc gmap :nonprop-single-animation-direction gen-nonprop-single-animation-direction)

        gen-nonprop-integer
        gen/int
        gmap (assoc gmap :nonprop-integer gen-nonprop-integer)

        gen-number-float
        gen/double
        gmap (assoc gmap :number-float gen-number-float)

        gen-nonprop-number
        (igen/freq [
          [(get weights [:nonprop-number :alt 0] 100)
            (:nonprop-integer gmap)]
          [(get weights [:nonprop-number :alt 1] 100)
            (:number-float gmap)]])
        gmap (assoc gmap :nonprop-number gen-nonprop-number)

        gen-nonprop-angle
        (gen/tuple
          (:nonprop-number gmap)
          (igen/freq [
            [(get weights [:nonprop-angle :cat 1 :alt 0] 100)
              (gen/return "deg")]
            [(get weights [:nonprop-angle :cat 1 :alt 1] 100)
              (gen/return "grad")]
            [(get weights [:nonprop-angle :cat 1 :alt 2] 100)
              (gen/return "rad")]
            [(get weights [:nonprop-angle :cat 1 :alt 3] 100)
              (gen/return "turn")]]))
        gmap (assoc gmap :nonprop-angle gen-nonprop-angle)

        gen-func-skew
        (gen/tuple
          (gen/return "skew")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (:nonprop-angle gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-skew gen-func-skew)

        gen-nonprop-combinator
        (igen/freq [
          [(get weights [:nonprop-combinator :alt 0] 100)
            (gen/return ">")]
          [(get weights [:nonprop-combinator :alt 1] 100)
            (gen/return "+")]
          [(get weights [:nonprop-combinator :alt 2] 100)
            (gen/return "~")]
          [(get weights [:nonprop-combinator :alt 3] 100)
            (gen/return "||")]])
        gmap (assoc gmap :nonprop-combinator gen-nonprop-combinator)

        gen-length-unit
        (igen/freq [
          [(get weights [:length-unit :alt 0] 100)
            (gen/return "em")]
          [(get weights [:length-unit :alt 1] 100)
            (gen/return "ex")]
          [(get weights [:length-unit :alt 2] 100)
            (gen/return "ch")]
          [(get weights [:length-unit :alt 3] 100)
            (gen/return "ic")]
          [(get weights [:length-unit :alt 4] 100)
            (gen/return "rem")]
          [(get weights [:length-unit :alt 5] 100)
            (gen/return "lh")]
          [(get weights [:length-unit :alt 6] 100)
            (gen/return "rlh")]
          [(get weights [:length-unit :alt 7] 100)
            (gen/return "vh")]
          [(get weights [:length-unit :alt 8] 100)
            (gen/return "vw")]
          [(get weights [:length-unit :alt 9] 100)
            (gen/return "vi")]
          [(get weights [:length-unit :alt 10] 100)
            (gen/return "vb")]
          [(get weights [:length-unit :alt 11] 100)
            (gen/return "vmin")]
          [(get weights [:length-unit :alt 12] 100)
            (gen/return "vmax")]
          [(get weights [:length-unit :alt 13] 100)
            (gen/return "px")]
          [(get weights [:length-unit :alt 14] 100)
            (gen/return "mm")]
          [(get weights [:length-unit :alt 15] 100)
            (gen/return "q")]
          [(get weights [:length-unit :alt 16] 100)
            (gen/return "cm")]
          [(get weights [:length-unit :alt 17] 100)
            (gen/return "in")]
          [(get weights [:length-unit :alt 18] 100)
            (gen/return "pt")]
          [(get weights [:length-unit :alt 19] 100)
            (gen/return "pc")]
          [(get weights [:length-unit :alt 20] 100)
            (gen/return "mozmm")]])
        gmap (assoc gmap :length-unit gen-length-unit)

        gen-nonprop-length
        (igen/freq [
          [(get weights [:nonprop-length :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (:length-unit gmap))]
          [(get weights [:nonprop-length :alt 1] 100)
            (gen/return "0")]])
        gmap (assoc gmap :nonprop-length gen-nonprop-length)

        gen-nonprop-percentage
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return "%"))
        gmap (assoc gmap :nonprop-percentage gen-nonprop-percentage)

        gen-nonprop-length-percentage
        (igen/freq [
          [(get weights [:nonprop-length-percentage :alt 0] 100)
            (:nonprop-length gmap)]
          [(get weights [:nonprop-length-percentage :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-length-percentage gen-nonprop-length-percentage)

        gen-nonprop-bg-position
        (igen/freq [
          [(get weights [:nonprop-bg-position :cat 0 :alt 0] 100)
            (igen/freq [
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 0] 100)
                (gen/return "left")]
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 1] 100)
                (gen/return "center")]
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 2] 100)
                (gen/return "right")]
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 3] 100)
                (gen/return "top")]
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 4] 100)
                (gen/return "bottom")]
              [(get weights [:nonprop-bg-position :cat 0 :alt 0 :cat 0 :alt 5] 100)
                (:nonprop-length-percentage gmap)]])]
          [(get weights [:nonprop-bg-position :cat 0 :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 0 :alt 0] 100)
                  (gen/return "left")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 0 :alt 1] 100)
                  (gen/return "center")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 0 :alt 2] 100)
                  (gen/return "right")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 0 :alt 3] 100)
                  (:nonprop-length-percentage gmap)]])
              (igen/freq [
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 1 :alt 0] 100)
                  (gen/return "top")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 1 :alt 1] 100)
                  (gen/return "center")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 1 :alt 2] 100)
                  (gen/return "bottom")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 1 :cat 1 :alt 3] 100)
                  (:nonprop-length-percentage gmap)]]))]
          [(get weights [:nonprop-bg-position :cat 0 :alt 2] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 0 :alt 0] 100)
                  (gen/return "center")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (igen/freq [
                      [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                        (gen/return "left")]
                      [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                        (gen/return "right")]])
                    (gen/one-of [
                      (gen/return "")
                      (:nonprop-length-percentage gmap)]))]])
              (igen/freq [
                [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 1 :alt 0] 100)
                  (gen/return "center")]
                [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 1 :alt 1] 100)
                  (gen/tuple
                    (igen/freq [
                      [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 1 :alt 1 :cat 0 :alt 0] 100)
                        (gen/return "top")]
                      [(get weights [:nonprop-bg-position :cat 0 :alt 2 :cat 1 :alt 1 :cat 0 :alt 1] 100)
                        (gen/return "bottom")]])
                    (gen/one-of [
                      (gen/return "")
                      (:nonprop-length-percentage gmap)]))]]))]])
        gmap (assoc gmap :nonprop-bg-position gen-nonprop-bg-position)

        gen-nonprop-suffix
        (gen/return "STUB_suffix")
        gmap (assoc gmap :nonprop-suffix gen-nonprop-suffix)

        gen-prop-all
        (igen/freq [
          [(get weights [:prop-all :alt 0] 100)
            (gen/return "initial")]
          [(get weights [:prop-all :alt 1] 100)
            (gen/return "inherit")]
          [(get weights [:prop-all :alt 2] 100)
            (gen/return "unset")]
          [(get weights [:prop-all :alt 3] 100)
            (gen/return "revert")]])
        gmap (assoc gmap :prop-all gen-prop-all)

        gen-nonprop-all
        (:prop-all gmap)
        gmap (assoc gmap :nonprop-all gen-nonprop-all)

        gen-prop-padding-left
        (igen/freq [
          [(get weights [:prop-padding-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-left :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-padding-left :alt 2] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-padding-left gen-prop-padding-left)

        gen-nonprop-padding-left
        (:prop-padding-left gmap)
        gmap (assoc gmap :nonprop-padding-left gen-nonprop-padding-left)

        gen-prop-padding-block-start
        (igen/freq [
          [(get weights [:prop-padding-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-block-start :alt 1] 100)
            (:nonprop-padding-left gmap)]])
        gmap (assoc gmap :prop-padding-block-start gen-prop-padding-block-start)

        gen-prop-image-rendering
        (igen/freq [
          [(get weights [:prop-image-rendering :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-image-rendering :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-image-rendering :alt 2] 100)
            (gen/return "crisp-edges")]
          [(get weights [:prop-image-rendering :alt 3] 100)
            (gen/return "pixelated")]])
        gmap (assoc gmap :prop-image-rendering gen-prop-image-rendering)

        gen-prop-right
        (igen/freq [
          [(get weights [:prop-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-right :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-right :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-right :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-right gen-prop-right)

        gen-prop-bottom
        (igen/freq [
          [(get weights [:prop-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-bottom :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-bottom :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-bottom :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-bottom gen-prop-bottom)

        gen-nonprop-bottom
        (:prop-bottom gmap)
        gmap (assoc gmap :nonprop-bottom gen-nonprop-bottom)

        gen-prop-left
        (igen/freq [
          [(get weights [:prop-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-left :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-left :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-left :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-left gen-prop-left)

        gen-prop-top
        (igen/freq [
          [(get weights [:prop-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-top :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-top :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-top :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-top gen-prop-top)

        gen-nonprop-left
        (:prop-left gmap)
        gmap (assoc gmap :nonprop-left gen-nonprop-left)

        gen-nonprop-top
        (:prop-top gmap)
        gmap (assoc gmap :nonprop-top gen-nonprop-top)

        gen-nonprop-right
        (:prop-right gmap)
        gmap (assoc gmap :nonprop-right gen-nonprop-right)

        gen-nonprop-shape
        (gen/tuple
          (gen/return "rect")
          (gen/return "(")
          (:nonprop-top gmap)
          (gen/return ",")
          (:nonprop-right gmap)
          (gen/return ",")
          (:nonprop-bottom gmap)
          (gen/return ",")
          (:nonprop-left gmap)
          (gen/return ")"))
        gmap (assoc gmap :nonprop-shape gen-nonprop-shape)

        gen-prop-clip
        (igen/freq [
          [(get weights [:prop-clip :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-clip :alt 1] 100)
            (:nonprop-shape gmap)]
          [(get weights [:prop-clip :alt 2] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-clip gen-prop-clip)

        gen-nonprop-alpha-value
        (igen/freq [
          [(get weights [:nonprop-alpha-value :alt 0] 100)
            (:nonprop-number gmap)]
          [(get weights [:nonprop-alpha-value :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-alpha-value gen-nonprop-alpha-value)

        gen-nonprop-hue
        (igen/freq [
          [(get weights [:nonprop-hue :alt 0] 100)
            (:nonprop-number gmap)]
          [(get weights [:nonprop-hue :alt 1] 100)
            (:nonprop-angle gmap)]])
        gmap (assoc gmap :nonprop-hue gen-nonprop-hue)

        gen-func-hsl
        (igen/freq [
          [(get weights [:func-hsl :alt 0] 100)
            (gen/tuple
              (gen/return "hsl")
              (gen/return "(")
              (:nonprop-hue gmap)
              (:nonprop-percentage gmap)
              (:nonprop-percentage gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-hsl :alt 1] 100)
            (gen/tuple
              (gen/return "hsl")
              (gen/return "(")
              (:nonprop-hue gmap)
              (gen/return ",")
              (:nonprop-percentage gmap)
              (gen/return ",")
              (:nonprop-percentage gmap)
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]])
        gmap (assoc gmap :func-hsl gen-func-hsl)

        gen-nonprop-deprecated-system-color
        (igen/freq [
          [(get weights [:nonprop-deprecated-system-color :alt 0] 100)
            (gen/return "ActiveBorder")]
          [(get weights [:nonprop-deprecated-system-color :alt 1] 100)
            (gen/return "ActiveCaption")]
          [(get weights [:nonprop-deprecated-system-color :alt 2] 100)
            (gen/return "AppWorkspace")]
          [(get weights [:nonprop-deprecated-system-color :alt 3] 100)
            (gen/return "Background")]
          [(get weights [:nonprop-deprecated-system-color :alt 4] 100)
            (gen/return "ButtonFace")]
          [(get weights [:nonprop-deprecated-system-color :alt 5] 100)
            (gen/return "ButtonHighlight")]
          [(get weights [:nonprop-deprecated-system-color :alt 6] 100)
            (gen/return "ButtonShadow")]
          [(get weights [:nonprop-deprecated-system-color :alt 7] 100)
            (gen/return "ButtonText")]
          [(get weights [:nonprop-deprecated-system-color :alt 8] 100)
            (gen/return "CaptionText")]
          [(get weights [:nonprop-deprecated-system-color :alt 9] 100)
            (gen/return "GrayText")]
          [(get weights [:nonprop-deprecated-system-color :alt 10] 100)
            (gen/return "Highlight")]
          [(get weights [:nonprop-deprecated-system-color :alt 11] 100)
            (gen/return "HighlightText")]
          [(get weights [:nonprop-deprecated-system-color :alt 12] 100)
            (gen/return "InactiveBorder")]
          [(get weights [:nonprop-deprecated-system-color :alt 13] 100)
            (gen/return "InactiveCaption")]
          [(get weights [:nonprop-deprecated-system-color :alt 14] 100)
            (gen/return "InactiveCaptionText")]
          [(get weights [:nonprop-deprecated-system-color :alt 15] 100)
            (gen/return "InfoBackground")]
          [(get weights [:nonprop-deprecated-system-color :alt 16] 100)
            (gen/return "InfoText")]
          [(get weights [:nonprop-deprecated-system-color :alt 17] 100)
            (gen/return "Menu")]
          [(get weights [:nonprop-deprecated-system-color :alt 18] 100)
            (gen/return "MenuText")]
          [(get weights [:nonprop-deprecated-system-color :alt 19] 100)
            (gen/return "Scrollbar")]
          [(get weights [:nonprop-deprecated-system-color :alt 20] 100)
            (gen/return "ThreeDDarkShadow")]
          [(get weights [:nonprop-deprecated-system-color :alt 21] 100)
            (gen/return "ThreeDFace")]
          [(get weights [:nonprop-deprecated-system-color :alt 22] 100)
            (gen/return "ThreeDHighlight")]
          [(get weights [:nonprop-deprecated-system-color :alt 23] 100)
            (gen/return "ThreeDLightShadow")]
          [(get weights [:nonprop-deprecated-system-color :alt 24] 100)
            (gen/return "ThreeDShadow")]
          [(get weights [:nonprop-deprecated-system-color :alt 25] 100)
            (gen/return "Window")]
          [(get weights [:nonprop-deprecated-system-color :alt 26] 100)
            (gen/return "WindowFrame")]
          [(get weights [:nonprop-deprecated-system-color :alt 27] 100)
            (gen/return "WindowText")]])
        gmap (assoc gmap :nonprop-deprecated-system-color gen-nonprop-deprecated-system-color)

        gen-rS
        (gen/tuple (gen/return " "))
        gmap (assoc gmap :rS gen-rS)

        gen-func-rgb
        (igen/freq [
          [(get weights [:func-rgb :alt 0] 100)
            (gen/tuple
              (gen/return "rgb")
              (gen/return "(")
              (gen/tuple
                (:nonprop-percentage gmap)
                (:rS gmap)
                (:nonprop-percentage gmap)
                (:rS gmap)
                (:nonprop-percentage gmap))
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-rgb :alt 1] 100)
            (gen/tuple
              (gen/return "rgb")
              (gen/return "(")
              (gen/tuple
                (:nonprop-number gmap)
                (:rS gmap)
                (:nonprop-number gmap)
                (:rS gmap)
                (:nonprop-number gmap))
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-rgb :alt 2] 100)
            (gen/tuple
              (gen/return "rgb")
              (gen/return "(")
              (gen/tuple
                (:nonprop-percentage gmap)
                (gen/return ",")
                (:nonprop-percentage gmap)
                (gen/return ",")
                (:nonprop-percentage gmap))
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]
          [(get weights [:func-rgb :alt 3] 100)
            (gen/tuple
              (gen/return "rgb")
              (gen/return "(")
              (gen/tuple
                (:nonprop-number gmap)
                (gen/return ",")
                (:nonprop-number gmap)
                (gen/return ",")
                (:nonprop-number gmap))
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]])
        gmap (assoc gmap :func-rgb gen-func-rgb)

        gen-nonprop-named-color
        (igen/freq [
          [(get weights [:nonprop-named-color :alt 0] 100)
            (gen/return "transparent")]
          [(get weights [:nonprop-named-color :alt 1] 100)
            (gen/return "aliceblue")]
          [(get weights [:nonprop-named-color :alt 2] 100)
            (gen/return "antiquewhite")]
          [(get weights [:nonprop-named-color :alt 3] 100)
            (gen/return "aqua")]
          [(get weights [:nonprop-named-color :alt 4] 100)
            (gen/return "aquamarine")]
          [(get weights [:nonprop-named-color :alt 5] 100)
            (gen/return "azure")]
          [(get weights [:nonprop-named-color :alt 6] 100)
            (gen/return "beige")]
          [(get weights [:nonprop-named-color :alt 7] 100)
            (gen/return "bisque")]
          [(get weights [:nonprop-named-color :alt 8] 100)
            (gen/return "black")]
          [(get weights [:nonprop-named-color :alt 9] 100)
            (gen/return "blanchedalmond")]
          [(get weights [:nonprop-named-color :alt 10] 100)
            (gen/return "blue")]
          [(get weights [:nonprop-named-color :alt 11] 100)
            (gen/return "blueviolet")]
          [(get weights [:nonprop-named-color :alt 12] 100)
            (gen/return "brown")]
          [(get weights [:nonprop-named-color :alt 13] 100)
            (gen/return "burlywood")]
          [(get weights [:nonprop-named-color :alt 14] 100)
            (gen/return "cadetblue")]
          [(get weights [:nonprop-named-color :alt 15] 100)
            (gen/return "chartreuse")]
          [(get weights [:nonprop-named-color :alt 16] 100)
            (gen/return "chocolate")]
          [(get weights [:nonprop-named-color :alt 17] 100)
            (gen/return "coral")]
          [(get weights [:nonprop-named-color :alt 18] 100)
            (gen/return "cornflowerblue")]
          [(get weights [:nonprop-named-color :alt 19] 100)
            (gen/return "cornsilk")]
          [(get weights [:nonprop-named-color :alt 20] 100)
            (gen/return "crimson")]
          [(get weights [:nonprop-named-color :alt 21] 100)
            (gen/return "cyan")]
          [(get weights [:nonprop-named-color :alt 22] 100)
            (gen/return "darkblue")]
          [(get weights [:nonprop-named-color :alt 23] 100)
            (gen/return "darkcyan")]
          [(get weights [:nonprop-named-color :alt 24] 100)
            (gen/return "darkgoldenrod")]
          [(get weights [:nonprop-named-color :alt 25] 100)
            (gen/return "darkgray")]
          [(get weights [:nonprop-named-color :alt 26] 100)
            (gen/return "darkgreen")]
          [(get weights [:nonprop-named-color :alt 27] 100)
            (gen/return "darkgrey")]
          [(get weights [:nonprop-named-color :alt 28] 100)
            (gen/return "darkkhaki")]
          [(get weights [:nonprop-named-color :alt 29] 100)
            (gen/return "darkmagenta")]
          [(get weights [:nonprop-named-color :alt 30] 100)
            (gen/return "darkolivegreen")]
          [(get weights [:nonprop-named-color :alt 31] 100)
            (gen/return "darkorange")]
          [(get weights [:nonprop-named-color :alt 32] 100)
            (gen/return "darkorchid")]
          [(get weights [:nonprop-named-color :alt 33] 100)
            (gen/return "darkred")]
          [(get weights [:nonprop-named-color :alt 34] 100)
            (gen/return "darksalmon")]
          [(get weights [:nonprop-named-color :alt 35] 100)
            (gen/return "darkseagreen")]
          [(get weights [:nonprop-named-color :alt 36] 100)
            (gen/return "darkslateblue")]
          [(get weights [:nonprop-named-color :alt 37] 100)
            (gen/return "darkslategray")]
          [(get weights [:nonprop-named-color :alt 38] 100)
            (gen/return "darkslategrey")]
          [(get weights [:nonprop-named-color :alt 39] 100)
            (gen/return "darkturquoise")]
          [(get weights [:nonprop-named-color :alt 40] 100)
            (gen/return "darkviolet")]
          [(get weights [:nonprop-named-color :alt 41] 100)
            (gen/return "deeppink")]
          [(get weights [:nonprop-named-color :alt 42] 100)
            (gen/return "deepskyblue")]
          [(get weights [:nonprop-named-color :alt 43] 100)
            (gen/return "dimgray")]
          [(get weights [:nonprop-named-color :alt 44] 100)
            (gen/return "dimgrey")]
          [(get weights [:nonprop-named-color :alt 45] 100)
            (gen/return "dodgerblue")]
          [(get weights [:nonprop-named-color :alt 46] 100)
            (gen/return "firebrick")]
          [(get weights [:nonprop-named-color :alt 47] 100)
            (gen/return "floralwhite")]
          [(get weights [:nonprop-named-color :alt 48] 100)
            (gen/return "forestgreen")]
          [(get weights [:nonprop-named-color :alt 49] 100)
            (gen/return "fuchsia")]
          [(get weights [:nonprop-named-color :alt 50] 100)
            (gen/return "gainsboro")]
          [(get weights [:nonprop-named-color :alt 51] 100)
            (gen/return "ghostwhite")]
          [(get weights [:nonprop-named-color :alt 52] 100)
            (gen/return "gold")]
          [(get weights [:nonprop-named-color :alt 53] 100)
            (gen/return "goldenrod")]
          [(get weights [:nonprop-named-color :alt 54] 100)
            (gen/return "gray")]
          [(get weights [:nonprop-named-color :alt 55] 100)
            (gen/return "green")]
          [(get weights [:nonprop-named-color :alt 56] 100)
            (gen/return "greenyellow")]
          [(get weights [:nonprop-named-color :alt 57] 100)
            (gen/return "grey")]
          [(get weights [:nonprop-named-color :alt 58] 100)
            (gen/return "honeydew")]
          [(get weights [:nonprop-named-color :alt 59] 100)
            (gen/return "hotpink")]
          [(get weights [:nonprop-named-color :alt 60] 100)
            (gen/return "indianred")]
          [(get weights [:nonprop-named-color :alt 61] 100)
            (gen/return "indigo")]
          [(get weights [:nonprop-named-color :alt 62] 100)
            (gen/return "ivory")]
          [(get weights [:nonprop-named-color :alt 63] 100)
            (gen/return "khaki")]
          [(get weights [:nonprop-named-color :alt 64] 100)
            (gen/return "lavender")]
          [(get weights [:nonprop-named-color :alt 65] 100)
            (gen/return "lavenderblush")]
          [(get weights [:nonprop-named-color :alt 66] 100)
            (gen/return "lawngreen")]
          [(get weights [:nonprop-named-color :alt 67] 100)
            (gen/return "lemonchiffon")]
          [(get weights [:nonprop-named-color :alt 68] 100)
            (gen/return "lightblue")]
          [(get weights [:nonprop-named-color :alt 69] 100)
            (gen/return "lightcoral")]
          [(get weights [:nonprop-named-color :alt 70] 100)
            (gen/return "lightcyan")]
          [(get weights [:nonprop-named-color :alt 71] 100)
            (gen/return "lightgoldenrodyellow")]
          [(get weights [:nonprop-named-color :alt 72] 100)
            (gen/return "lightgray")]
          [(get weights [:nonprop-named-color :alt 73] 100)
            (gen/return "lightgreen")]
          [(get weights [:nonprop-named-color :alt 74] 100)
            (gen/return "lightgrey")]
          [(get weights [:nonprop-named-color :alt 75] 100)
            (gen/return "lightpink")]
          [(get weights [:nonprop-named-color :alt 76] 100)
            (gen/return "lightsalmon")]
          [(get weights [:nonprop-named-color :alt 77] 100)
            (gen/return "lightseagreen")]
          [(get weights [:nonprop-named-color :alt 78] 100)
            (gen/return "lightskyblue")]
          [(get weights [:nonprop-named-color :alt 79] 100)
            (gen/return "lightslategray")]
          [(get weights [:nonprop-named-color :alt 80] 100)
            (gen/return "lightslategrey")]
          [(get weights [:nonprop-named-color :alt 81] 100)
            (gen/return "lightsteelblue")]
          [(get weights [:nonprop-named-color :alt 82] 100)
            (gen/return "lightyellow")]
          [(get weights [:nonprop-named-color :alt 83] 100)
            (gen/return "lime")]
          [(get weights [:nonprop-named-color :alt 84] 100)
            (gen/return "limegreen")]
          [(get weights [:nonprop-named-color :alt 85] 100)
            (gen/return "linen")]
          [(get weights [:nonprop-named-color :alt 86] 100)
            (gen/return "magenta")]
          [(get weights [:nonprop-named-color :alt 87] 100)
            (gen/return "maroon")]
          [(get weights [:nonprop-named-color :alt 88] 100)
            (gen/return "mediumaquamarine")]
          [(get weights [:nonprop-named-color :alt 89] 100)
            (gen/return "mediumblue")]
          [(get weights [:nonprop-named-color :alt 90] 100)
            (gen/return "mediumorchid")]
          [(get weights [:nonprop-named-color :alt 91] 100)
            (gen/return "mediumpurple")]
          [(get weights [:nonprop-named-color :alt 92] 100)
            (gen/return "mediumseagreen")]
          [(get weights [:nonprop-named-color :alt 93] 100)
            (gen/return "mediumslateblue")]
          [(get weights [:nonprop-named-color :alt 94] 100)
            (gen/return "mediumspringgreen")]
          [(get weights [:nonprop-named-color :alt 95] 100)
            (gen/return "mediumturquoise")]
          [(get weights [:nonprop-named-color :alt 96] 100)
            (gen/return "mediumvioletred")]
          [(get weights [:nonprop-named-color :alt 97] 100)
            (gen/return "midnightblue")]
          [(get weights [:nonprop-named-color :alt 98] 100)
            (gen/return "mintcream")]
          [(get weights [:nonprop-named-color :alt 99] 100)
            (gen/return "mistyrose")]
          [(get weights [:nonprop-named-color :alt 100] 100)
            (gen/return "moccasin")]
          [(get weights [:nonprop-named-color :alt 101] 100)
            (gen/return "navajowhite")]
          [(get weights [:nonprop-named-color :alt 102] 100)
            (gen/return "navy")]
          [(get weights [:nonprop-named-color :alt 103] 100)
            (gen/return "oldlace")]
          [(get weights [:nonprop-named-color :alt 104] 100)
            (gen/return "olive")]
          [(get weights [:nonprop-named-color :alt 105] 100)
            (gen/return "olivedrab")]
          [(get weights [:nonprop-named-color :alt 106] 100)
            (gen/return "orange")]
          [(get weights [:nonprop-named-color :alt 107] 100)
            (gen/return "orangered")]
          [(get weights [:nonprop-named-color :alt 108] 100)
            (gen/return "orchid")]
          [(get weights [:nonprop-named-color :alt 109] 100)
            (gen/return "palegoldenrod")]
          [(get weights [:nonprop-named-color :alt 110] 100)
            (gen/return "palegreen")]
          [(get weights [:nonprop-named-color :alt 111] 100)
            (gen/return "paleturquoise")]
          [(get weights [:nonprop-named-color :alt 112] 100)
            (gen/return "palevioletred")]
          [(get weights [:nonprop-named-color :alt 113] 100)
            (gen/return "papayawhip")]
          [(get weights [:nonprop-named-color :alt 114] 100)
            (gen/return "peachpuff")]
          [(get weights [:nonprop-named-color :alt 115] 100)
            (gen/return "peru")]
          [(get weights [:nonprop-named-color :alt 116] 100)
            (gen/return "pink")]
          [(get weights [:nonprop-named-color :alt 117] 100)
            (gen/return "plum")]
          [(get weights [:nonprop-named-color :alt 118] 100)
            (gen/return "powderblue")]
          [(get weights [:nonprop-named-color :alt 119] 100)
            (gen/return "purple")]
          [(get weights [:nonprop-named-color :alt 120] 100)
            (gen/return "rebeccapurple")]
          [(get weights [:nonprop-named-color :alt 121] 100)
            (gen/return "red")]
          [(get weights [:nonprop-named-color :alt 122] 100)
            (gen/return "rosybrown")]
          [(get weights [:nonprop-named-color :alt 123] 100)
            (gen/return "royalblue")]
          [(get weights [:nonprop-named-color :alt 124] 100)
            (gen/return "saddlebrown")]
          [(get weights [:nonprop-named-color :alt 125] 100)
            (gen/return "salmon")]
          [(get weights [:nonprop-named-color :alt 126] 100)
            (gen/return "sandybrown")]
          [(get weights [:nonprop-named-color :alt 127] 100)
            (gen/return "seagreen")]
          [(get weights [:nonprop-named-color :alt 128] 100)
            (gen/return "seashell")]
          [(get weights [:nonprop-named-color :alt 129] 100)
            (gen/return "sienna")]
          [(get weights [:nonprop-named-color :alt 130] 100)
            (gen/return "silver")]
          [(get weights [:nonprop-named-color :alt 131] 100)
            (gen/return "skyblue")]
          [(get weights [:nonprop-named-color :alt 132] 100)
            (gen/return "slateblue")]
          [(get weights [:nonprop-named-color :alt 133] 100)
            (gen/return "slategray")]
          [(get weights [:nonprop-named-color :alt 134] 100)
            (gen/return "slategrey")]
          [(get weights [:nonprop-named-color :alt 135] 100)
            (gen/return "snow")]
          [(get weights [:nonprop-named-color :alt 136] 100)
            (gen/return "springgreen")]
          [(get weights [:nonprop-named-color :alt 137] 100)
            (gen/return "steelblue")]
          [(get weights [:nonprop-named-color :alt 138] 100)
            (gen/return "tan")]
          [(get weights [:nonprop-named-color :alt 139] 100)
            (gen/return "teal")]
          [(get weights [:nonprop-named-color :alt 140] 100)
            (gen/return "thistle")]
          [(get weights [:nonprop-named-color :alt 141] 100)
            (gen/return "tomato")]
          [(get weights [:nonprop-named-color :alt 142] 100)
            (gen/return "turquoise")]
          [(get weights [:nonprop-named-color :alt 143] 100)
            (gen/return "violet")]
          [(get weights [:nonprop-named-color :alt 144] 100)
            (gen/return "wheat")]
          [(get weights [:nonprop-named-color :alt 145] 100)
            (gen/return "white")]
          [(get weights [:nonprop-named-color :alt 146] 100)
            (gen/return "whitesmoke")]
          [(get weights [:nonprop-named-color :alt 147] 100)
            (gen/return "yellow")]
          [(get weights [:nonprop-named-color :alt 148] 100)
            (gen/return "yellowgreen")]])
        gmap (assoc gmap :nonprop-named-color gen-nonprop-named-color)

        gen-nonprop-hex-color
        (igen/freq [
          [(get weights [:nonprop-hex-color :alt 0] 100)
            (chuck/string-from-regex #"#[0-9A-Fa-f]{3}")]
          [(get weights [:nonprop-hex-color :alt 1] 100)
            (chuck/string-from-regex #"#[0-9A-Fa-f]{6}")]])
        gmap (assoc gmap :nonprop-hex-color gen-nonprop-hex-color)

        gen-func-hsla
        (igen/freq [
          [(get weights [:func-hsla :alt 0] 100)
            (gen/tuple
              (gen/return "hsla")
              (gen/return "(")
              (:nonprop-hue gmap)
              (:nonprop-percentage gmap)
              (:nonprop-percentage gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-hsla :alt 1] 100)
            (gen/tuple
              (gen/return "hsla")
              (gen/return "(")
              (:nonprop-hue gmap)
              (gen/return ",")
              (:nonprop-percentage gmap)
              (gen/return ",")
              (:nonprop-percentage gmap)
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]])
        gmap (assoc gmap :func-hsla gen-func-hsla)

        gen-func-rgba
        (igen/freq [
          [(get weights [:func-rgba :alt 0] 100)
            (gen/tuple
              (gen/return "rgba")
              (gen/return "(")
              (gen/tuple
                (:nonprop-percentage gmap)
                (:rS gmap)
                (:nonprop-percentage gmap)
                (:rS gmap)
                (:nonprop-percentage gmap))
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-rgba :alt 1] 100)
            (gen/tuple
              (gen/return "rgba")
              (gen/return "(")
              (gen/tuple
                (:nonprop-number gmap)
                (:rS gmap)
                (:nonprop-number gmap)
                (:rS gmap)
                (:nonprop-number gmap))
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-alpha-value gmap))])
              (gen/return ")"))]
          [(get weights [:func-rgba :alt 2] 100)
            (gen/tuple
              (gen/return "rgba")
              (gen/return "(")
              (gen/tuple
                (:nonprop-percentage gmap)
                (gen/return ",")
                (:nonprop-percentage gmap)
                (gen/return ",")
                (:nonprop-percentage gmap))
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]
          [(get weights [:func-rgba :alt 3] 100)
            (gen/tuple
              (gen/return "rgba")
              (gen/return "(")
              (gen/tuple
                (:nonprop-number gmap)
                (gen/return ",")
                (:nonprop-number gmap)
                (gen/return ",")
                (:nonprop-number gmap))
              (gen/return ",")
              (gen/one-of [
                (gen/return "")
                (:nonprop-alpha-value gmap)])
              (gen/return ")"))]])
        gmap (assoc gmap :func-rgba gen-func-rgba)

        gen-nonprop-color
        (igen/freq [
          [(get weights [:nonprop-color :alt 0] 100)
            (:func-rgb gmap)]
          [(get weights [:nonprop-color :alt 1] 100)
            (:func-rgba gmap)]
          [(get weights [:nonprop-color :alt 2] 100)
            (:func-hsl gmap)]
          [(get weights [:nonprop-color :alt 3] 100)
            (:func-hsla gmap)]
          [(get weights [:nonprop-color :alt 4] 100)
            (:nonprop-hex-color gmap)]
          [(get weights [:nonprop-color :alt 5] 100)
            (:nonprop-named-color gmap)]
          [(get weights [:nonprop-color :alt 6] 100)
            (gen/return "currentcolor")]
          [(get weights [:nonprop-color :alt 7] 100)
            (:nonprop-deprecated-system-color gmap)]])
        gmap (assoc gmap :nonprop-color gen-nonprop-color)

        gen-nonprop-shadow
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/return "inset")])
          (igen/freq [
            [(get weights [:nonprop-shadow :cat 1 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]
            [(get weights [:nonprop-shadow :cat 1 :alt 1] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]
            [(get weights [:nonprop-shadow :cat 1 :alt 2] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]])
          (gen/one-of [
            (gen/return "")
            (:nonprop-color gmap)]))
        gmap (assoc gmap :nonprop-shadow gen-nonprop-shadow)

        gen-prop-box-shadow
        (igen/freq [
          [(get weights [:prop-box-shadow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-box-shadow :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-box-shadow :alt 2] 100)
            (gen/tuple
              (:nonprop-shadow gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-shadow gmap))))]])
        gmap (assoc gmap :prop-box-shadow gen-prop-box-shadow)

        gen-nonprop-flex
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return "fr"))
        gmap (assoc gmap :nonprop-flex gen-nonprop-flex)

        gen-nonprop-track-breadth
        (igen/freq [
          [(get weights [:nonprop-track-breadth :alt 0] 100)
            (:nonprop-length-percentage gmap)]
          [(get weights [:nonprop-track-breadth :alt 1] 100)
            (:nonprop-flex gmap)]
          [(get weights [:nonprop-track-breadth :alt 2] 100)
            (gen/return "min-content")]
          [(get weights [:nonprop-track-breadth :alt 3] 100)
            (gen/return "max-content")]
          [(get weights [:nonprop-track-breadth :alt 4] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :nonprop-track-breadth gen-nonprop-track-breadth)

        gen-nonprop-fixed-breadth
        (:nonprop-length-percentage gmap)
        gmap (assoc gmap :nonprop-fixed-breadth gen-nonprop-fixed-breadth)

        gen-nonprop-inflexible-breadth
        (igen/freq [
          [(get weights [:nonprop-inflexible-breadth :alt 0] 100)
            (:nonprop-length gmap)]
          [(get weights [:nonprop-inflexible-breadth :alt 1] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:nonprop-inflexible-breadth :alt 2] 100)
            (gen/return "min-content")]
          [(get weights [:nonprop-inflexible-breadth :alt 3] 100)
            (gen/return "max-content")]
          [(get weights [:nonprop-inflexible-breadth :alt 4] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :nonprop-inflexible-breadth gen-nonprop-inflexible-breadth)

        gen-nonprop-fixed-size
        (igen/freq [
          [(get weights [:nonprop-fixed-size :alt 0] 100)
            (:nonprop-fixed-breadth gmap)]
          [(get weights [:nonprop-fixed-size :alt 1] 100)
            (gen/tuple
              (gen/return "minmax")
              (gen/return "(")
              (:nonprop-fixed-breadth gmap)
              (gen/return ",")
              (:nonprop-track-breadth gmap)
              (gen/return ")"))]
          [(get weights [:nonprop-fixed-size :alt 2] 100)
            (gen/tuple
              (gen/return "minmax")
              (gen/return "(")
              (:nonprop-inflexible-breadth gmap)
              (gen/return ",")
              (:nonprop-fixed-breadth gmap)
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-fixed-size gen-nonprop-fixed-size)

        gen-nonprop-custom-ident
        (chuck/string-from-regex #"(?:[A-Za-z_]|-[A-Za-z_]|\\[0-9A-F]{1,6})(?:[A-Za-z0-9_-]|\\[0-9A-F]{1,6})+")
        gmap (assoc gmap :nonprop-custom-ident gen-nonprop-custom-ident)

        gen-nonprop-positive-integer
        gen/pos-int
        gmap (assoc gmap :nonprop-positive-integer gen-nonprop-positive-integer)

        gen-nonprop-line-names
        (gen/tuple
          (gen/return "[")
          (gen/vector
            (:nonprop-custom-ident gmap))
          (gen/return "]"))
        gmap (assoc gmap :nonprop-line-names gen-nonprop-line-names)]
    gmap))

(defn- css3-generators-part-1 [gmap weights]
  (let [
        gen-nonprop-track-size
        (igen/freq [
          [(get weights [:nonprop-track-size :alt 0] 100)
            (:nonprop-track-breadth gmap)]
          [(get weights [:nonprop-track-size :alt 1] 100)
            (gen/tuple
              (gen/return "minmax")
              (gen/return "(")
              (:nonprop-inflexible-breadth gmap)
              (gen/return ",")
              (:nonprop-track-breadth gmap)
              (gen/return ")"))]
          [(get weights [:nonprop-track-size :alt 2] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return "(")
              (igen/freq [
                [(get weights [:nonprop-track-size :alt 2 :cat 2 :alt 0] 100)
                  (:nonprop-length gmap)]
                [(get weights [:nonprop-track-size :alt 2 :cat 2 :alt 1] 100)
                  (:nonprop-percentage gmap)]])
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-track-size gen-nonprop-track-size)

        gen-nonprop-track-repeat
        (gen/tuple
          (gen/return "repeat")
          (gen/return "(")
          (:nonprop-positive-integer gmap)
          (gen/return ",")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (:nonprop-track-size gmap))))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return ")"))
        gmap (assoc gmap :nonprop-track-repeat gen-nonprop-track-repeat)

        gen-nonprop-track-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (igen/freq [
                [(get weights [:nonprop-track-list :cat 0 :plus :cat 1 :alt 0] 100)
                  (:nonprop-track-size gmap)]
                [(get weights [:nonprop-track-list :cat 0 :plus :cat 1 :alt 1] 100)
                  (:nonprop-track-repeat gmap)]]))))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)]))
        gmap (assoc gmap :nonprop-track-list gen-nonprop-track-list)

        gen-nonprop-fixed-repeat
        (gen/tuple
          (gen/return "repeat")
          (gen/return "(")
          (:nonprop-positive-integer gmap)
          (gen/return ",")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (:nonprop-fixed-size gmap))))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return ")"))
        gmap (assoc gmap :nonprop-fixed-repeat gen-nonprop-fixed-repeat)

        gen-nonprop-auto-repeat
        (gen/tuple
          (gen/return "repeat")
          (gen/return "(")
          (igen/freq [
            [(get weights [:nonprop-auto-repeat :cat 2 :alt 0] 100)
              (gen/return "auto-fill")]
            [(get weights [:nonprop-auto-repeat :cat 2 :alt 1] 100)
              (gen/return "auto-fit")]])
          (gen/return ",")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (:nonprop-fixed-size gmap))))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return ")"))
        gmap (assoc gmap :nonprop-auto-repeat gen-nonprop-auto-repeat)

        gen-nonprop-auto-track-list
        (gen/tuple
          (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (igen/freq [
                [(get weights [:nonprop-auto-track-list :cat 0 :star :cat 1 :alt 0] 100)
                  (:nonprop-fixed-size gmap)]
                [(get weights [:nonprop-auto-track-list :cat 0 :star :cat 1 :alt 1] 100)
                  (:nonprop-fixed-repeat gmap)]])))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (:nonprop-auto-repeat gmap)
          (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (igen/freq [
                [(get weights [:nonprop-auto-track-list :cat 3 :star :cat 1 :alt 0] 100)
                  (:nonprop-fixed-size gmap)]
                [(get weights [:nonprop-auto-track-list :cat 3 :star :cat 1 :alt 1] 100)
                  (:nonprop-fixed-repeat gmap)]])))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)]))
        gmap (assoc gmap :nonprop-auto-track-list gen-nonprop-auto-track-list)

        gen-prop-grid-template-columns
        (igen/freq [
          [(get weights [:prop-grid-template-columns :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-template-columns :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-grid-template-columns :alt 2] 100)
            (:nonprop-track-list gmap)]
          [(get weights [:prop-grid-template-columns :alt 3] 100)
            (:nonprop-auto-track-list gmap)]])
        gmap (assoc gmap :prop-grid-template-columns gen-prop-grid-template-columns)

        gen-nonprop-grid-template-columns
        (:prop-grid-template-columns gmap)
        gmap (assoc gmap :nonprop-grid-template-columns gen-nonprop-grid-template-columns)

        gen-prop-resize
        (igen/freq [
          [(get weights [:prop-resize :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-resize :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-resize :alt 2] 100)
            (gen/return "both")]
          [(get weights [:prop-resize :alt 3] 100)
            (gen/return "horizontal")]
          [(get weights [:prop-resize :alt 4] 100)
            (gen/return "vertical")]
          [(get weights [:prop-resize :alt 5] 100)
            (gen/return "block")]
          [(get weights [:prop-resize :alt 6] 100)
            (gen/return "inline")]])
        gmap (assoc gmap :prop-resize gen-prop-resize)

        gen-prop-border-top-color
        (igen/freq [
          [(get weights [:prop-border-top-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-border-top-color gen-prop-border-top-color)

        gen-nonprop-border-top-color
        (:prop-border-top-color gmap)
        gmap (assoc gmap :nonprop-border-top-color gen-nonprop-border-top-color)

        gen-prop-border-inline-color
        (igen/freq [
          [(get weights [:prop-border-inline-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-color :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-inline-color :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-border-top-color gmap)]
              [(get weights [:prop-border-inline-color :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-border-top-color gmap)
                  (:rS gmap)
                  (:nonprop-border-top-color gmap))]])]])
        gmap (assoc gmap :prop-border-inline-color gen-prop-border-inline-color)

        gen-prop-column-width
        (igen/freq [
          [(get weights [:prop-column-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-width :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-column-width :alt 2] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-column-width gen-prop-column-width)

        gen-nonprop-column-width
        (:prop-column-width gmap)
        gmap (assoc gmap :nonprop-column-width gen-nonprop-column-width)

        gen-prop-column-count
        (igen/freq [
          [(get weights [:prop-column-count :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-count :alt 1] 100)
            (:nonprop-integer gmap)]
          [(get weights [:prop-column-count :alt 2] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-column-count gen-prop-column-count)

        gen-nonprop-column-count
        (:prop-column-count gmap)
        gmap (assoc gmap :nonprop-column-count gen-nonprop-column-count)

        gen-prop-columns
        (igen/freq [
          [(get weights [:prop-columns :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-columns :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-columns :alt 1 :plus :alt 0] 100)
                  (:nonprop-column-width gmap)]
                [(get weights [:prop-columns :alt 1 :plus :alt 1] 100)
                  (:nonprop-column-count gmap)]])))]])
        gmap (assoc gmap :prop-columns gen-prop-columns)

        gen-nonprop-font-stretch-absolute
        (igen/freq [
          [(get weights [:nonprop-font-stretch-absolute :alt 0] 100)
            (gen/return "normal")]
          [(get weights [:nonprop-font-stretch-absolute :alt 1] 100)
            (gen/return "ultra-condensed")]
          [(get weights [:nonprop-font-stretch-absolute :alt 2] 100)
            (gen/return "extra-condensed")]
          [(get weights [:nonprop-font-stretch-absolute :alt 3] 100)
            (gen/return "condensed")]
          [(get weights [:nonprop-font-stretch-absolute :alt 4] 100)
            (gen/return "semi-condensed")]
          [(get weights [:nonprop-font-stretch-absolute :alt 5] 100)
            (gen/return "semi-expanded")]
          [(get weights [:nonprop-font-stretch-absolute :alt 6] 100)
            (gen/return "expanded")]
          [(get weights [:nonprop-font-stretch-absolute :alt 7] 100)
            (gen/return "extra-expanded")]
          [(get weights [:nonprop-font-stretch-absolute :alt 8] 100)
            (gen/return "ultra-expanded")]
          [(get weights [:nonprop-font-stretch-absolute :alt 9] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-font-stretch-absolute gen-nonprop-font-stretch-absolute)

        gen-prop-list-style-position
        (igen/freq [
          [(get weights [:prop-list-style-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-list-style-position :alt 1] 100)
            (gen/return "inside")]
          [(get weights [:prop-list-style-position :alt 2] 100)
            (gen/return "outside")]])
        gmap (assoc gmap :prop-list-style-position gen-prop-list-style-position)

        gen-nonprop-list-style-position
        (:prop-list-style-position gmap)
        gmap (assoc gmap :nonprop-list-style-position gen-nonprop-list-style-position)

        gen-nonprop-display-outside
        (igen/freq [
          [(get weights [:nonprop-display-outside :alt 0] 100)
            (gen/return "block")]
          [(get weights [:nonprop-display-outside :alt 1] 100)
            (gen/return "inline")]
          [(get weights [:nonprop-display-outside :alt 2] 100)
            (gen/return "run-in")]])
        gmap (assoc gmap :nonprop-display-outside gen-nonprop-display-outside)

        gen-nonprop-display-listitem
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-display-outside gmap)])
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-display-listitem :cat 1 :opt :alt 0] 100)
                (gen/return "flow")]
              [(get weights [:nonprop-display-listitem :cat 1 :opt :alt 1] 100)
                (gen/return "flow-root")]])])
          (gen/return "list-item"))
        gmap (assoc gmap :nonprop-display-listitem gen-nonprop-display-listitem)

        gen-prop-text-decoration-style
        (igen/freq [
          [(get weights [:prop-text-decoration-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-decoration-style :alt 1] 100)
            (gen/return "solid")]
          [(get weights [:prop-text-decoration-style :alt 2] 100)
            (gen/return "double")]
          [(get weights [:prop-text-decoration-style :alt 3] 100)
            (gen/return "dotted")]
          [(get weights [:prop-text-decoration-style :alt 4] 100)
            (gen/return "dashed")]
          [(get weights [:prop-text-decoration-style :alt 5] 100)
            (gen/return "wavy")]])
        gmap (assoc gmap :prop-text-decoration-style gen-prop-text-decoration-style)

        gen-prop-text-decoration-color
        (igen/freq [
          [(get weights [:prop-text-decoration-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-decoration-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-text-decoration-color gen-prop-text-decoration-color)

        gen-nonprop-text-decoration-style
        (:prop-text-decoration-style gmap)
        gmap (assoc gmap :nonprop-text-decoration-style gen-nonprop-text-decoration-style)

        gen-prop-text-decoration-line
        (igen/freq [
          [(get weights [:prop-text-decoration-line :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-decoration-line :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-text-decoration-line :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-text-decoration-line :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/return "underline")]
                [(get weights [:prop-text-decoration-line :alt 2 :cat 0 :plus :alt 1] 100)
                  (gen/return "overline")]
                [(get weights [:prop-text-decoration-line :alt 2 :cat 0 :plus :alt 2] 100)
                  (gen/return "line-through")]
                [(get weights [:prop-text-decoration-line :alt 2 :cat 0 :plus :alt 3] 100)
                  (gen/return "blink")]])))]])
        gmap (assoc gmap :prop-text-decoration-line gen-prop-text-decoration-line)

        gen-nonprop-text-decoration-line
        (:prop-text-decoration-line gmap)
        gmap (assoc gmap :nonprop-text-decoration-line gen-nonprop-text-decoration-line)

        gen-nonprop-text-decoration-color
        (:prop-text-decoration-color gmap)
        gmap (assoc gmap :nonprop-text-decoration-color gen-nonprop-text-decoration-color)

        gen-prop-text-decoration
        (igen/freq [
          [(get weights [:prop-text-decoration :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-decoration :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-text-decoration :alt 1 :plus :alt 0] 100)
                  (:nonprop-text-decoration-line gmap)]
                [(get weights [:prop-text-decoration :alt 1 :plus :alt 1] 100)
                  (:nonprop-text-decoration-style gmap)]
                [(get weights [:prop-text-decoration :alt 1 :plus :alt 2] 100)
                  (:nonprop-text-decoration-color gmap)]])))]])
        gmap (assoc gmap :prop-text-decoration gen-prop-text-decoration)

        gen-nonprop-resolution
        (gen/tuple
          (:nonprop-number gmap)
          (igen/freq [
            [(get weights [:nonprop-resolution :cat 1 :alt 0] 100)
              (gen/return "dpi")]
            [(get weights [:nonprop-resolution :cat 1 :alt 1] 100)
              (gen/return "dpcm")]
            [(get weights [:nonprop-resolution :cat 1 :alt 2] 100)
              (gen/return "dppx")]
            [(get weights [:nonprop-resolution :cat 1 :alt 3] 100)
              (gen/return "px")]]))
        gmap (assoc gmap :nonprop-resolution gen-nonprop-resolution)

        gen-mime-type
        (chuck/string-from-regex #"[a-z]+/[a-z0-9+-]+")
        gmap (assoc gmap :mime-type gen-mime-type)

        gen-url
        (igen/freq [
          [(get weights [:url :alt 0] 100)
            (chuck/string-from-regex #"(?:https:|http:)?//[A-Za-z0-9._\-/&#=,?]+")]
          [(get weights [:url :alt 1] 100)
            (chuck/string-from-regex #"[A-Za-z0-9._\-/#=]+")]
          [(get weights [:url :alt 2] 100)
            (gen/tuple
              (gen/return "data:")
              (:mime-type gmap)
              (gen/return ";base64,")
              (chuck/string-from-regex #"[A-Za-z0-9+=/]*"))]])
        gmap (assoc gmap :url gen-url)

        gen-nonprop-url
        (igen/freq [
          [(get weights [:nonprop-url :alt 0] 100)
            (gen/tuple
              (gen/return "url(")
              (:url gmap)
              (gen/return ")"))]
          [(get weights [:nonprop-url :alt 1] 100)
            (gen/tuple
              (gen/return "url(\"")
              (:url gmap)
              (gen/return "\")"))]])
        gmap (assoc gmap :nonprop-url gen-nonprop-url)

        gen-nonprop-string
        (igen/freq [
          [(get weights [:nonprop-string :alt 0] 100)
            (chuck/string-from-regex #"'[A-Za-z0-9 _\"\-^]*'")]
          [(get weights [:nonprop-string :alt 1] 100)
            (chuck/string-from-regex #"\"[A-Za-z0-9 _'\-^]*\"")]])
        gmap (assoc gmap :nonprop-string gen-nonprop-string)

        gen-nonprop-id-selector
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-id-selector gen-nonprop-id-selector)

        gen-func-element
        (gen/tuple
          (gen/return "element")
          (gen/return "(")
          (:nonprop-id-selector gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-element gen-func-element)

        gen-nonprop-image
        (igen/freq [
          [(get weights [:nonprop-image :alt 0] 100)
            (:nonprop-url gmap)]
          [(get weights [:nonprop-image :alt 1] 100)
            (:func-element gmap)]])
        gmap (assoc gmap :nonprop-image gen-nonprop-image)

        gen-nonprop-image-set-option
        (gen/tuple
          (igen/freq [
            [(get weights [:nonprop-image-set-option :cat 0 :alt 0] 100)
              (:nonprop-image gmap)]
            [(get weights [:nonprop-image-set-option :cat 0 :alt 1] 100)
              (:nonprop-string gmap)]])
          (:nonprop-resolution gmap))
        gmap (assoc gmap :nonprop-image-set-option gen-nonprop-image-set-option)

        gen-nonprop-line-width
        (igen/freq [
          [(get weights [:nonprop-line-width :alt 0] 100)
            (:nonprop-length gmap)]
          [(get weights [:nonprop-line-width :alt 1] 100)
            (gen/return "thin")]
          [(get weights [:nonprop-line-width :alt 2] 100)
            (gen/return "medium")]
          [(get weights [:nonprop-line-width :alt 3] 100)
            (gen/return "thick")]])
        gmap (assoc gmap :nonprop-line-width gen-nonprop-line-width)

        gen-nonprop-line-style
        (igen/freq [
          [(get weights [:nonprop-line-style :alt 0] 100)
            (gen/return "none")]
          [(get weights [:nonprop-line-style :alt 1] 100)
            (gen/return "hidden")]
          [(get weights [:nonprop-line-style :alt 2] 100)
            (gen/return "dotted")]
          [(get weights [:nonprop-line-style :alt 3] 100)
            (gen/return "dashed")]
          [(get weights [:nonprop-line-style :alt 4] 100)
            (gen/return "solid")]
          [(get weights [:nonprop-line-style :alt 5] 100)
            (gen/return "double")]
          [(get weights [:nonprop-line-style :alt 6] 100)
            (gen/return "groove")]
          [(get weights [:nonprop-line-style :alt 7] 100)
            (gen/return "ridge")]
          [(get weights [:nonprop-line-style :alt 8] 100)
            (gen/return "inset")]
          [(get weights [:nonprop-line-style :alt 9] 100)
            (gen/return "outset")]])
        gmap (assoc gmap :nonprop-line-style gen-nonprop-line-style)

        gen-prop-border
        (igen/freq [
          [(get weights [:prop-border :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border :alt 1 :plus :alt 0] 100)
                  (:nonprop-line-width gmap)]
                [(get weights [:prop-border :alt 1 :plus :alt 1] 100)
                  (:nonprop-line-style gmap)]
                [(get weights [:prop-border :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border gen-prop-border)

        gen-prop-font-variant-caps
        (igen/freq [
          [(get weights [:prop-font-variant-caps :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-caps :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-caps :alt 2] 100)
            (gen/return "small-caps")]
          [(get weights [:prop-font-variant-caps :alt 3] 100)
            (gen/return "all-small-caps")]
          [(get weights [:prop-font-variant-caps :alt 4] 100)
            (gen/return "petite-caps")]
          [(get weights [:prop-font-variant-caps :alt 5] 100)
            (gen/return "all-petite-caps")]
          [(get weights [:prop-font-variant-caps :alt 6] 100)
            (gen/return "unicase")]
          [(get weights [:prop-font-variant-caps :alt 7] 100)
            (gen/return "titling-caps")]])
        gmap (assoc gmap :prop-font-variant-caps gen-prop-font-variant-caps)

        gen-nonprop-ident
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-ident gen-nonprop-ident)

        gen-nonprop-any-value
        (gen/return "STUB_any_value")
        gmap (assoc gmap :nonprop-any-value gen-nonprop-any-value)

        gen-prop-group-rule-body
        (gen/return "STUB_prop_group_rule_body")
        gmap (assoc gmap :prop-group-rule-body gen-prop-group-rule-body)

        gen-prop-inset
        (igen/freq [
          [(get weights [:prop-inset :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-inset :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-top gmap)]
              [(get weights [:prop-inset :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap))]
              [(get weights [:prop-inset :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap))]
              [(get weights [:prop-inset :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap))]])]])
        gmap (assoc gmap :prop-inset gen-prop-inset)

        gen-nonprop-time
        (gen/tuple
          (:nonprop-number gmap)
          (igen/freq [
            [(get weights [:nonprop-time :cat 1 :alt 0] 100)
              (gen/return "s")]
            [(get weights [:nonprop-time :cat 1 :alt 1] 100)
              (gen/return "ms")]]))
        gmap (assoc gmap :nonprop-time gen-nonprop-time)

        gen-prop-transition-duration
        (igen/freq [
          [(get weights [:prop-transition-duration :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transition-duration :alt 1] 100)
            (gen/tuple
              (:nonprop-time gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-time gmap))))]])
        gmap (assoc gmap :prop-transition-duration gen-prop-transition-duration)

        gen-nonprop-ending-shape
        (igen/freq [
          [(get weights [:nonprop-ending-shape :alt 0] 100)
            (gen/return "circle")]
          [(get weights [:nonprop-ending-shape :alt 1] 100)
            (gen/return "ellipse")]])
        gmap (assoc gmap :nonprop-ending-shape gen-nonprop-ending-shape)

        gen-nonprop-color-stop-length
        (igen/freq [
          [(get weights [:nonprop-color-stop-length :cat 0 :alt 0] 100)
            (:nonprop-length-percentage gmap)]
          [(get weights [:nonprop-color-stop-length :cat 0 :alt 1] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (:rS gmap)
              (:nonprop-length-percentage gmap))]])
        gmap (assoc gmap :nonprop-color-stop-length gen-nonprop-color-stop-length)]
    gmap))

(defn- css3-generators-part-2 [gmap weights]
  (let [
        gen-nonprop-linear-color-stop
        (gen/tuple
          (:nonprop-color gmap)
          (:nonprop-color-stop-length gmap))
        gmap (assoc gmap :nonprop-linear-color-stop gen-nonprop-linear-color-stop)

        gen-nonprop-linear-color-hint
        (:nonprop-length-percentage gmap)
        gmap (assoc gmap :nonprop-linear-color-hint gen-nonprop-linear-color-hint)

        gen-nonprop-position
        (igen/freq [
          [(get weights [:nonprop-position :cat 0 :alt 0] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 0] 100)
                  (igen/freq [
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 0 :cat 0 :alt 0] 100)
                      (gen/return "left")]
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 0 :cat 0 :alt 1] 100)
                      (gen/return "center")]
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 0 :cat 0 :alt 2] 100)
                      (gen/return "right")]])]
                [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 1] 100)
                  (igen/freq [
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "top")]
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "center")]
                    [(get weights [:nonprop-position :cat 0 :alt 0 :plus :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "bottom")]])]])))]
          [(get weights [:nonprop-position :cat 0 :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 0] 100)
                  (gen/return "left")]
                [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 1] 100)
                  (gen/return "center")]
                [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 2] 100)
                  (gen/return "right")]
                [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 3] 100)
                  (:nonprop-length-percentage gmap)]])
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 1 :opt :alt 0] 100)
                    (gen/return "top")]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 1 :opt :alt 1] 100)
                    (gen/return "center")]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 1 :opt :alt 2] 100)
                    (gen/return "bottom")]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 1 :opt :alt 3] 100)
                    (:nonprop-length-percentage gmap)]])]))]
          [(get weights [:nonprop-position :cat 0 :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (igen/freq [
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :cat 0 :alt 0] 100)
                    (gen/return "left")]
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :cat 0 :alt 1] 100)
                    (gen/return "right")]])
                (:nonprop-length-percentage gmap))
              (gen/tuple
                (igen/freq [
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 1 :cat 0 :alt 0] 100)
                    (gen/return "top")]
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 1 :cat 0 :alt 1] 100)
                    (gen/return "bottom")]])
                (:nonprop-length-percentage gmap)))]])
        gmap (assoc gmap :nonprop-position gen-nonprop-position)

        gen-nonprop-size
        (igen/freq [
          [(get weights [:nonprop-size :alt 0] 100)
            (gen/return "closest-side")]
          [(get weights [:nonprop-size :alt 1] 100)
            (gen/return "farthest-side")]
          [(get weights [:nonprop-size :alt 2] 100)
            (gen/return "closest-corner")]
          [(get weights [:nonprop-size :alt 3] 100)
            (gen/return "farthest-corner")]
          [(get weights [:nonprop-size :alt 4] 100)
            (:nonprop-length gmap)]
          [(get weights [:nonprop-size :alt 5] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (:rS gmap)
              (:nonprop-length-percentage gmap))]])
        gmap (assoc gmap :nonprop-size gen-nonprop-size)

        gen-nonprop-color-stop-list
        (gen/tuple
          (gen/tuple
            (:nonprop-linear-color-stop gmap)
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (gen/return ",")
                (:nonprop-linear-color-hint gmap))]))
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/tuple
                (:nonprop-linear-color-stop gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return ",")
                    (:nonprop-linear-color-hint gmap))]))))
          (gen/return ",")
          (:nonprop-linear-color-stop gmap))
        gmap (assoc gmap :nonprop-color-stop-list gen-nonprop-color-stop-list)

        gen-func-repeating-radial-gradient
        (gen/tuple
          (gen/return "repeating-radial-gradient")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:func-repeating-radial-gradient :cat 2 :opt :plus :alt 0] 100)
                  (:nonprop-ending-shape gmap)]
                [(get weights [:func-repeating-radial-gradient :cat 2 :opt :plus :alt 1] 100)
                  (:nonprop-size gmap)]])))])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (:nonprop-position gmap))])
          (gen/return ",")
          (:nonprop-color-stop-list gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-repeating-radial-gradient gen-func-repeating-radial-gradient)

        gen-prop-overflow-x
        (igen/freq [
          [(get weights [:prop-overflow-x :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-overflow-x :alt 1] 100)
            (gen/return "visible")]
          [(get weights [:prop-overflow-x :alt 2] 100)
            (gen/return "hidden")]
          [(get weights [:prop-overflow-x :alt 3] 100)
            (gen/return "clip")]
          [(get weights [:prop-overflow-x :alt 4] 100)
            (gen/return "scroll")]
          [(get weights [:prop-overflow-x :alt 5] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-overflow-x gen-prop-overflow-x)

        gen-nonprop-angle-percentage
        (igen/freq [
          [(get weights [:nonprop-angle-percentage :alt 0] 100)
            (:nonprop-angle gmap)]
          [(get weights [:nonprop-angle-percentage :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-angle-percentage gen-nonprop-angle-percentage)

        gen-S
        (gen/return "")
        gmap (assoc gmap :S gen-S)

        gen-nonprop-shape-radius
        (igen/freq [
          [(get weights [:nonprop-shape-radius :alt 0] 100)
            (:nonprop-length-percentage gmap)]
          [(get weights [:nonprop-shape-radius :alt 1] 100)
            (gen/return "closest-side")]
          [(get weights [:nonprop-shape-radius :alt 2] 100)
            (gen/return "farthest-side")]])
        gmap (assoc gmap :nonprop-shape-radius gen-nonprop-shape-radius)

        gen-func-circle
        (gen/tuple
          (gen/return "circle")
          (gen/return "(")
          (:nonprop-shape-radius gmap)
          (gen/one-of [
            (gen/return "")
            (:S gmap)])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (:nonprop-position gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-circle gen-func-circle)

        gen-prop-vertical-align
        (igen/freq [
          [(get weights [:prop-vertical-align :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-vertical-align :alt 1] 100)
            (gen/return "baseline")]
          [(get weights [:prop-vertical-align :alt 2] 100)
            (gen/return "sub")]
          [(get weights [:prop-vertical-align :alt 3] 100)
            (gen/return "super")]
          [(get weights [:prop-vertical-align :alt 4] 100)
            (gen/return "text-top")]
          [(get weights [:prop-vertical-align :alt 5] 100)
            (gen/return "text-bottom")]
          [(get weights [:prop-vertical-align :alt 6] 100)
            (gen/return "middle")]
          [(get weights [:prop-vertical-align :alt 7] 100)
            (gen/return "top")]
          [(get weights [:prop-vertical-align :alt 8] 100)
            (gen/return "bottom")]
          [(get weights [:prop-vertical-align :alt 9] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-vertical-align :alt 10] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-vertical-align gen-prop-vertical-align)

        gen-prop-animation-delay
        (igen/freq [
          [(get weights [:prop-animation-delay :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-delay :alt 1] 100)
            (gen/tuple
              (:nonprop-time gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-time gmap))))]])
        gmap (assoc gmap :prop-animation-delay gen-prop-animation-delay)

        gen-nonprop-step-position
        (igen/freq [
          [(get weights [:nonprop-step-position :alt 0] 100)
            (gen/return "jump-start")]
          [(get weights [:nonprop-step-position :alt 1] 100)
            (gen/return "jump-end")]
          [(get weights [:nonprop-step-position :alt 2] 100)
            (gen/return "jump-none")]
          [(get weights [:nonprop-step-position :alt 3] 100)
            (gen/return "jump-both")]
          [(get weights [:nonprop-step-position :alt 4] 100)
            (gen/return "start")]
          [(get weights [:nonprop-step-position :alt 5] 100)
            (gen/return "end")]])
        gmap (assoc gmap :nonprop-step-position gen-nonprop-step-position)

        gen-nonprop-step-timing-function
        (igen/freq [
          [(get weights [:nonprop-step-timing-function :alt 0] 100)
            (gen/return "step-start")]
          [(get weights [:nonprop-step-timing-function :alt 1] 100)
            (gen/return "step-end")]
          [(get weights [:nonprop-step-timing-function :alt 2] 100)
            (gen/tuple
              (gen/return "steps")
              (gen/return "(")
              (:nonprop-integer gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-step-position gmap))])
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-step-timing-function gen-nonprop-step-timing-function)

        gen-nonprop-cubic-bezier-timing-function
        (igen/freq [
          [(get weights [:nonprop-cubic-bezier-timing-function :alt 0] 100)
            (gen/return "ease")]
          [(get weights [:nonprop-cubic-bezier-timing-function :alt 1] 100)
            (gen/return "ease-in")]
          [(get weights [:nonprop-cubic-bezier-timing-function :alt 2] 100)
            (gen/return "ease-out")]
          [(get weights [:nonprop-cubic-bezier-timing-function :alt 3] 100)
            (gen/return "ease-in-out")]
          [(get weights [:nonprop-cubic-bezier-timing-function :alt 4] 100)
            (gen/tuple
              (gen/return "cubic-bezier")
              (gen/return "(")
              (:nonprop-number gmap)
              (gen/return ",")
              (:nonprop-number gmap)
              (gen/return ",")
              (:nonprop-number gmap)
              (gen/return ",")
              (:nonprop-number gmap)
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-cubic-bezier-timing-function gen-nonprop-cubic-bezier-timing-function)

        gen-nonprop-timing-function
        (igen/freq [
          [(get weights [:nonprop-timing-function :alt 0] 100)
            (gen/return "linear")]
          [(get weights [:nonprop-timing-function :alt 1] 100)
            (:nonprop-cubic-bezier-timing-function gmap)]
          [(get weights [:nonprop-timing-function :alt 2] 100)
            (:nonprop-step-timing-function gmap)]])
        gmap (assoc gmap :nonprop-timing-function gen-nonprop-timing-function)

        gen-nonprop-counter-style-name
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-counter-style-name gen-nonprop-counter-style-name)

        gen-nonprop-counter-style
        (igen/freq [
          [(get weights [:nonprop-counter-style :alt 0] 100)
            (:nonprop-counter-style-name gmap)]
          [(get weights [:nonprop-counter-style :alt 1] 100)
            (gen/tuple
              (gen/return "symbols")
              (gen/return "(")
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-counter-style gen-nonprop-counter-style)

        gen-prop-list-style-type
        (igen/freq [
          [(get weights [:prop-list-style-type :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-list-style-type :alt 1] 100)
            (:nonprop-counter-style gmap)]
          [(get weights [:prop-list-style-type :alt 2] 100)
            (:nonprop-string gmap)]
          [(get weights [:prop-list-style-type :alt 3] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-list-style-type gen-prop-list-style-type)

        gen-nonprop-list-style-type
        (:prop-list-style-type gmap)
        gmap (assoc gmap :nonprop-list-style-type gen-nonprop-list-style-type)

        gen-prop-caption-side
        (igen/freq [
          [(get weights [:prop-caption-side :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-caption-side :alt 1] 100)
            (gen/return "top")]
          [(get weights [:prop-caption-side :alt 2] 100)
            (gen/return "bottom")]
          [(get weights [:prop-caption-side :alt 3] 100)
            (gen/return "block-start")]
          [(get weights [:prop-caption-side :alt 4] 100)
            (gen/return "block-end")]
          [(get weights [:prop-caption-side :alt 5] 100)
            (gen/return "inline-start")]
          [(get weights [:prop-caption-side :alt 6] 100)
            (gen/return "inline-end")]])
        gmap (assoc gmap :prop-caption-side gen-prop-caption-side)

        gen-prop-text-transform
        (igen/freq [
          [(get weights [:prop-text-transform :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-transform :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-text-transform :alt 2] 100)
            (gen/return "capitalize")]
          [(get weights [:prop-text-transform :alt 3] 100)
            (gen/return "uppercase")]
          [(get weights [:prop-text-transform :alt 4] 100)
            (gen/return "lowercase")]
          [(get weights [:prop-text-transform :alt 5] 100)
            (gen/return "full-width")]
          [(get weights [:prop-text-transform :alt 6] 100)
            (gen/return "full-size-kana")]])
        gmap (assoc gmap :prop-text-transform gen-prop-text-transform)

        gen-prop-rotate
        (igen/freq [
          [(get weights [:prop-rotate :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-rotate :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-rotate :alt 2] 100)
            (:nonprop-angle gmap)]
          [(get weights [:prop-rotate :alt 3] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-rotate :alt 3 :cat 0 :alt 0] 100)
                  (gen/return "x")]
                [(get weights [:prop-rotate :alt 3 :cat 0 :alt 1] 100)
                  (gen/return "y")]
                [(get weights [:prop-rotate :alt 3 :cat 0 :alt 2] 100)
                  (gen/return "z")]
                [(get weights [:prop-rotate :alt 3 :cat 0 :alt 3] 100)
                  (gen/tuple
                    (:nonprop-number gmap)
                    (:rS gmap)
                    (:nonprop-number gmap)
                    (:rS gmap)
                    (:nonprop-number gmap))]])
              (:nonprop-angle gmap))]])
        gmap (assoc gmap :prop-rotate gen-prop-rotate)

        gen-func-minmax
        (gen/tuple
          (gen/return "minmax")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-minmax :cat 2 :alt 0] 100)
              (:nonprop-length gmap)]
            [(get weights [:func-minmax :cat 2 :alt 1] 100)
              (:nonprop-percentage gmap)]
            [(get weights [:func-minmax :cat 2 :alt 2] 100)
              (:nonprop-flex gmap)]
            [(get weights [:func-minmax :cat 2 :alt 3] 100)
              (gen/return "min-content")]
            [(get weights [:func-minmax :cat 2 :alt 4] 100)
              (gen/return "max-content")]
            [(get weights [:func-minmax :cat 2 :alt 5] 100)
              (gen/return "auto")]])
          (gen/return ",")
          (igen/freq [
            [(get weights [:func-minmax :cat 4 :alt 0] 100)
              (:nonprop-length gmap)]
            [(get weights [:func-minmax :cat 4 :alt 1] 100)
              (:nonprop-percentage gmap)]
            [(get weights [:func-minmax :cat 4 :alt 2] 100)
              (:nonprop-flex gmap)]
            [(get weights [:func-minmax :cat 4 :alt 3] 100)
              (gen/return "min-content")]
            [(get weights [:func-minmax :cat 4 :alt 4] 100)
              (gen/return "max-content")]
            [(get weights [:func-minmax :cat 4 :alt 5] 100)
              (gen/return "auto")]])
          (gen/return ")"))
        gmap (assoc gmap :func-minmax gen-func-minmax)

        gen-prop-unknown
        (chuck/string-from-regex #"[^\";}]+")
        gmap (assoc gmap :prop-unknown gen-prop-unknown)

        gen-css-unknown
        (gen/tuple
          (chuck/string-from-regex #"[A-Za-z-]+")
          (gen/return ":")
          (igen/freq [
            [(get weights [:css-unknown :cat 2 :alt 0] 100)
              (:prop-all gmap)]
            [(get weights [:css-unknown :cat 2 :alt 1] 100)
              (:prop-unknown gmap)]]))
        gmap (assoc gmap :css-unknown gen-css-unknown)

        gen-nonprop-repeat-style
        (igen/freq [
          [(get weights [:nonprop-repeat-style :alt 0] 100)
            (gen/return "repeat-x")]
          [(get weights [:nonprop-repeat-style :alt 1] 100)
            (gen/return "repeat-y")]
          [(get weights [:nonprop-repeat-style :alt 2] 100)
            (igen/freq [
              [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "repeat")]
                  [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "space")]
                  [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "round")]
                  [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 3] 100)
                    (gen/return "no-repeat")]])]
              [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "repeat")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "space")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "round")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 3] 100)
                      (gen/return "no-repeat")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "repeat")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "space")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "round")]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 2 :alt 3] 100)
                      (gen/return "no-repeat")]]))]])]])
        gmap (assoc gmap :nonprop-repeat-style gen-nonprop-repeat-style)

        gen-prop-font-synthesis
        (igen/freq [
          [(get weights [:prop-font-synthesis :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-synthesis :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-font-synthesis :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-synthesis :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/return "weight")]
                [(get weights [:prop-font-synthesis :alt 2 :cat 0 :plus :alt 1] 100)
                  (gen/return "style")]])))]])
        gmap (assoc gmap :prop-font-synthesis gen-prop-font-synthesis)

        gen-prop-min-height
        (igen/freq [
          [(get weights [:prop-min-height :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-min-height :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-min-height :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-min-height :alt 3] 100)
            (gen/return "auto")]
          [(get weights [:prop-min-height :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-min-height :alt 5] 100)
            (gen/return "min-content")]
          [(get weights [:prop-min-height :alt 6] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-min-height :alt 7] 100)
            (gen/return "fill-available")]])
        gmap (assoc gmap :prop-min-height gen-prop-min-height)

        gen-nonprop-range
        (gen/return "STUB_range")
        gmap (assoc gmap :nonprop-range gen-nonprop-range)

        gen-nonprop-keyframe-selector
        (igen/freq [
          [(get weights [:nonprop-keyframe-selector :alt 0] 100)
            (gen/return "from")]
          [(get weights [:nonprop-keyframe-selector :alt 1] 100)
            (gen/return "to")]
          [(get weights [:nonprop-keyframe-selector :alt 2] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-keyframe-selector gen-nonprop-keyframe-selector)

        gen-prop-scroll-margin-inline-end
        (igen/freq [
          [(get weights [:prop-scroll-margin-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-inline-end :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-inline-end :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-inline-end gen-prop-scroll-margin-inline-end)

        gen-prop-border-right-style
        (igen/freq [
          [(get weights [:prop-border-right-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-right-style :alt 1] 100)
            (:nonprop-line-style gmap)]])
        gmap (assoc gmap :prop-border-right-style gen-prop-border-right-style)

        gen-prop-transform-origin
        (igen/freq [
          [(get weights [:prop-transform-origin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transform-origin :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 1] 100)
                (gen/return "left")]
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 2] 100)
                (gen/return "center")]
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 3] 100)
                (gen/return "right")]
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 4] 100)
                (gen/return "top")]
              [(get weights [:prop-transform-origin :alt 1 :cat 0 :alt 5] 100)
                (gen/return "bottom")]])]
          [(get weights [:prop-transform-origin :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (igen/freq [
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 0 :alt 0] 100)
                    (:nonprop-length-percentage gmap)]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 0 :alt 1] 100)
                    (gen/return "left")]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 0 :alt 2] 100)
                    (gen/return "center")]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 0 :alt 3] 100)
                    (gen/return "right")]])
                (igen/freq [
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 1 :alt 0] 100)
                    (:nonprop-length-percentage gmap)]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 1 :alt 1] 100)
                    (gen/return "top")]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 1 :alt 2] 100)
                    (gen/return "center")]
                  [(get weights [:prop-transform-origin :alt 2 :cat 0 :cat 1 :alt 3] 100)
                    (gen/return "bottom")]]))
              (gen/one-of [
                (gen/return "")
                (:nonprop-length gmap)]))]])
        gmap (assoc gmap :prop-transform-origin gen-prop-transform-origin)

        gen-prop-font-size-adjust
        (igen/freq [
          [(get weights [:prop-font-size-adjust :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-size-adjust :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-font-size-adjust :alt 2] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :prop-font-size-adjust gen-prop-font-size-adjust)

        gen-prop-grid-auto-rows
        (igen/freq [
          [(get weights [:prop-grid-auto-rows :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-auto-rows :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (:nonprop-track-size gmap)))]])
        gmap (assoc gmap :prop-grid-auto-rows gen-prop-grid-auto-rows)

        gen-nonprop-grid-auto-rows
        (:prop-grid-auto-rows gmap)
        gmap (assoc gmap :nonprop-grid-auto-rows gen-nonprop-grid-auto-rows)

        gen-nonprop-ratio
        (gen/tuple
          (:nonprop-positive-integer gmap)
          (gen/return "/")
          (:nonprop-positive-integer gmap))
        gmap (assoc gmap :nonprop-ratio gen-nonprop-ratio)

        gen-nonprop-dimension
        (:nonprop-resolution gmap)
        gmap (assoc gmap :nonprop-dimension gen-nonprop-dimension)

        gen-nonprop-mf-value
        (igen/freq [
          [(get weights [:nonprop-mf-value :alt 0] 100)
            (:nonprop-number gmap)]
          [(get weights [:nonprop-mf-value :alt 1] 100)
            (:nonprop-dimension gmap)]
          [(get weights [:nonprop-mf-value :alt 2] 100)
            (:nonprop-ident gmap)]
          [(get weights [:nonprop-mf-value :alt 3] 100)
            (:nonprop-ratio gmap)]])
        gmap (assoc gmap :nonprop-mf-value gen-nonprop-mf-value)

        gen-nonprop-mf-name
        (:nonprop-ident gmap)
        gmap (assoc gmap :nonprop-mf-name gen-nonprop-mf-name)

        gen-nonprop-mf-range
        (igen/freq [
          [(get weights [:nonprop-mf-range :alt 0] 100)
            (gen/tuple
              (:nonprop-mf-name gmap)
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:nonprop-mf-range :alt 0 :cat 1 :opt :alt 0] 100)
                    (gen/return "<")]
                  [(get weights [:nonprop-mf-range :alt 0 :cat 1 :opt :alt 1] 100)
                    (gen/return ">")]])])
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-value gmap))]
          [(get weights [:nonprop-mf-range :alt 1] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:nonprop-mf-range :alt 1 :cat 1 :opt :alt 0] 100)
                    (gen/return "<")]
                  [(get weights [:nonprop-mf-range :alt 1 :cat 1 :opt :alt 1] 100)
                    (gen/return ">")]])])
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-name gmap))]
          [(get weights [:nonprop-mf-range :alt 2] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/return "<")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-name gmap)
              (gen/return "<")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-value gmap))]
          [(get weights [:nonprop-mf-range :alt 3] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/return ">")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-name gmap)
              (gen/return ">")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (:nonprop-mf-value gmap))]])
        gmap (assoc gmap :nonprop-mf-range gen-nonprop-mf-range)

        gen-nonprop-mf-plain
        (gen/tuple
          (:nonprop-mf-name gmap)
          (gen/return ":")
          (:nonprop-mf-value gmap))
        gmap (assoc gmap :nonprop-mf-plain gen-nonprop-mf-plain)

        gen-nonprop-mf-boolean
        (:nonprop-mf-name gmap)
        gmap (assoc gmap :nonprop-mf-boolean gen-nonprop-mf-boolean)

        gen-nonprop-media-feature
        (gen/tuple
          (gen/return "(")
          (igen/freq [
            [(get weights [:nonprop-media-feature :cat 1 :alt 0] 100)
              (:nonprop-mf-plain gmap)]
            [(get weights [:nonprop-media-feature :cat 1 :alt 1] 100)
              (:nonprop-mf-boolean gmap)]
            [(get weights [:nonprop-media-feature :cat 1 :alt 2] 100)
              (:nonprop-mf-range gmap)]])
          (gen/return ")"))
        gmap (assoc gmap :nonprop-media-feature gen-nonprop-media-feature)

        gen-nonprop-self-position
        (igen/freq [
          [(get weights [:nonprop-self-position :alt 0] 100)
            (gen/return "center")]
          [(get weights [:nonprop-self-position :alt 1] 100)
            (gen/return "start")]
          [(get weights [:nonprop-self-position :alt 2] 100)
            (gen/return "end")]
          [(get weights [:nonprop-self-position :alt 3] 100)
            (gen/return "self-start")]
          [(get weights [:nonprop-self-position :alt 4] 100)
            (gen/return "self-end")]
          [(get weights [:nonprop-self-position :alt 5] 100)
            (gen/return "flex-start")]
          [(get weights [:nonprop-self-position :alt 6] 100)
            (gen/return "flex-end")]])
        gmap (assoc gmap :nonprop-self-position gen-nonprop-self-position)

        gen-nonprop-baseline-position
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-baseline-position :cat 0 :opt :alt 0] 100)
                (gen/return "first")]
              [(get weights [:nonprop-baseline-position :cat 0 :opt :alt 1] 100)
                (gen/return "last")]])])
          (gen/return "baseline"))
        gmap (assoc gmap :nonprop-baseline-position gen-nonprop-baseline-position)

        gen-nonprop-overflow-position
        (igen/freq [
          [(get weights [:nonprop-overflow-position :alt 0] 100)
            (gen/return "unsafe")]
          [(get weights [:nonprop-overflow-position :alt 1] 100)
            (gen/return "safe")]])
        gmap (assoc gmap :nonprop-overflow-position gen-nonprop-overflow-position)

        gen-prop-align-items
        (igen/freq [
          [(get weights [:prop-align-items :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-align-items :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-align-items :alt 2] 100)
            (gen/return "stretch")]
          [(get weights [:prop-align-items :alt 3] 100)
            (:nonprop-baseline-position gmap)]
          [(get weights [:prop-align-items :alt 4] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (:nonprop-self-position gmap))]])
        gmap (assoc gmap :prop-align-items gen-prop-align-items)]
    gmap))

(defn- css3-generators-part-3 [gmap weights]
  (let [
        gen-prop-border-right
        (igen/freq [
          [(get weights [:prop-border-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-right :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-right :alt 1 :plus :alt 0] 100)
                  (:nonprop-line-width gmap)]
                [(get weights [:prop-border-right :alt 1 :plus :alt 1] 100)
                  (:nonprop-line-style gmap)]
                [(get weights [:prop-border-right :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-right gen-prop-border-right)

        gen-nonprop-image-src
        (igen/freq [
          [(get weights [:nonprop-image-src :alt 0] 100)
            (:nonprop-url gmap)]
          [(get weights [:nonprop-image-src :alt 1] 100)
            (:nonprop-string gmap)]])
        gmap (assoc gmap :nonprop-image-src gen-nonprop-image-src)

        gen-prop-font-optical-sizing
        (igen/freq [
          [(get weights [:prop-font-optical-sizing :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-optical-sizing :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-font-optical-sizing :alt 2] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-font-optical-sizing gen-prop-font-optical-sizing)

        gen-prop-margin-left
        (igen/freq [
          [(get weights [:prop-margin-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-left :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-margin-left :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-margin-left :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-margin-left gen-prop-margin-left)

        gen-nonprop-margin-left
        (:prop-margin-left gmap)
        gmap (assoc gmap :nonprop-margin-left gen-nonprop-margin-left)

        gen-prop-margin-block
        (igen/freq [
          [(get weights [:prop-margin-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-block :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-margin-block :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-margin-left gmap)]
              [(get weights [:prop-margin-block :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-margin-left gmap)
                  (:rS gmap)
                  (:nonprop-margin-left gmap))]])]])
        gmap (assoc gmap :prop-margin-block gen-prop-margin-block)

        gen-nonprop-namespace-prefix
        (:nonprop-ident gmap)
        gmap (assoc gmap :nonprop-namespace-prefix gen-nonprop-namespace-prefix)

        gen-prop-AT-namespace
        (gen/tuple
          (gen/return "@namespace")
          (gen/one-of [
            (gen/return "")
            (:nonprop-namespace-prefix gmap)])
          (igen/freq [
            [(get weights [:prop-AT-namespace :cat 2 :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:prop-AT-namespace :cat 2 :alt 1] 100)
              (:nonprop-url gmap)]])
          (gen/return ";"))
        gmap (assoc gmap :prop-AT-namespace gen-prop-AT-namespace)

        gen-nonprop-box
        (igen/freq [
          [(get weights [:nonprop-box :alt 0] 100)
            (gen/return "border-box")]
          [(get weights [:nonprop-box :alt 1] 100)
            (gen/return "padding-box")]
          [(get weights [:nonprop-box :alt 2] 100)
            (gen/return "content-box")]])
        gmap (assoc gmap :nonprop-box gen-nonprop-box)

        gen-nonprop-shape-box
        (igen/freq [
          [(get weights [:nonprop-shape-box :alt 0] 100)
            (:nonprop-box gmap)]
          [(get weights [:nonprop-shape-box :alt 1] 100)
            (gen/return "margin-box")]])
        gmap (assoc gmap :nonprop-shape-box gen-nonprop-shape-box)

        gen-nonprop-geometry-box
        (igen/freq [
          [(get weights [:nonprop-geometry-box :alt 0] 100)
            (:nonprop-shape-box gmap)]
          [(get weights [:nonprop-geometry-box :alt 1] 100)
            (gen/return "fill-box")]
          [(get weights [:nonprop-geometry-box :alt 2] 100)
            (gen/return "stroke-box")]
          [(get weights [:nonprop-geometry-box :alt 3] 100)
            (gen/return "view-box")]])
        gmap (assoc gmap :nonprop-geometry-box gen-nonprop-geometry-box)

        gen-prop-column-fill
        (igen/freq [
          [(get weights [:prop-column-fill :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-fill :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-column-fill :alt 2] 100)
            (gen/return "balance")]
          [(get weights [:prop-column-fill :alt 3] 100)
            (gen/return "balance-all")]])
        gmap (assoc gmap :prop-column-fill gen-prop-column-fill)

        gen-func-rotate
        (gen/tuple
          (gen/return "rotate")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-rotate gen-func-rotate)

        gen-prop-border-style
        (igen/freq [
          [(get weights [:prop-border-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-style :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-style :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-line-style gmap)]
              [(get weights [:prop-border-style :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap))]
              [(get weights [:prop-border-style :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap))]
              [(get weights [:prop-border-style :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap)
                  (:rS gmap)
                  (:nonprop-line-style gmap))]])]])
        gmap (assoc gmap :prop-border-style gen-prop-border-style)

        gen-nonprop-border-style
        (:prop-border-style gmap)
        gmap (assoc gmap :nonprop-border-style gen-nonprop-border-style)

        gen-prop-column-rule-style
        (igen/freq [
          [(get weights [:prop-column-rule-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-rule-style :alt 1] 100)
            (:nonprop-border-style gmap)]])
        gmap (assoc gmap :prop-column-rule-style gen-prop-column-rule-style)

        gen-nonprop-single-transition-property
        (igen/freq [
          [(get weights [:nonprop-single-transition-property :alt 0] 100)
            (gen/return "all")]
          [(get weights [:nonprop-single-transition-property :alt 1] 100)
            (:nonprop-custom-ident gmap)]])
        gmap (assoc gmap :nonprop-single-transition-property gen-nonprop-single-transition-property)

        gen-nonprop-side-or-corner
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-side-or-corner :plus :alt 0] 100)
              (igen/freq [
                [(get weights [:nonprop-side-or-corner :plus :alt 0 :cat 0 :alt 0] 100)
                  (gen/return "left")]
                [(get weights [:nonprop-side-or-corner :plus :alt 0 :cat 0 :alt 1] 100)
                  (gen/return "right")]])]
            [(get weights [:nonprop-side-or-corner :plus :alt 1] 100)
              (igen/freq [
                [(get weights [:nonprop-side-or-corner :plus :alt 1 :cat 0 :alt 0] 100)
                  (gen/return "top")]
                [(get weights [:nonprop-side-or-corner :plus :alt 1 :cat 0 :alt 1] 100)
                  (gen/return "bottom")]])]])))
        gmap (assoc gmap :nonprop-side-or-corner gen-nonprop-side-or-corner)

        gen-func-linear-gradient
        (gen/tuple
          (gen/return "linear-gradient")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:func-linear-gradient :cat 2 :opt :alt 0] 100)
                (:nonprop-angle gmap)]
              [(get weights [:func-linear-gradient :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "to")
                  (:nonprop-side-or-corner gmap))]])])
          (gen/return ",")
          (:nonprop-color-stop-list gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-linear-gradient gen-func-linear-gradient)

        gen-nonprop-numeric-figure-values
        (igen/freq [
          [(get weights [:nonprop-numeric-figure-values :cat 0 :alt 0] 100)
            (gen/return "lining-nums")]
          [(get weights [:nonprop-numeric-figure-values :cat 0 :alt 1] 100)
            (gen/return "oldstyle-nums")]])
        gmap (assoc gmap :nonprop-numeric-figure-values gen-nonprop-numeric-figure-values)

        gen-nonprop-numeric-spacing-values
        (igen/freq [
          [(get weights [:nonprop-numeric-spacing-values :cat 0 :alt 0] 100)
            (gen/return "proportional-nums")]
          [(get weights [:nonprop-numeric-spacing-values :cat 0 :alt 1] 100)
            (gen/return "tabular-nums")]])
        gmap (assoc gmap :nonprop-numeric-spacing-values gen-nonprop-numeric-spacing-values)

        gen-nonprop-numeric-fraction-values
        (igen/freq [
          [(get weights [:nonprop-numeric-fraction-values :cat 0 :alt 0] 100)
            (gen/return "diagonal-fractions")]
          [(get weights [:nonprop-numeric-fraction-values :cat 0 :alt 1] 100)
            (gen/return "stacked-fractions")]])
        gmap (assoc gmap :nonprop-numeric-fraction-values gen-nonprop-numeric-fraction-values)

        gen-prop-font-variant-numeric
        (igen/freq [
          [(get weights [:prop-font-variant-numeric :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-numeric :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-numeric :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-variant-numeric :alt 2 :cat 0 :plus :alt 0] 100)
                  (:nonprop-numeric-figure-values gmap)]
                [(get weights [:prop-font-variant-numeric :alt 2 :cat 0 :plus :alt 1] 100)
                  (:nonprop-numeric-spacing-values gmap)]
                [(get weights [:prop-font-variant-numeric :alt 2 :cat 0 :plus :alt 2] 100)
                  (:nonprop-numeric-fraction-values gmap)]
                [(get weights [:prop-font-variant-numeric :alt 2 :cat 0 :plus :alt 3] 100)
                  (gen/return "ordinal")]
                [(get weights [:prop-font-variant-numeric :alt 2 :cat 0 :plus :alt 4] 100)
                  (gen/return "slashed-zero")]])))]])
        gmap (assoc gmap :prop-font-variant-numeric gen-prop-font-variant-numeric)

        gen-prop-text-emphasis-style
        (igen/freq [
          [(get weights [:prop-text-emphasis-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-emphasis-style :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-text-emphasis-style :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 0] 100)
                  (igen/freq [
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 0 :cat 0 :alt 0] 100)
                      (gen/return "filled")]
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 0 :cat 0 :alt 1] 100)
                      (gen/return "open")]])]
                [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1] 100)
                  (igen/freq [
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "dot")]
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "circle")]
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "double-circle")]
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 3] 100)
                      (gen/return "triangle")]
                    [(get weights [:prop-text-emphasis-style :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 4] 100)
                      (gen/return "sesame")]])]])))]
          [(get weights [:prop-text-emphasis-style :alt 3] 100)
            (:nonprop-string gmap)]])
        gmap (assoc gmap :prop-text-emphasis-style gen-prop-text-emphasis-style)

        gen-nonprop-text-emphasis-style
        (:prop-text-emphasis-style gmap)
        gmap (assoc gmap :nonprop-text-emphasis-style gen-nonprop-text-emphasis-style)

        gen-nonprop-leader-type
        (igen/freq [
          [(get weights [:nonprop-leader-type :alt 0] 100)
            (gen/return "dotted")]
          [(get weights [:nonprop-leader-type :alt 1] 100)
            (gen/return "solid")]
          [(get weights [:nonprop-leader-type :alt 2] 100)
            (gen/return "space")]
          [(get weights [:nonprop-leader-type :alt 3] 100)
            (:nonprop-string gmap)]])
        gmap (assoc gmap :nonprop-leader-type gen-nonprop-leader-type)

        gen-func-leader
        (gen/tuple
          (gen/return "leader")
          (gen/return "(")
          (:nonprop-leader-type gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-leader gen-func-leader)

        gen-nonprop-grid-line
        (igen/freq [
          [(get weights [:nonprop-grid-line :alt 0] 100)
            (gen/return "auto")]
          [(get weights [:nonprop-grid-line :alt 1] 100)
            (:nonprop-custom-ident gmap)]
          [(get weights [:nonprop-grid-line :alt 2] 100)
            (gen/tuple
              (:nonprop-integer gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-custom-ident gmap)]))]
          [(get weights [:nonprop-grid-line :alt 3] 100)
            (gen/tuple
              (gen/return "span")
              (gen/such-that not-empty (gen/vector
                (igen/freq [
                  [(get weights [:nonprop-grid-line :alt 3 :cat 0 :cat 1 :plus :alt 0] 100)
                    (:nonprop-integer gmap)]
                  [(get weights [:nonprop-grid-line :alt 3 :cat 0 :cat 1 :plus :alt 1] 100)
                    (:nonprop-custom-ident gmap)]]))))]])
        gmap (assoc gmap :nonprop-grid-line gen-nonprop-grid-line)

        gen-prop-grid-row-end
        (igen/freq [
          [(get weights [:prop-grid-row-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-row-end :alt 1] 100)
            (:nonprop-grid-line gmap)]])
        gmap (assoc gmap :prop-grid-row-end gen-prop-grid-row-end)

        gen-prop-line-height
        (igen/freq [
          [(get weights [:prop-line-height :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-line-height :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-line-height :alt 2] 100)
            (:nonprop-number gmap)]
          [(get weights [:prop-line-height :alt 3] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-line-height :alt 4] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-line-height gen-prop-line-height)

        gen-nonprop-line-height
        (:prop-line-height gmap)
        gmap (assoc gmap :nonprop-line-height gen-nonprop-line-height)

        gen-charset
        (igen/freq [
          [(get weights [:charset :alt 0] 100)
            (gen/return "UTF-8")]
          [(get weights [:charset :alt 1] 100)
            (gen/return "utf-8")]
          [(get weights [:charset :alt 2] 100)
            (gen/return "iso-8859-15")]])
        gmap (assoc gmap :charset gen-charset)

        gen-nonprop-charset
        (:charset gmap)
        gmap (assoc gmap :nonprop-charset gen-nonprop-charset)

        gen-prop-AT-charset
        (gen/tuple
          (gen/return "@charset")
          (gen/return "\"")
          (:nonprop-charset gmap)
          (gen/return "\"")
          (gen/return ";"))
        gmap (assoc gmap :prop-AT-charset gen-prop-AT-charset)

        gen-prop-inset-block-end
        (igen/freq [
          [(get weights [:prop-inset-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-block-end :alt 1] 100)
            (:nonprop-top gmap)]])
        gmap (assoc gmap :prop-inset-block-end gen-prop-inset-block-end)

        gen-prop-align-self
        (igen/freq [
          [(get weights [:prop-align-self :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-align-self :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-align-self :alt 2] 100)
            (gen/return "normal")]
          [(get weights [:prop-align-self :alt 3] 100)
            (gen/return "stretch")]
          [(get weights [:prop-align-self :alt 4] 100)
            (:nonprop-baseline-position gmap)]
          [(get weights [:prop-align-self :alt 5] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (:nonprop-self-position gmap))]])
        gmap (assoc gmap :prop-align-self gen-prop-align-self)

        gen-nonprop-align-self
        (:prop-align-self gmap)
        gmap (assoc gmap :nonprop-align-self gen-nonprop-align-self)

        gen-prop-scroll-padding-block
        (igen/freq [
          [(get weights [:prop-scroll-padding-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-block :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (:nonprop-percentage gmap)]])]
              [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding-block :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (:nonprop-percentage gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-padding-block gen-prop-scroll-padding-block)

        gen-prop-clear
        (igen/freq [
          [(get weights [:prop-clear :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-clear :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-clear :alt 2] 100)
            (gen/return "left")]
          [(get weights [:prop-clear :alt 3] 100)
            (gen/return "right")]
          [(get weights [:prop-clear :alt 4] 100)
            (gen/return "both")]
          [(get weights [:prop-clear :alt 5] 100)
            (gen/return "inline-start")]
          [(get weights [:prop-clear :alt 6] 100)
            (gen/return "inline-end")]])
        gmap (assoc gmap :prop-clear gen-prop-clear)

        gen-nonprop-east-asian-variant-values
        (igen/freq [
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 0] 100)
            (gen/return "jis78")]
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 1] 100)
            (gen/return "jis83")]
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 2] 100)
            (gen/return "jis90")]
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 3] 100)
            (gen/return "jis04")]
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 4] 100)
            (gen/return "simplified")]
          [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 5] 100)
            (gen/return "traditional")]])
        gmap (assoc gmap :nonprop-east-asian-variant-values gen-nonprop-east-asian-variant-values)

        gen-prop-outline-offset
        (igen/freq [
          [(get weights [:prop-outline-offset :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-outline-offset :alt 1] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-outline-offset gen-prop-outline-offset)

        gen-nonprop-viewport-length
        (igen/freq [
          [(get weights [:nonprop-viewport-length :alt 0] 100)
            (gen/return "auto")]
          [(get weights [:nonprop-viewport-length :alt 1] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :nonprop-viewport-length gen-nonprop-viewport-length)

        gen-prop-border-width
        (igen/freq [
          [(get weights [:prop-border-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-width :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-width :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-line-width gmap)]
              [(get weights [:prop-border-width :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap))]
              [(get weights [:prop-border-width :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap))]
              [(get weights [:prop-border-width :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap)
                  (:rS gmap)
                  (:nonprop-line-width gmap))]])]])
        gmap (assoc gmap :prop-border-width gen-prop-border-width)

        gen-nonprop-border-width
        (:prop-border-width gmap)
        gmap (assoc gmap :nonprop-border-width gen-nonprop-border-width)

        gen-prop-column-rule-width
        (igen/freq [
          [(get weights [:prop-column-rule-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-rule-width :alt 1] 100)
            (:nonprop-border-width gmap)]])
        gmap (assoc gmap :prop-column-rule-width gen-prop-column-rule-width)

        gen-nonprop-column-rule-width
        (:prop-column-rule-width gmap)
        gmap (assoc gmap :nonprop-column-rule-width gen-nonprop-column-rule-width)

        gen-prop-column-rule-color
        (igen/freq [
          [(get weights [:prop-column-rule-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-rule-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-column-rule-color gen-prop-column-rule-color)

        gen-nonprop-column-rule-color
        (:prop-column-rule-color gmap)
        gmap (assoc gmap :nonprop-column-rule-color gen-nonprop-column-rule-color)

        gen-nonprop-column-rule-style
        (:prop-column-rule-style gmap)
        gmap (assoc gmap :nonprop-column-rule-style gen-nonprop-column-rule-style)

        gen-prop-column-rule
        (igen/freq [
          [(get weights [:prop-column-rule :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-rule :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-column-rule :alt 1 :plus :alt 0] 100)
                  (:nonprop-column-rule-width gmap)]
                [(get weights [:prop-column-rule :alt 1 :plus :alt 1] 100)
                  (:nonprop-column-rule-style gmap)]
                [(get weights [:prop-column-rule :alt 1 :plus :alt 2] 100)
                  (:nonprop-column-rule-color gmap)]])))]])
        gmap (assoc gmap :prop-column-rule gen-prop-column-rule)]
    gmap))

(defn- css3-generators-part-4 [gmap weights]
  (let [
        gen-nonprop-bg-image
        (igen/freq [
          [(get weights [:nonprop-bg-image :alt 0] 100)
            (gen/return "none")]
          [(get weights [:nonprop-bg-image :alt 1] 100)
            (:nonprop-image gmap)]])
        gmap (assoc gmap :nonprop-bg-image gen-nonprop-bg-image)

        gen-func-skewY
        (gen/tuple
          (gen/return "skewY")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-skewY gen-func-skewY)

        gen-prop-orphans
        (igen/freq [
          [(get weights [:prop-orphans :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-orphans :alt 1] 100)
            (:nonprop-integer gmap)]])
        gmap (assoc gmap :prop-orphans gen-prop-orphans)

        gen-prop-shape-image-threshold
        (igen/freq [
          [(get weights [:prop-shape-image-threshold :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-shape-image-threshold :alt 1] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :prop-shape-image-threshold gen-prop-shape-image-threshold)

        gen-func-scaleY
        (gen/tuple
          (gen/return "scaleY")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-scaleY gen-func-scaleY)

        gen-nonprop-discretionary-lig-values
        (igen/freq [
          [(get weights [:nonprop-discretionary-lig-values :cat 0 :alt 0] 100)
            (gen/return "discretionary-ligatures")]
          [(get weights [:nonprop-discretionary-lig-values :cat 0 :alt 1] 100)
            (gen/return "no-discretionary-ligatures")]])
        gmap (assoc gmap :nonprop-discretionary-lig-values gen-nonprop-discretionary-lig-values)

        gen-prop-border-top-style
        (igen/freq [
          [(get weights [:prop-border-top-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top-style :alt 1] 100)
            (:nonprop-line-style gmap)]])
        gmap (assoc gmap :prop-border-top-style gen-prop-border-top-style)

        gen-nonprop-border-top-style
        (:prop-border-top-style gmap)
        gmap (assoc gmap :nonprop-border-top-style gen-nonprop-border-top-style)

        gen-prop-border-block-start-style
        (igen/freq [
          [(get weights [:prop-border-block-start-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-start-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-block-start-style gen-prop-border-block-start-style)

        gen-nonprop-blend-mode
        (igen/freq [
          [(get weights [:nonprop-blend-mode :alt 0] 100)
            (gen/return "normal")]
          [(get weights [:nonprop-blend-mode :alt 1] 100)
            (gen/return "multiply")]
          [(get weights [:nonprop-blend-mode :alt 2] 100)
            (gen/return "screen")]
          [(get weights [:nonprop-blend-mode :alt 3] 100)
            (gen/return "overlay")]
          [(get weights [:nonprop-blend-mode :alt 4] 100)
            (gen/return "darken")]
          [(get weights [:nonprop-blend-mode :alt 5] 100)
            (gen/return "lighten")]
          [(get weights [:nonprop-blend-mode :alt 6] 100)
            (gen/return "color-dodge")]
          [(get weights [:nonprop-blend-mode :alt 7] 100)
            (gen/return "color-burn")]
          [(get weights [:nonprop-blend-mode :alt 8] 100)
            (gen/return "hard-light")]
          [(get weights [:nonprop-blend-mode :alt 9] 100)
            (gen/return "soft-light")]
          [(get weights [:nonprop-blend-mode :alt 10] 100)
            (gen/return "difference")]
          [(get weights [:nonprop-blend-mode :alt 11] 100)
            (gen/return "exclusion")]
          [(get weights [:nonprop-blend-mode :alt 12] 100)
            (gen/return "hue")]
          [(get weights [:nonprop-blend-mode :alt 13] 100)
            (gen/return "saturation")]
          [(get weights [:nonprop-blend-mode :alt 14] 100)
            (gen/return "color")]
          [(get weights [:nonprop-blend-mode :alt 15] 100)
            (gen/return "luminosity")]])
        gmap (assoc gmap :nonprop-blend-mode gen-nonprop-blend-mode)

        gen-prop-background-blend-mode
        (igen/freq [
          [(get weights [:prop-background-blend-mode :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-blend-mode :alt 1] 100)
            (gen/tuple
              (:nonprop-blend-mode gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-blend-mode gmap))))]])
        gmap (assoc gmap :prop-background-blend-mode gen-prop-background-blend-mode)

        gen-prop-border-start-end-radius
        (igen/freq [
          [(get weights [:prop-border-start-end-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-start-end-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-start-end-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-start-end-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-start-end-radius gen-prop-border-start-end-radius)

        gen-prop-border-start-start-radius
        (igen/freq [
          [(get weights [:prop-border-start-start-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-start-start-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-start-start-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-start-start-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-start-start-radius gen-prop-border-start-start-radius)

        gen-prop-border-top-width
        (igen/freq [
          [(get weights [:prop-border-top-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top-width :alt 1] 100)
            (:nonprop-line-width gmap)]])
        gmap (assoc gmap :prop-border-top-width gen-prop-border-top-width)

        gen-nonprop-border-top-width
        (:prop-border-top-width gmap)
        gmap (assoc gmap :nonprop-border-top-width gen-nonprop-border-top-width)

        gen-prop-border-inline-end-width
        (igen/freq [
          [(get weights [:prop-border-inline-end-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-end-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-inline-end-width gen-prop-border-inline-end-width)

        gen-nonprop-custom-property-name
        (gen/return "STUB_custom_property")
        gmap (assoc gmap :nonprop-custom-property-name gen-nonprop-custom-property-name)

        gen-nonprop-declaration-value
        (gen/return "STUB_declaration_value")
        gmap (assoc gmap :nonprop-declaration-value gen-nonprop-declaration-value)

        gen-func-var
        (gen/tuple
          (gen/return "var")
          (gen/return "(")
          (:nonprop-custom-property-name gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (:nonprop-declaration-value gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-var gen-func-var)

        gen-nonprop-negative-symbol
        (gen/return "STUB_negative_symbol")
        gmap (assoc gmap :nonprop-negative-symbol gen-nonprop-negative-symbol)

        gen-prop-border-image-source
        (igen/freq [
          [(get weights [:prop-border-image-source :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image-source :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-border-image-source :alt 2] 100)
            (:nonprop-image gmap)]])
        gmap (assoc gmap :prop-border-image-source gen-prop-border-image-source)

        gen-prop-font-language-override
        (igen/freq [
          [(get weights [:prop-font-language-override :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-language-override :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-language-override :alt 2] 100)
            (:nonprop-string gmap)]])
        gmap (assoc gmap :prop-font-language-override gen-prop-font-language-override)

        gen-nonprop-align-items
        (:prop-align-items gmap)
        gmap (assoc gmap :nonprop-align-items gen-nonprop-align-items)

        gen-prop-justify-items
        (igen/freq [
          [(get weights [:prop-justify-items :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-justify-items :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-justify-items :alt 2] 100)
            (gen/return "stretch")]
          [(get weights [:prop-justify-items :alt 3] 100)
            (:nonprop-baseline-position gmap)]
          [(get weights [:prop-justify-items :alt 4] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (igen/freq [
                [(get weights [:prop-justify-items :alt 4 :cat 1 :alt 0] 100)
                  (:nonprop-self-position gmap)]
                [(get weights [:prop-justify-items :alt 4 :cat 1 :alt 1] 100)
                  (gen/return "left")]
                [(get weights [:prop-justify-items :alt 4 :cat 1 :alt 2] 100)
                  (gen/return "right")]]))]
          [(get weights [:prop-justify-items :alt 5] 100)
            (gen/return "legacy")]
          [(get weights [:prop-justify-items :alt 6] 100)
            (gen/tuple
              (gen/return "legacy")
              (igen/freq [
                [(get weights [:prop-justify-items :alt 6 :cat 1 :alt 0] 100)
                  (gen/return "left")]
                [(get weights [:prop-justify-items :alt 6 :cat 1 :alt 1] 100)
                  (gen/return "right")]
                [(get weights [:prop-justify-items :alt 6 :cat 1 :alt 2] 100)
                  (gen/return "center")]]))]])
        gmap (assoc gmap :prop-justify-items gen-prop-justify-items)

        gen-nonprop-justify-items
        (:prop-justify-items gmap)
        gmap (assoc gmap :nonprop-justify-items gen-nonprop-justify-items)

        gen-prop-place-items
        (igen/freq [
          [(get weights [:prop-place-items :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-place-items :alt 1] 100)
            (gen/tuple
              (:nonprop-align-items gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-justify-items gmap)]))]])
        gmap (assoc gmap :prop-place-items gen-prop-place-items)

        gen-prop-word-spacing
        (igen/freq [
          [(get weights [:prop-word-spacing :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-word-spacing :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-word-spacing :alt 2] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :prop-word-spacing gen-prop-word-spacing)

        gen-prop-opacity
        (igen/freq [
          [(get weights [:prop-opacity :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-opacity :alt 1] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :prop-opacity gen-prop-opacity)

        gen-nonprop-attachment
        (igen/freq [
          [(get weights [:nonprop-attachment :alt 0] 100)
            (gen/return "scroll")]
          [(get weights [:nonprop-attachment :alt 1] 100)
            (gen/return "fixed")]
          [(get weights [:nonprop-attachment :alt 2] 100)
            (gen/return "local")]])
        gmap (assoc gmap :nonprop-attachment gen-nonprop-attachment)

        gen-nonprop-single-animation-fill-mode
        (igen/freq [
          [(get weights [:nonprop-single-animation-fill-mode :alt 0] 100)
            (gen/return "none")]
          [(get weights [:nonprop-single-animation-fill-mode :alt 1] 100)
            (gen/return "forwards")]
          [(get weights [:nonprop-single-animation-fill-mode :alt 2] 100)
            (gen/return "backwards")]
          [(get weights [:nonprop-single-animation-fill-mode :alt 3] 100)
            (gen/return "both")]])
        gmap (assoc gmap :nonprop-single-animation-fill-mode gen-nonprop-single-animation-fill-mode)

        gen-prop-width
        (igen/freq [
          [(get weights [:prop-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-width :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-width :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-length gmap)]
                [(get weights [:prop-width :alt 1 :cat 0 :alt 1] 100)
                  (:nonprop-percentage gmap)]])
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:prop-width :alt 1 :cat 1 :opt :alt 0] 100)
                    (gen/return "border-box")]
                  [(get weights [:prop-width :alt 1 :cat 1 :opt :alt 1] 100)
                    (gen/return "content-box")]])]))]
          [(get weights [:prop-width :alt 2] 100)
            (gen/return "available")]
          [(get weights [:prop-width :alt 3] 100)
            (gen/return "min-content")]
          [(get weights [:prop-width :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-width :alt 5] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-width :alt 6] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-width gen-prop-width)

        gen-nonprop-width
        (:prop-width gmap)
        gmap (assoc gmap :nonprop-width gen-nonprop-width)

        gen-prop-inline-size
        (igen/freq [
          [(get weights [:prop-inline-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inline-size :alt 1] 100)
            (:nonprop-width gmap)]])
        gmap (assoc gmap :prop-inline-size gen-prop-inline-size)

        gen-prop-grid-template-rows
        (igen/freq [
          [(get weights [:prop-grid-template-rows :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-template-rows :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-grid-template-rows :alt 2] 100)
            (:nonprop-track-list gmap)]
          [(get weights [:prop-grid-template-rows :alt 3] 100)
            (:nonprop-auto-track-list gmap)]])
        gmap (assoc gmap :prop-grid-template-rows gen-prop-grid-template-rows)

        gen-nonprop-grid-template-rows
        (:prop-grid-template-rows gmap)
        gmap (assoc gmap :nonprop-grid-template-rows gen-nonprop-grid-template-rows)

        gen-nonprop-explicit-track-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (:nonprop-track-size gmap))))
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)]))
        gmap (assoc gmap :nonprop-explicit-track-list gen-nonprop-explicit-track-list)

        gen-prop-grid-template
        (igen/freq [
          [(get weights [:prop-grid-template :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-template :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-grid-template :alt 2] 100)
            (gen/tuple
              (:nonprop-grid-template-rows gmap)
              (gen/return "/")
              (:nonprop-grid-template-columns gmap))]
          [(get weights [:prop-grid-template :alt 3] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-line-names gmap)])
                  (:nonprop-string gmap)
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-track-size gmap)])
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-line-names gmap)]))))
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-explicit-track-list gmap))]))]])
        gmap (assoc gmap :prop-grid-template gen-prop-grid-template)

        gen-prop-outline-color
        (igen/freq [
          [(get weights [:prop-outline-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-outline-color :alt 1] 100)
            (:nonprop-color gmap)]
          [(get weights [:prop-outline-color :alt 2] 100)
            (gen/return "invert")]])
        gmap (assoc gmap :prop-outline-color gen-prop-outline-color)

        gen-nonprop-outline-color
        (:prop-outline-color gmap)
        gmap (assoc gmap :nonprop-outline-color gen-nonprop-outline-color)

        gen-prop-border-left-style
        (igen/freq [
          [(get weights [:prop-border-left-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-left-style :alt 1] 100)
            (:nonprop-line-style gmap)]])
        gmap (assoc gmap :prop-border-left-style gen-prop-border-left-style)

        gen-prop-widows
        (igen/freq [
          [(get weights [:prop-widows :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-widows :alt 1] 100)
            (:nonprop-integer gmap)]])
        gmap (assoc gmap :prop-widows gen-prop-widows)

        gen-prop-break-inside
        (igen/freq [
          [(get weights [:prop-break-inside :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-break-inside :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-break-inside :alt 2] 100)
            (gen/return "avoid")]
          [(get weights [:prop-break-inside :alt 3] 100)
            (gen/return "avoid-page")]
          [(get weights [:prop-break-inside :alt 4] 100)
            (gen/return "avoid-column")]
          [(get weights [:prop-break-inside :alt 5] 100)
            (gen/return "avoid-region")]])
        gmap (assoc gmap :prop-break-inside gen-prop-break-inside)

        gen-nonprop-content-position
        (igen/freq [
          [(get weights [:nonprop-content-position :alt 0] 100)
            (gen/return "center")]
          [(get weights [:nonprop-content-position :alt 1] 100)
            (gen/return "start")]
          [(get weights [:nonprop-content-position :alt 2] 100)
            (gen/return "end")]
          [(get weights [:nonprop-content-position :alt 3] 100)
            (gen/return "flex-start")]
          [(get weights [:nonprop-content-position :alt 4] 100)
            (gen/return "flex-end")]])
        gmap (assoc gmap :nonprop-content-position gen-nonprop-content-position)

        gen-nonprop-content-distribution
        (igen/freq [
          [(get weights [:nonprop-content-distribution :alt 0] 100)
            (gen/return "space-between")]
          [(get weights [:nonprop-content-distribution :alt 1] 100)
            (gen/return "space-around")]
          [(get weights [:nonprop-content-distribution :alt 2] 100)
            (gen/return "space-evenly")]
          [(get weights [:nonprop-content-distribution :alt 3] 100)
            (gen/return "stretch")]])
        gmap (assoc gmap :nonprop-content-distribution gen-nonprop-content-distribution)

        gen-prop-align-content
        (igen/freq [
          [(get weights [:prop-align-content :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-align-content :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-align-content :alt 2] 100)
            (:nonprop-baseline-position gmap)]
          [(get weights [:prop-align-content :alt 3] 100)
            (:nonprop-content-distribution gmap)]
          [(get weights [:prop-align-content :alt 4] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (:nonprop-content-position gmap))]])
        gmap (assoc gmap :prop-align-content gen-prop-align-content)

        gen-nonprop-align-content
        (:prop-align-content gmap)
        gmap (assoc gmap :nonprop-align-content gen-nonprop-align-content)

        gen-prop-justify-content
        (igen/freq [
          [(get weights [:prop-justify-content :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-justify-content :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-justify-content :alt 2] 100)
            (:nonprop-content-distribution gmap)]
          [(get weights [:prop-justify-content :alt 3] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (igen/freq [
                [(get weights [:prop-justify-content :alt 3 :cat 1 :alt 0] 100)
                  (:nonprop-content-position gmap)]
                [(get weights [:prop-justify-content :alt 3 :cat 1 :alt 1] 100)
                  (gen/return "left")]
                [(get weights [:prop-justify-content :alt 3 :cat 1 :alt 2] 100)
                  (gen/return "right")]]))]])
        gmap (assoc gmap :prop-justify-content gen-prop-justify-content)

        gen-nonprop-justify-content
        (:prop-justify-content gmap)
        gmap (assoc gmap :nonprop-justify-content gen-nonprop-justify-content)

        gen-prop-place-content
        (igen/freq [
          [(get weights [:prop-place-content :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-place-content :alt 1] 100)
            (gen/tuple
              (:nonprop-align-content gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-justify-content gmap)]))]])
        gmap (assoc gmap :prop-place-content gen-prop-place-content)

        gen-nonprop-keyframes-name
        (igen/freq [
          [(get weights [:nonprop-keyframes-name :alt 0] 100)
            (:nonprop-custom-ident gmap)]
          [(get weights [:nonprop-keyframes-name :alt 1] 100)
            (:nonprop-string gmap)]])
        gmap (assoc gmap :nonprop-keyframes-name gen-nonprop-keyframes-name)]
    gmap))

(defn- css3-generators-part-5 [gmap weights]
  (let [
        gen-prop-animation-name
        (igen/freq [
          [(get weights [:prop-animation-name :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-name :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-animation-name :alt 1 :cat 0 :alt 0] 100)
                  (gen/return "none")]
                [(get weights [:prop-animation-name :alt 1 :cat 0 :alt 1] 100)
                  (:nonprop-keyframes-name gmap)]])
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (igen/freq [
                    [(get weights [:prop-animation-name :alt 1 :cat 1 :star :cat 1 :alt 0] 100)
                      (gen/return "none")]
                    [(get weights [:prop-animation-name :alt 1 :cat 1 :star :cat 1 :alt 1] 100)
                      (:nonprop-keyframes-name gmap)]]))))]])
        gmap (assoc gmap :prop-animation-name gen-prop-animation-name)

        gen-prop-flex-grow
        (igen/freq [
          [(get weights [:prop-flex-grow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-grow :alt 1] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :prop-flex-grow gen-prop-flex-grow)

        gen-prop-padding-block-end
        (igen/freq [
          [(get weights [:prop-padding-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-block-end :alt 1] 100)
            (:nonprop-padding-left gmap)]])
        gmap (assoc gmap :prop-padding-block-end gen-prop-padding-block-end)

        gen-func-target-counters
        (gen/tuple
          (gen/return "target-counters")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-target-counters :cat 2 :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:func-target-counters :cat 2 :alt 1] 100)
              (:nonprop-url gmap)]])
          (gen/return ",")
          (:nonprop-custom-ident gmap)
          (gen/return ",")
          (:nonprop-string gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (:nonprop-counter-style gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-target-counters gen-func-target-counters)

        gen-func-target-text
        (gen/tuple
          (gen/return "target-text")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-target-text :cat 2 :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:func-target-text :cat 2 :alt 1] 100)
              (:nonprop-url gmap)]])
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:func-target-text :cat 4 :opt :alt 0] 100)
                (gen/return "content")]
              [(get weights [:func-target-text :cat 4 :opt :alt 1] 100)
                (gen/return "before")]
              [(get weights [:func-target-text :cat 4 :opt :alt 2] 100)
                (gen/return "after")]
              [(get weights [:func-target-text :cat 4 :opt :alt 3] 100)
                (gen/return "first-letter")]])])
          (gen/return ")"))
        gmap (assoc gmap :func-target-text gen-func-target-text)

        gen-func-target-counter
        (gen/tuple
          (gen/return "target-counter")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-target-counter :cat 2 :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:func-target-counter :cat 2 :alt 1] 100)
              (:nonprop-url gmap)]])
          (gen/return ",")
          (:nonprop-custom-ident gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (:nonprop-counter-style gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-target-counter gen-func-target-counter)

        gen-nonprop-target
        (igen/freq [
          [(get weights [:nonprop-target :alt 0] 100)
            (:func-target-counter gmap)]
          [(get weights [:nonprop-target :alt 1] 100)
            (:func-target-counters gmap)]
          [(get weights [:nonprop-target :alt 2] 100)
            (:func-target-text gmap)]])
        gmap (assoc gmap :nonprop-target gen-nonprop-target)

        gen-func-rotateY
        (gen/tuple
          (gen/return "rotateY")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-rotateY gen-func-rotateY)

        gen-prop-mask-clip
        (igen/freq [
          [(get weights [:prop-mask-clip :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-clip :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-mask-clip :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-geometry-box gmap)]
                [(get weights [:prop-mask-clip :alt 1 :cat 0 :alt 1] 100)
                  (gen/return "no-clip")]])
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (igen/freq [
                    [(get weights [:prop-mask-clip :alt 1 :cat 1 :star :cat 1 :alt 0] 100)
                      (:nonprop-geometry-box gmap)]
                    [(get weights [:prop-mask-clip :alt 1 :cat 1 :star :cat 1 :alt 1] 100)
                      (gen/return "no-clip")]]))))]])
        gmap (assoc gmap :prop-mask-clip gen-prop-mask-clip)

        gen-nonprop-mask-clip
        (:prop-mask-clip gmap)
        gmap (assoc gmap :nonprop-mask-clip gen-nonprop-mask-clip)

        gen-prop-flex-wrap
        (igen/freq [
          [(get weights [:prop-flex-wrap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-wrap :alt 1] 100)
            (gen/return "nowrap")]
          [(get weights [:prop-flex-wrap :alt 2] 100)
            (gen/return "wrap")]
          [(get weights [:prop-flex-wrap :alt 3] 100)
            (gen/return "wrap-reverse")]])
        gmap (assoc gmap :prop-flex-wrap gen-prop-flex-wrap)

        gen-nonprop-flex-wrap
        (:prop-flex-wrap gmap)
        gmap (assoc gmap :nonprop-flex-wrap gen-nonprop-flex-wrap)

        gen-prop-outline-width
        (igen/freq [
          [(get weights [:prop-outline-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-outline-width :alt 1] 100)
            (:nonprop-line-width gmap)]])
        gmap (assoc gmap :prop-outline-width gen-prop-outline-width)

        gen-prop-grid-auto-columns
        (igen/freq [
          [(get weights [:prop-grid-auto-columns :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-auto-columns :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (:nonprop-track-size gmap)))]])
        gmap (assoc gmap :prop-grid-auto-columns gen-prop-grid-auto-columns)

        gen-nonprop-grid-template
        (:prop-grid-template gmap)
        gmap (assoc gmap :nonprop-grid-template gen-nonprop-grid-template)

        gen-nonprop-grid-auto-columns
        (:prop-grid-auto-columns gmap)
        gmap (assoc gmap :nonprop-grid-auto-columns gen-nonprop-grid-auto-columns)

        gen-prop-grid
        (igen/freq [
          [(get weights [:prop-grid :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid :alt 1] 100)
            (:nonprop-grid-template gmap)]
          [(get weights [:prop-grid :alt 2] 100)
            (gen/tuple
              (:nonprop-grid-template-rows gmap)
              (gen/return "/")
              (gen/tuple
                (gen/return "auto-flow")
                (gen/one-of [
                  (gen/return "")
                  (gen/return "dense")]))
              (gen/one-of [
                (gen/return "")
                (:nonprop-grid-auto-columns gmap)]))]
          [(get weights [:prop-grid :alt 3] 100)
            (gen/tuple
              (gen/tuple
                (gen/return "auto-flow")
                (gen/one-of [
                  (gen/return "")
                  (gen/return "dense")]))
              (gen/one-of [
                (gen/return "")
                (:nonprop-grid-auto-rows gmap)])
              (gen/return "/")
              (:nonprop-grid-template-columns gmap))]])
        gmap (assoc gmap :prop-grid gen-prop-grid)

        gen-prop-padding-inline-end
        (igen/freq [
          [(get weights [:prop-padding-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-inline-end :alt 1] 100)
            (:nonprop-padding-left gmap)]])
        gmap (assoc gmap :prop-padding-inline-end gen-prop-padding-inline-end)

        gen-prop-counter-reset
        (igen/freq [
          [(get weights [:prop-counter-reset :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-counter-reset :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (gen/tuple
                (:nonprop-custom-ident gmap)
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-integer gmap)]))))]
          [(get weights [:prop-counter-reset :alt 2] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-counter-reset gen-prop-counter-reset)

        gen-prop-border-end-end-radius
        (igen/freq [
          [(get weights [:prop-border-end-end-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-end-end-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-end-end-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-end-end-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-end-end-radius gen-prop-border-end-end-radius)

        gen-prop-text-align-last
        (igen/freq [
          [(get weights [:prop-text-align-last :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-align-last :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-text-align-last :alt 2] 100)
            (gen/return "start")]
          [(get weights [:prop-text-align-last :alt 3] 100)
            (gen/return "end")]
          [(get weights [:prop-text-align-last :alt 4] 100)
            (gen/return "left")]
          [(get weights [:prop-text-align-last :alt 5] 100)
            (gen/return "right")]
          [(get weights [:prop-text-align-last :alt 6] 100)
            (gen/return "center")]
          [(get weights [:prop-text-align-last :alt 7] 100)
            (gen/return "justify")]])
        gmap (assoc gmap :prop-text-align-last gen-prop-text-align-last)

        gen-prop-border-inline-width
        (igen/freq [
          [(get weights [:prop-border-inline-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-inline-width gen-prop-border-inline-width)

        gen-nonprop-display-inside
        (igen/freq [
          [(get weights [:nonprop-display-inside :alt 0] 100)
            (gen/return "flow")]
          [(get weights [:nonprop-display-inside :alt 1] 100)
            (gen/return "flow-root")]
          [(get weights [:nonprop-display-inside :alt 2] 100)
            (gen/return "table")]
          [(get weights [:nonprop-display-inside :alt 3] 100)
            (gen/return "flex")]
          [(get weights [:nonprop-display-inside :alt 4] 100)
            (gen/return "grid")]
          [(get weights [:nonprop-display-inside :alt 5] 100)
            (gen/return "ruby")]])
        gmap (assoc gmap :nonprop-display-inside gen-nonprop-display-inside)

        gen-prop-color-adjust
        (igen/freq [
          [(get weights [:prop-color-adjust :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-color-adjust :alt 1] 100)
            (gen/return "economy")]
          [(get weights [:prop-color-adjust :alt 2] 100)
            (gen/return "exact")]])
        gmap (assoc gmap :prop-color-adjust gen-prop-color-adjust)

        gen-nonprop-mask-attachment
        (gen/return "STUB_mask_attachment")
        gmap (assoc gmap :nonprop-mask-attachment gen-nonprop-mask-attachment)

        gen-prop-inset-inline-start
        (igen/freq [
          [(get weights [:prop-inset-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-inline-start :alt 1] 100)
            (:nonprop-top gmap)]])
        gmap (assoc gmap :prop-inset-inline-start gen-prop-inset-inline-start)

        gen-nonprop-attr-fallback
        (gen/return "STUB_attr_fallback")
        gmap (assoc gmap :nonprop-attr-fallback gen-nonprop-attr-fallback)

        gen-nonprop-attr-name
        (gen/return "STUB_attr_name")
        gmap (assoc gmap :nonprop-attr-name gen-nonprop-attr-name)

        gen-nonprop-type-or-unit
        (igen/freq [
          [(get weights [:nonprop-type-or-unit :alt 0] 100)
            (gen/return "string")]
          [(get weights [:nonprop-type-or-unit :alt 1] 100)
            (gen/return "integer")]
          [(get weights [:nonprop-type-or-unit :alt 2] 100)
            (gen/return "color")]
          [(get weights [:nonprop-type-or-unit :alt 3] 100)
            (gen/return "url")]
          [(get weights [:nonprop-type-or-unit :alt 4] 100)
            (gen/return "integer")]
          [(get weights [:nonprop-type-or-unit :alt 5] 100)
            (gen/return "number")]
          [(get weights [:nonprop-type-or-unit :alt 6] 100)
            (gen/return "length")]
          [(get weights [:nonprop-type-or-unit :alt 7] 100)
            (gen/return "angle")]
          [(get weights [:nonprop-type-or-unit :alt 8] 100)
            (gen/return "time")]
          [(get weights [:nonprop-type-or-unit :alt 9] 100)
            (gen/return "frequency")]
          [(get weights [:nonprop-type-or-unit :alt 10] 100)
            (gen/return "em")]
          [(get weights [:nonprop-type-or-unit :alt 11] 100)
            (gen/return "ex")]
          [(get weights [:nonprop-type-or-unit :alt 12] 100)
            (gen/return "px")]
          [(get weights [:nonprop-type-or-unit :alt 13] 100)
            (gen/return "rem")]
          [(get weights [:nonprop-type-or-unit :alt 14] 100)
            (gen/return "vw")]
          [(get weights [:nonprop-type-or-unit :alt 15] 100)
            (gen/return "vh")]
          [(get weights [:nonprop-type-or-unit :alt 16] 100)
            (gen/return "vmin")]
          [(get weights [:nonprop-type-or-unit :alt 17] 100)
            (gen/return "vmax")]
          [(get weights [:nonprop-type-or-unit :alt 18] 100)
            (gen/return "mm")]
          [(get weights [:nonprop-type-or-unit :alt 19] 100)
            (gen/return "q")]
          [(get weights [:nonprop-type-or-unit :alt 20] 100)
            (gen/return "cm")]
          [(get weights [:nonprop-type-or-unit :alt 21] 100)
            (gen/return "in")]
          [(get weights [:nonprop-type-or-unit :alt 22] 100)
            (gen/return "pt")]
          [(get weights [:nonprop-type-or-unit :alt 23] 100)
            (gen/return "pc")]
          [(get weights [:nonprop-type-or-unit :alt 24] 100)
            (gen/return "deg")]
          [(get weights [:nonprop-type-or-unit :alt 25] 100)
            (gen/return "grad")]
          [(get weights [:nonprop-type-or-unit :alt 26] 100)
            (gen/return "rad")]
          [(get weights [:nonprop-type-or-unit :alt 27] 100)
            (gen/return "ms")]
          [(get weights [:nonprop-type-or-unit :alt 28] 100)
            (gen/return "s")]
          [(get weights [:nonprop-type-or-unit :alt 29] 100)
            (gen/return "Hz")]
          [(get weights [:nonprop-type-or-unit :alt 30] 100)
            (gen/return "kHz")]
          [(get weights [:nonprop-type-or-unit :alt 31] 100)
            (gen/return "%")]])
        gmap (assoc gmap :nonprop-type-or-unit gen-nonprop-type-or-unit)

        gen-func-attr
        (gen/tuple
          (gen/return "attr")
          (gen/return "(")
          (:nonprop-attr-name gmap)
          (gen/one-of [
            (gen/return "")
            (:nonprop-type-or-unit gmap)])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (:nonprop-attr-fallback gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-attr gen-func-attr)

        gen-nonprop-number-percentage
        (igen/freq [
          [(get weights [:nonprop-number-percentage :alt 0] 100)
            (:nonprop-number gmap)]
          [(get weights [:nonprop-number-percentage :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-number-percentage gen-nonprop-number-percentage)

        gen-func-contrast
        (gen/tuple
          (gen/return "contrast")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-contrast gen-func-contrast)

        gen-prop-animation-duration
        (igen/freq [
          [(get weights [:prop-animation-duration :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-duration :alt 1] 100)
            (gen/tuple
              (:nonprop-time gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-time gmap))))]])
        gmap (assoc gmap :prop-animation-duration gen-prop-animation-duration)

        gen-prop-border-block
        (igen/freq [
          [(get weights [:prop-border-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-block :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-block :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-block :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-block gen-prop-border-block)

        gen-nonprop-ident-token
        (gen/return "STUB_ident_token")
        gmap (assoc gmap :nonprop-ident-token gen-nonprop-ident-token)

        gen-nonprop-ns-prefix
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-ns-prefix :cat 0 :opt :alt 0] 100)
                (:nonprop-ident-token gmap)]
              [(get weights [:nonprop-ns-prefix :cat 0 :opt :alt 1] 100)
                (gen/return "*")]])])
          (gen/return "|"))
        gmap (assoc gmap :nonprop-ns-prefix gen-nonprop-ns-prefix)

        gen-nonprop-wq-name
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-ns-prefix gmap)])
          (:nonprop-ident-token gmap))
        gmap (assoc gmap :nonprop-wq-name gen-nonprop-wq-name)

        gen-nonprop-type-selector
        (igen/freq [
          [(get weights [:nonprop-type-selector :alt 0] 100)
            (:nonprop-wq-name gmap)]
          [(get weights [:nonprop-type-selector :alt 1] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-ns-prefix gmap)])
              (gen/return "*"))]])
        gmap (assoc gmap :nonprop-type-selector gen-nonprop-type-selector)

        gen-nonprop-function-token
        (gen/return "STUB_flex_function_token")
        gmap (assoc gmap :nonprop-function-token gen-nonprop-function-token)

        gen-nonprop-pseudo-class-selector
        (igen/freq [
          [(get weights [:nonprop-pseudo-class-selector :alt 0] 100)
            (gen/tuple
              (gen/return ":")
              (:nonprop-ident-token gmap))]
          [(get weights [:nonprop-pseudo-class-selector :alt 1] 100)
            (gen/tuple
              (gen/return ":")
              (:nonprop-function-token gmap)
              (:nonprop-any-value gmap)
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-pseudo-class-selector gen-nonprop-pseudo-class-selector)

        gen-nonprop-pseudo-element-selector
        (gen/tuple
          (gen/return ":")
          (:nonprop-pseudo-class-selector gmap))
        gmap (assoc gmap :nonprop-pseudo-element-selector gen-nonprop-pseudo-element-selector)

        gen-nonprop-string-token
        (gen/return "STUB_string_token")
        gmap (assoc gmap :nonprop-string-token gen-nonprop-string-token)

        gen-nonprop-class-selector
        (gen/tuple
          (gen/return ".")
          (:nonprop-ident-token gmap))
        gmap (assoc gmap :nonprop-class-selector gen-nonprop-class-selector)

        gen-nonprop-attr-matcher
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-attr-matcher :cat 0 :opt :alt 0] 100)
                (gen/return "~")]
              [(get weights [:nonprop-attr-matcher :cat 0 :opt :alt 1] 100)
                (gen/return "|")]
              [(get weights [:nonprop-attr-matcher :cat 0 :opt :alt 2] 100)
                (gen/return "^")]
              [(get weights [:nonprop-attr-matcher :cat 0 :opt :alt 3] 100)
                (gen/return "$")]
              [(get weights [:nonprop-attr-matcher :cat 0 :opt :alt 4] 100)
                (gen/return "*")]])])
          (gen/return "="))
        gmap (assoc gmap :nonprop-attr-matcher gen-nonprop-attr-matcher)

        gen-nonprop-attr-modifier
        (igen/freq [
          [(get weights [:nonprop-attr-modifier :alt 0] 100)
            (gen/return "i")]
          [(get weights [:nonprop-attr-modifier :alt 1] 100)
            (gen/return "s")]])
        gmap (assoc gmap :nonprop-attr-modifier gen-nonprop-attr-modifier)

        gen-nonprop-attribute-selector
        (igen/freq [
          [(get weights [:nonprop-attribute-selector :alt 0] 100)
            (gen/tuple
              (gen/return "[")
              (:nonprop-wq-name gmap)
              (gen/return "]"))]
          [(get weights [:nonprop-attribute-selector :alt 1] 100)
            (gen/tuple
              (gen/return "[")
              (:nonprop-wq-name gmap)
              (:nonprop-attr-matcher gmap)
              (igen/freq [
                [(get weights [:nonprop-attribute-selector :alt 1 :cat 3 :alt 0] 100)
                  (:nonprop-string-token gmap)]
                [(get weights [:nonprop-attribute-selector :alt 1 :cat 3 :alt 1] 100)
                  (:nonprop-ident-token gmap)]])
              (gen/one-of [
                (gen/return "")
                (:nonprop-attr-modifier gmap)])
              (gen/return "]"))]])
        gmap (assoc gmap :nonprop-attribute-selector gen-nonprop-attribute-selector)

        gen-nonprop-subclass-selector
        (igen/freq [
          [(get weights [:nonprop-subclass-selector :alt 0] 100)
            (:nonprop-id-selector gmap)]
          [(get weights [:nonprop-subclass-selector :alt 1] 100)
            (:nonprop-class-selector gmap)]
          [(get weights [:nonprop-subclass-selector :alt 2] 100)
            (:nonprop-attribute-selector gmap)]
          [(get weights [:nonprop-subclass-selector :alt 3] 100)
            (:nonprop-pseudo-class-selector gmap)]])
        gmap (assoc gmap :nonprop-subclass-selector gen-nonprop-subclass-selector)

        gen-nonprop-compound-selector
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-type-selector gmap)])
          (gen/vector
            (:nonprop-subclass-selector gmap))
          (gen/vector
            (gen/tuple
              (:nonprop-pseudo-element-selector gmap)
              (gen/vector
                (:nonprop-pseudo-class-selector gmap)))))
        gmap (assoc gmap :nonprop-compound-selector gen-nonprop-compound-selector)

        gen-nonprop-complex-selector
        (gen/tuple
          (:nonprop-compound-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-combinator gmap)])
              (:nonprop-compound-selector gmap))))
        gmap (assoc gmap :nonprop-complex-selector gen-nonprop-complex-selector)

        gen-nonprop-relative-selector
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-combinator gmap)])
          (:nonprop-complex-selector gmap))
        gmap (assoc gmap :nonprop-relative-selector gen-nonprop-relative-selector)]
    gmap))

(defn- css3-generators-part-6 [gmap weights]
  (let [
        gen-nonprop-relative-selector-list
        (gen/tuple
          (:nonprop-relative-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-relative-selector gmap))))
        gmap (assoc gmap :nonprop-relative-selector-list gen-nonprop-relative-selector-list)

        gen-prop-scroll-margin-inline
        (igen/freq [
          [(get weights [:prop-scroll-margin-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-inline :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]])]
              [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin-inline :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-margin-inline gen-prop-scroll-margin-inline)

        gen-prop-flex-basis
        (igen/freq [
          [(get weights [:prop-flex-basis :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-basis :alt 1] 100)
            (gen/return "content")]
          [(get weights [:prop-flex-basis :alt 2] 100)
            (:nonprop-width gmap)]])
        gmap (assoc gmap :prop-flex-basis gen-prop-flex-basis)

        gen-nonprop-flex-basis
        (:prop-flex-basis gmap)
        gmap (assoc gmap :nonprop-flex-basis gen-nonprop-flex-basis)

        gen-prop-border-inline-style
        (igen/freq [
          [(get weights [:prop-border-inline-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-inline-style gen-prop-border-inline-style)

        gen-prop-border-block-start
        (igen/freq [
          [(get weights [:prop-border-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-start :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-block-start :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-block-start :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-block-start :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-block-start gen-prop-border-block-start)

        gen-nonprop-shadow-t
        (gen/tuple
          (igen/freq [
            [(get weights [:nonprop-shadow-t :cat 0 :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]
            [(get weights [:nonprop-shadow-t :cat 0 :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]])
          (gen/one-of [
            (gen/return "")
            (:nonprop-color gmap)]))
        gmap (assoc gmap :nonprop-shadow-t gen-nonprop-shadow-t)

        gen-prop-text-shadow
        (igen/freq [
          [(get weights [:prop-text-shadow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-shadow :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-text-shadow :alt 2] 100)
            (gen/tuple
              (:nonprop-shadow-t gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-shadow-t gmap))))]])
        gmap (assoc gmap :prop-text-shadow gen-prop-text-shadow)

        gen-nonprop-feature-value-name
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-feature-value-name gen-nonprop-feature-value-name)

        gen-prop-border-left-color
        (igen/freq [
          [(get weights [:prop-border-left-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-left-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-border-left-color gen-prop-border-left-color)

        gen-prop-column-gap
        (igen/freq [
          [(get weights [:prop-column-gap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-gap :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-column-gap :alt 2] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :prop-column-gap gen-prop-column-gap)

        gen-nonprop-column-gap
        (:prop-column-gap gmap)
        gmap (assoc gmap :nonprop-column-gap gen-nonprop-column-gap)

        gen-prop-row-gap
        (igen/freq [
          [(get weights [:prop-row-gap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-row-gap :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-row-gap :alt 2] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :prop-row-gap gen-prop-row-gap)

        gen-nonprop-row-gap
        (:prop-row-gap gmap)
        gmap (assoc gmap :nonprop-row-gap gen-nonprop-row-gap)

        gen-prop-gap
        (igen/freq [
          [(get weights [:prop-gap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-gap :alt 1] 100)
            (gen/tuple
              (:nonprop-row-gap gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-column-gap gmap)]))]])
        gmap (assoc gmap :prop-gap gen-prop-gap)

        gen-prop-direction
        (igen/freq [
          [(get weights [:prop-direction :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-direction :alt 1] 100)
            (gen/return "ltr")]
          [(get weights [:prop-direction :alt 2] 100)
            (gen/return "rtl")]])
        gmap (assoc gmap :prop-direction gen-prop-direction)

        gen-prop-min-width
        (igen/freq [
          [(get weights [:prop-min-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-min-width :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-min-width :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-min-width :alt 3] 100)
            (gen/return "auto")]
          [(get weights [:prop-min-width :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-min-width :alt 5] 100)
            (gen/return "min-content")]
          [(get weights [:prop-min-width :alt 6] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-min-width :alt 7] 100)
            (gen/return "fill-available")]])
        gmap (assoc gmap :prop-min-width gen-prop-min-width)

        gen-nonprop-min-width
        (:prop-min-width gmap)
        gmap (assoc gmap :nonprop-min-width gen-nonprop-min-width)

        gen-prop-min-block-size
        (igen/freq [
          [(get weights [:prop-min-block-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-min-block-size :alt 1] 100)
            (:nonprop-min-width gmap)]])
        gmap (assoc gmap :prop-min-block-size gen-prop-min-block-size)

        gen-nonprop-single-transition
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-single-transition :plus :alt 0] 100)
              (igen/freq [
                [(get weights [:nonprop-single-transition :plus :alt 0 :cat 0 :alt 0] 100)
                  (gen/return "none")]
                [(get weights [:nonprop-single-transition :plus :alt 0 :cat 0 :alt 1] 100)
                  (:nonprop-single-transition-property gmap)]])]
            [(get weights [:nonprop-single-transition :plus :alt 1] 100)
              (:nonprop-time gmap)]
            [(get weights [:nonprop-single-transition :plus :alt 2] 100)
              (:nonprop-timing-function gmap)]
            [(get weights [:nonprop-single-transition :plus :alt 3] 100)
              (:nonprop-time gmap)]])))
        gmap (assoc gmap :nonprop-single-transition gen-nonprop-single-transition)

        gen-nonprop-mask-source
        (:nonprop-url gmap)
        gmap (assoc gmap :nonprop-mask-source gen-nonprop-mask-source)

        gen-nonprop-mask-reference
        (igen/freq [
          [(get weights [:nonprop-mask-reference :alt 0] 100)
            (gen/return "none")]
          [(get weights [:nonprop-mask-reference :alt 1] 100)
            (:nonprop-image gmap)]
          [(get weights [:nonprop-mask-reference :alt 2] 100)
            (:nonprop-mask-source gmap)]])
        gmap (assoc gmap :nonprop-mask-reference gen-nonprop-mask-reference)

        gen-prop-border-right-color
        (igen/freq [
          [(get weights [:prop-border-right-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-right-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-border-right-color gen-prop-border-right-color)

        gen-func-translateY
        (gen/tuple
          (gen/return "translateY")
          (gen/return "(")
          (:nonprop-length-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-translateY gen-func-translateY)

        gen-func-scale
        (gen/tuple
          (gen/return "scale")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-scale gen-func-scale)

        gen-func-rotateZ
        (gen/tuple
          (gen/return "rotateZ")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-rotateZ gen-func-rotateZ)

        gen-func-rotate3d
        (gen/tuple
          (gen/return "rotate3d")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/return ",")
          (:nonprop-number gmap)
          (gen/return ",")
          (:nonprop-number gmap)
          (gen/return ",")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-rotate3d gen-func-rotate3d)

        gen-func-skewX
        (gen/tuple
          (gen/return "skewX")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-skewX gen-func-skewX)

        gen-func-matrix3d
        (gen/tuple
          (gen/return "matrix3d")
          (gen/return "(")
          (:nonprop-number gmap)
          (igen/freq [
            [(get weights [:func-matrix3d :cat 3 :alt 0] 100)
              (gen/tuple
                (gen/return ",")
                (:nonprop-number gmap))]
            [(get weights [:func-matrix3d :cat 3 :alt 1] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap)))]
            [(get weights [:func-matrix3d :cat 3 :alt 2] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap)))]
            [(get weights [:func-matrix3d :cat 3 :alt 3] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap)))]
            [(get weights [:func-matrix3d :cat 3 :alt 4] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap))
                (:rS gmap)
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-number gmap)))]])
          (gen/return ")"))
        gmap (assoc gmap :func-matrix3d gen-func-matrix3d)

        gen-func-translate
        (gen/tuple
          (gen/return "translate")
          (gen/return "(")
          (:nonprop-length-percentage gmap)
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (:nonprop-length-percentage gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-translate gen-func-translate)

        gen-func-scaleZ
        (gen/tuple
          (gen/return "scaleZ")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-scaleZ gen-func-scaleZ)

        gen-func-scale3d
        (gen/tuple
          (gen/return "scale3d")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/return ",")
          (:nonprop-number gmap)
          (gen/return ",")
          (:nonprop-number gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-scale3d gen-func-scale3d)

        gen-func-rotateX
        (gen/tuple
          (gen/return "rotateX")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-rotateX gen-func-rotateX)

        gen-func-scaleX
        (gen/tuple
          (gen/return "scaleX")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-scaleX gen-func-scaleX)

        gen-func-matrix
        (gen/tuple
          (gen/return "matrix")
          (gen/return "(")
          (:nonprop-number gmap)
          (gen/tuple
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap))
            (:rS gmap)
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap))
            (:rS gmap)
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap))
            (:rS gmap)
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap))
            (:rS gmap)
            (gen/tuple
              (gen/return ",")
              (:nonprop-number gmap)))
          (gen/return ")"))
        gmap (assoc gmap :func-matrix gen-func-matrix)

        gen-func-perspective
        (gen/tuple
          (gen/return "perspective")
          (gen/return "(")
          (:nonprop-length gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-perspective gen-func-perspective)

        gen-func-translate3d
        (gen/tuple
          (gen/return "translate3d")
          (gen/return "(")
          (:nonprop-length-percentage gmap)
          (gen/return ",")
          (:nonprop-length-percentage gmap)
          (gen/return ",")
          (:nonprop-length gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-translate3d gen-func-translate3d)

        gen-func-translateX
        (gen/tuple
          (gen/return "translateX")
          (gen/return "(")
          (:nonprop-length-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-translateX gen-func-translateX)

        gen-func-translateZ
        (gen/tuple
          (gen/return "translateZ")
          (gen/return "(")
          (:nonprop-length gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-translateZ gen-func-translateZ)

        gen-nonprop-transform-function
        (igen/freq [
          [(get weights [:nonprop-transform-function :alt 0] 100)
            (:func-matrix gmap)]
          [(get weights [:nonprop-transform-function :alt 1] 100)
            (:func-translate gmap)]
          [(get weights [:nonprop-transform-function :alt 2] 100)
            (:func-translateX gmap)]
          [(get weights [:nonprop-transform-function :alt 3] 100)
            (:func-translateY gmap)]
          [(get weights [:nonprop-transform-function :alt 4] 100)
            (:func-scale gmap)]
          [(get weights [:nonprop-transform-function :alt 5] 100)
            (:func-scaleX gmap)]
          [(get weights [:nonprop-transform-function :alt 6] 100)
            (:func-scaleY gmap)]
          [(get weights [:nonprop-transform-function :alt 7] 100)
            (:func-rotate gmap)]
          [(get weights [:nonprop-transform-function :alt 8] 100)
            (:func-skew gmap)]
          [(get weights [:nonprop-transform-function :alt 9] 100)
            (:func-skewX gmap)]
          [(get weights [:nonprop-transform-function :alt 10] 100)
            (:func-skewY gmap)]
          [(get weights [:nonprop-transform-function :alt 11] 100)
            (:func-matrix3d gmap)]
          [(get weights [:nonprop-transform-function :alt 12] 100)
            (:func-translate3d gmap)]
          [(get weights [:nonprop-transform-function :alt 13] 100)
            (:func-translateZ gmap)]
          [(get weights [:nonprop-transform-function :alt 14] 100)
            (:func-scale3d gmap)]
          [(get weights [:nonprop-transform-function :alt 15] 100)
            (:func-scaleZ gmap)]
          [(get weights [:nonprop-transform-function :alt 16] 100)
            (:func-rotate3d gmap)]
          [(get weights [:nonprop-transform-function :alt 17] 100)
            (:func-rotateX gmap)]
          [(get weights [:nonprop-transform-function :alt 18] 100)
            (:func-rotateY gmap)]
          [(get weights [:nonprop-transform-function :alt 19] 100)
            (:func-rotateZ gmap)]
          [(get weights [:nonprop-transform-function :alt 20] 100)
            (:func-perspective gmap)]])
        gmap (assoc gmap :nonprop-transform-function gen-nonprop-transform-function)

        gen-nonprop-transform-list
        (gen/such-that not-empty (gen/vector
          (:nonprop-transform-function gmap)))
        gmap (assoc gmap :nonprop-transform-list gen-nonprop-transform-list)

        gen-prop-transform
        (igen/freq [
          [(get weights [:prop-transform :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transform :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-transform :alt 2] 100)
            (:nonprop-transform-list gmap)]])
        gmap (assoc gmap :prop-transform gen-prop-transform)

        gen-prop-inset-inline
        (igen/freq [
          [(get weights [:prop-inset-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-inline :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-inset-inline :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-top gmap)]
              [(get weights [:prop-inset-inline :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap))]])]])
        gmap (assoc gmap :prop-inset-inline gen-prop-inset-inline)

        gen-prop-border-inline-start
        (igen/freq [
          [(get weights [:prop-border-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-start :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-inline-start :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-inline-start :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-inline-start :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-inline-start gen-prop-border-inline-start)

        gen-prop-border-right-width
        (igen/freq [
          [(get weights [:prop-border-right-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-right-width :alt 1] 100)
            (:nonprop-line-width gmap)]])
        gmap (assoc gmap :prop-border-right-width gen-prop-border-right-width)

        gen-nonprop-east-asian-width-values
        (igen/freq [
          [(get weights [:nonprop-east-asian-width-values :cat 0 :alt 0] 100)
            (gen/return "full-width")]
          [(get weights [:nonprop-east-asian-width-values :cat 0 :alt 1] 100)
            (gen/return "proportional-width")]])
        gmap (assoc gmap :nonprop-east-asian-width-values gen-nonprop-east-asian-width-values)

        gen-func-brightness
        (gen/tuple
          (gen/return "brightness")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-brightness gen-func-brightness)

        gen-nonprop-display-legacy
        (igen/freq [
          [(get weights [:nonprop-display-legacy :alt 0] 100)
            (gen/return "inline-block")]
          [(get weights [:nonprop-display-legacy :alt 1] 100)
            (gen/return "inline-list-item")]
          [(get weights [:nonprop-display-legacy :alt 2] 100)
            (gen/return "inline-table")]
          [(get weights [:nonprop-display-legacy :alt 3] 100)
            (gen/return "inline-flex")]
          [(get weights [:nonprop-display-legacy :alt 4] 100)
            (gen/return "inline-grid")]])
        gmap (assoc gmap :nonprop-display-legacy gen-nonprop-display-legacy)

        gen-nonprop-feature-tag-value
        (gen/tuple
          (:nonprop-string gmap)
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-feature-tag-value :cat 1 :opt :alt 0] 100)
                (:nonprop-integer gmap)]
              [(get weights [:nonprop-feature-tag-value :cat 1 :opt :alt 1] 100)
                (gen/return "on")]
              [(get weights [:nonprop-feature-tag-value :cat 1 :opt :alt 2] 100)
                (gen/return "off")]])]))
        gmap (assoc gmap :nonprop-feature-tag-value gen-nonprop-feature-tag-value)

        gen-prop-margin-bottom
        (igen/freq [
          [(get weights [:prop-margin-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-bottom :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-margin-bottom :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-margin-bottom :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-margin-bottom gen-prop-margin-bottom)]
    gmap))

(defn- css3-generators-part-7 [gmap weights]
  (let [
        gen-prop-shape-margin
        (igen/freq [
          [(get weights [:prop-shape-margin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-shape-margin :alt 1] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :prop-shape-margin gen-prop-shape-margin)

        gen-prop-text-emphasis-position
        (igen/freq [
          [(get weights [:prop-text-emphasis-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-emphasis-position :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-text-emphasis-position :alt 1 :cat 0 :alt 0] 100)
                  (gen/return "over")]
                [(get weights [:prop-text-emphasis-position :alt 1 :cat 0 :alt 1] 100)
                  (gen/return "under")]])
              (igen/freq [
                [(get weights [:prop-text-emphasis-position :alt 1 :cat 1 :alt 0] 100)
                  (gen/return "right")]
                [(get weights [:prop-text-emphasis-position :alt 1 :cat 1 :alt 1] 100)
                  (gen/return "left")]]))]])
        gmap (assoc gmap :prop-text-emphasis-position gen-prop-text-emphasis-position)

        gen-nonprop-display-internal
        (igen/freq [
          [(get weights [:nonprop-display-internal :alt 0] 100)
            (gen/return "table-row-group")]
          [(get weights [:nonprop-display-internal :alt 1] 100)
            (gen/return "table-header-group")]
          [(get weights [:nonprop-display-internal :alt 2] 100)
            (gen/return "table-footer-group")]
          [(get weights [:nonprop-display-internal :alt 3] 100)
            (gen/return "table-row")]
          [(get weights [:nonprop-display-internal :alt 4] 100)
            (gen/return "table-cell")]
          [(get weights [:nonprop-display-internal :alt 5] 100)
            (gen/return "table-column-group")]
          [(get weights [:nonprop-display-internal :alt 6] 100)
            (gen/return "table-column")]
          [(get weights [:nonprop-display-internal :alt 7] 100)
            (gen/return "table-caption")]
          [(get weights [:nonprop-display-internal :alt 8] 100)
            (gen/return "ruby-base")]
          [(get weights [:nonprop-display-internal :alt 9] 100)
            (gen/return "ruby-text")]
          [(get weights [:nonprop-display-internal :alt 10] 100)
            (gen/return "ruby-base-container")]
          [(get weights [:nonprop-display-internal :alt 11] 100)
            (gen/return "ruby-text-container")]])
        gmap (assoc gmap :nonprop-display-internal gen-nonprop-display-internal)

        gen-prop-border-inline-start-width
        (igen/freq [
          [(get weights [:prop-border-inline-start-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-start-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-inline-start-width gen-prop-border-inline-start-width)

        gen-prop-outline-style
        (igen/freq [
          [(get weights [:prop-outline-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-outline-style :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-outline-style :alt 2] 100)
            (:nonprop-border-style gmap)]])
        gmap (assoc gmap :prop-outline-style gen-prop-outline-style)

        gen-nonprop-outline-style
        (:prop-outline-style gmap)
        gmap (assoc gmap :nonprop-outline-style gen-nonprop-outline-style)

        gen-prop-border-inline-end-style
        (igen/freq [
          [(get weights [:prop-border-inline-end-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-end-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-inline-end-style gen-prop-border-inline-end-style)

        gen-prop-backface-visibility
        (igen/freq [
          [(get weights [:prop-backface-visibility :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-backface-visibility :alt 1] 100)
            (gen/return "visible")]
          [(get weights [:prop-backface-visibility :alt 2] 100)
            (gen/return "hidden")]])
        gmap (assoc gmap :prop-backface-visibility gen-prop-backface-visibility)

        gen-prop-border-block-end
        (igen/freq [
          [(get weights [:prop-border-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-end :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-block-end :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-block-end :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-block-end :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-block-end gen-prop-border-block-end)

        gen-prop-background-position
        (igen/freq [
          [(get weights [:prop-background-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-position :alt 1] 100)
            (gen/tuple
              (:nonprop-bg-position gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-bg-position gmap))))]])
        gmap (assoc gmap :prop-background-position gen-prop-background-position)

        gen-prop-border-inline-start-style
        (igen/freq [
          [(get weights [:prop-border-inline-start-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-start-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-inline-start-style gen-prop-border-inline-start-style)

        gen-prop-border-bottom-style
        (igen/freq [
          [(get weights [:prop-border-bottom-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom-style :alt 1] 100)
            (:nonprop-line-style gmap)]])
        gmap (assoc gmap :prop-border-bottom-style gen-prop-border-bottom-style)

        gen-prop-transition-delay
        (igen/freq [
          [(get weights [:prop-transition-delay :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transition-delay :alt 1] 100)
            (gen/tuple
              (:nonprop-time gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-time gmap))))]])
        gmap (assoc gmap :prop-transition-delay gen-prop-transition-delay)

        gen-prop-flex-shrink
        (igen/freq [
          [(get weights [:prop-flex-shrink :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-shrink :alt 1] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :prop-flex-shrink gen-prop-flex-shrink)

        gen-nonprop-flex-shrink
        (:prop-flex-shrink gmap)
        gmap (assoc gmap :nonprop-flex-shrink gen-nonprop-flex-shrink)

        gen-nonprop-flex-grow
        (:prop-flex-grow gmap)
        gmap (assoc gmap :nonprop-flex-grow gen-nonprop-flex-grow)

        gen-prop-flex
        (igen/freq [
          [(get weights [:prop-flex :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-flex :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-flex :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/tuple
                    (:nonprop-flex-grow gmap)
                    (gen/one-of [
                      (gen/return "")
                      (:nonprop-flex-shrink gmap)]))]
                [(get weights [:prop-flex :alt 2 :cat 0 :plus :alt 1] 100)
                  (:nonprop-flex-basis gmap)]])))]])
        gmap (assoc gmap :prop-flex gen-prop-flex)

        gen-nonprop-animateable-feature
        (igen/freq [
          [(get weights [:nonprop-animateable-feature :alt 0] 100)
            (gen/return "scroll-position")]
          [(get weights [:nonprop-animateable-feature :alt 1] 100)
            (gen/return "contents")]
          [(get weights [:nonprop-animateable-feature :alt 2] 100)
            (:nonprop-custom-ident gmap)]])
        gmap (assoc gmap :nonprop-animateable-feature gen-nonprop-animateable-feature)

        gen-prop-will-change
        (igen/freq [
          [(get weights [:prop-will-change :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-will-change :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-will-change :alt 2] 100)
            (gen/tuple
              (:nonprop-animateable-feature gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-animateable-feature gmap))))]])
        gmap (assoc gmap :prop-will-change gen-prop-will-change)

        gen-prop-overflow
        (igen/freq [
          [(get weights [:prop-overflow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-overflow :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "visible")]
                  [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "hidden")]
                  [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "clip")]
                  [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0 :alt 3] 100)
                    (gen/return "scroll")]
                  [(get weights [:prop-overflow :alt 1 :cat 0 :alt 0 :alt 4] 100)
                    (gen/return "auto")]])]
              [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "visible")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "hidden")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "clip")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 3] 100)
                      (gen/return "scroll")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 4] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "visible")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "hidden")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "clip")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 3] 100)
                      (gen/return "scroll")]
                    [(get weights [:prop-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 4] 100)
                      (gen/return "auto")]]))]])]])
        gmap (assoc gmap :prop-overflow gen-prop-overflow)

        gen-nonprop-x
        (gen/return "11")
        gmap (assoc gmap :nonprop-x gen-nonprop-x)

        gen-prop-visibility
        (igen/freq [
          [(get weights [:prop-visibility :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-visibility :alt 1] 100)
            (gen/return "visible")]
          [(get weights [:prop-visibility :alt 2] 100)
            (gen/return "hidden")]
          [(get weights [:prop-visibility :alt 3] 100)
            (gen/return "collapse")]])
        gmap (assoc gmap :prop-visibility gen-prop-visibility)

        gen-prop-text-orientation
        (igen/freq [
          [(get weights [:prop-text-orientation :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-orientation :alt 1] 100)
            (gen/return "mixed")]
          [(get weights [:prop-text-orientation :alt 2] 100)
            (gen/return "upright")]
          [(get weights [:prop-text-orientation :alt 3] 100)
            (gen/return "sideways")]])
        gmap (assoc gmap :prop-text-orientation gen-prop-text-orientation)

        gen-prop-scroll-padding-block-start
        (igen/freq [
          [(get weights [:prop-scroll-padding-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-block-start :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-block-start :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-block-start :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-block-start gen-prop-scroll-padding-block-start)

        gen-func-drop-shadow
        (gen/tuple
          (gen/return "drop-shadow")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-drop-shadow :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]
            [(get weights [:func-drop-shadow :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap)
                (:rS gmap)
                (:nonprop-length gmap))]])
          (gen/one-of [
            (gen/return "")
            (:nonprop-color gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-drop-shadow gen-func-drop-shadow)

        gen-func-saturate
        (gen/tuple
          (gen/return "saturate")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-saturate gen-func-saturate)

        gen-func-hue-rotate
        (gen/tuple
          (gen/return "hue-rotate")
          (gen/return "(")
          (:nonprop-angle gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-hue-rotate gen-func-hue-rotate)

        gen-func-blur
        (gen/tuple
          (gen/return "blur")
          (gen/return "(")
          (:nonprop-length gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-blur gen-func-blur)

        gen-func-opacity
        (gen/tuple
          (gen/return "opacity")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-opacity gen-func-opacity)

        gen-func-grayscale
        (gen/tuple
          (gen/return "grayscale")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-grayscale gen-func-grayscale)

        gen-func-sepia
        (gen/tuple
          (gen/return "sepia")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-sepia gen-func-sepia)

        gen-func-invert
        (gen/tuple
          (gen/return "invert")
          (gen/return "(")
          (:nonprop-number-percentage gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-invert gen-func-invert)

        gen-nonprop-filter-function
        (igen/freq [
          [(get weights [:nonprop-filter-function :alt 0] 100)
            (:func-blur gmap)]
          [(get weights [:nonprop-filter-function :alt 1] 100)
            (:func-brightness gmap)]
          [(get weights [:nonprop-filter-function :alt 2] 100)
            (:func-contrast gmap)]
          [(get weights [:nonprop-filter-function :alt 3] 100)
            (:func-drop-shadow gmap)]
          [(get weights [:nonprop-filter-function :alt 4] 100)
            (:func-grayscale gmap)]
          [(get weights [:nonprop-filter-function :alt 5] 100)
            (:func-hue-rotate gmap)]
          [(get weights [:nonprop-filter-function :alt 6] 100)
            (:func-invert gmap)]
          [(get weights [:nonprop-filter-function :alt 7] 100)
            (:func-opacity gmap)]
          [(get weights [:nonprop-filter-function :alt 8] 100)
            (:func-saturate gmap)]
          [(get weights [:nonprop-filter-function :alt 9] 100)
            (:func-sepia gmap)]])
        gmap (assoc gmap :nonprop-filter-function gen-nonprop-filter-function)

        gen-prop-margin-block-end
        (igen/freq [
          [(get weights [:prop-margin-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-block-end :alt 1] 100)
            (:nonprop-margin-left gmap)]])
        gmap (assoc gmap :prop-margin-block-end gen-prop-margin-block-end)

        gen-prop-scroll-margin
        (igen/freq [
          [(get weights [:prop-scroll-margin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]])]
              [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]]))]
              [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-length gmap)]]))]
              [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-length gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-margin gen-prop-scroll-margin)

        gen-prop-background-image
        (igen/freq [
          [(get weights [:prop-background-image :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-image :alt 1] 100)
            (gen/tuple
              (:nonprop-bg-image gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-bg-image gmap))))]])
        gmap (assoc gmap :prop-background-image gen-prop-background-image)

        gen-prop-border-spacing
        (igen/freq [
          [(get weights [:prop-border-spacing :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-spacing :alt 1] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-length gmap)]))]])
        gmap (assoc gmap :prop-border-spacing gen-prop-border-spacing)

        gen-prop-hanging-punctuation
        (igen/freq [
          [(get weights [:prop-hanging-punctuation :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-hanging-punctuation :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-hanging-punctuation :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-hanging-punctuation :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/return "first")]
                [(get weights [:prop-hanging-punctuation :alt 2 :cat 0 :plus :alt 1] 100)
                  (igen/freq [
                    [(get weights [:prop-hanging-punctuation :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "force-end")]
                    [(get weights [:prop-hanging-punctuation :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "allow-end")]])]
                [(get weights [:prop-hanging-punctuation :alt 2 :cat 0 :plus :alt 2] 100)
                  (gen/return "last")]])))]])
        gmap (assoc gmap :prop-hanging-punctuation gen-prop-hanging-punctuation)

        gen-prop-grid-area
        (igen/freq [
          [(get weights [:prop-grid-area :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-area :alt 1] 100)
            (gen/tuple
              (:nonprop-grid-line gmap)
              (igen/freq [
                [(get weights [:prop-grid-area :alt 1 :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:rS gmap)
                    (:rS gmap)
                    (:rS gmap)
                    (:rS gmap)
                    (:rS gmap)
                    (:rS gmap)
                    (gen/return " rS\n"))]
                [(get weights [:prop-grid-area :alt 1 :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/return "/")
                    (:nonprop-grid-line gmap))]
                [(get weights [:prop-grid-area :alt 1 :cat 1 :alt 2] 100)
                  (gen/tuple
                    (gen/tuple
                      (gen/return "/")
                      (:nonprop-grid-line gmap))
                    (:rS gmap)
                    (gen/tuple
                      (gen/return "/")
                      (:nonprop-grid-line gmap)))]
                [(get weights [:prop-grid-area :alt 1 :cat 1 :alt 3] 100)
                  (gen/tuple
                    (gen/tuple
                      (gen/return "/")
                      (:nonprop-grid-line gmap))
                    (:rS gmap)
                    (gen/tuple
                      (gen/return "/")
                      (:nonprop-grid-line gmap))
                    (:rS gmap)
                    (gen/tuple
                      (gen/return "/")
                      (:nonprop-grid-line gmap)))]]))]])
        gmap (assoc gmap :prop-grid-area gen-prop-grid-area)

        gen-nonprop-family-name
        (igen/freq [
          [(get weights [:nonprop-family-name :alt 0] 100)
            (:nonprop-string gmap)]
          [(get weights [:nonprop-family-name :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (:nonprop-custom-ident gmap)))]])
        gmap (assoc gmap :nonprop-family-name gen-nonprop-family-name)

        gen-nonprop-generic-family
        (igen/freq [
          [(get weights [:nonprop-generic-family :alt 0] 100)
            (gen/return "serif")]
          [(get weights [:nonprop-generic-family :alt 1] 100)
            (gen/return "sans-serif")]
          [(get weights [:nonprop-generic-family :alt 2] 100)
            (gen/return "cursive")]
          [(get weights [:nonprop-generic-family :alt 3] 100)
            (gen/return "fantasy")]
          [(get weights [:nonprop-generic-family :alt 4] 100)
            (gen/return "monospace")]])
        gmap (assoc gmap :nonprop-generic-family gen-nonprop-generic-family)

        gen-prop-font-family
        (igen/freq [
          [(get weights [:prop-font-family :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-family :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-font-family :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-family-name gmap)]
                [(get weights [:prop-font-family :alt 1 :cat 0 :alt 1] 100)
                  (:nonprop-generic-family gmap)]])
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (igen/freq [
                    [(get weights [:prop-font-family :alt 1 :cat 1 :star :cat 1 :alt 0] 100)
                      (:nonprop-family-name gmap)]
                    [(get weights [:prop-font-family :alt 1 :cat 1 :star :cat 1 :alt 1] 100)
                      (:nonprop-generic-family gmap)]]))))]])
        gmap (assoc gmap :prop-font-family gen-prop-font-family)

        gen-nonprop-single-animation-play-state
        (igen/freq [
          [(get weights [:nonprop-single-animation-play-state :alt 0] 100)
            (gen/return "running")]
          [(get weights [:nonprop-single-animation-play-state :alt 1] 100)
            (gen/return "paused")]])
        gmap (assoc gmap :nonprop-single-animation-play-state gen-nonprop-single-animation-play-state)

        gen-prop-animation-play-state
        (igen/freq [
          [(get weights [:prop-animation-play-state :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-play-state :alt 1] 100)
            (gen/tuple
              (:nonprop-single-animation-play-state gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-animation-play-state gmap))))]])
        gmap (assoc gmap :prop-animation-play-state gen-prop-animation-play-state)

        gen-prop-tab-size
        (igen/freq [
          [(get weights [:prop-tab-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-tab-size :alt 1] 100)
            (:nonprop-integer gmap)]
          [(get weights [:prop-tab-size :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-tab-size gen-prop-tab-size)

        gen-prop-grid-row
        (igen/freq [
          [(get weights [:prop-grid-row :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-row :alt 1] 100)
            (gen/tuple
              (:nonprop-grid-line gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-grid-line gmap))]))]])
        gmap (assoc gmap :prop-grid-row gen-prop-grid-row)

        gen-prop-white-space
        (igen/freq [
          [(get weights [:prop-white-space :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-white-space :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-white-space :alt 2] 100)
            (gen/return "pre")]
          [(get weights [:prop-white-space :alt 3] 100)
            (gen/return "nowrap")]
          [(get weights [:prop-white-space :alt 4] 100)
            (gen/return "pre-wrap")]
          [(get weights [:prop-white-space :alt 5] 100)
            (gen/return "pre-line")]])
        gmap (assoc gmap :prop-white-space gen-prop-white-space)

        gen-prop-scale
        (igen/freq [
          [(get weights [:prop-scale :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scale :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-scale :alt 2] 100)
            (igen/freq [
              [(get weights [:prop-scale :alt 2 :cat 0 :alt 0] 100)
                (:nonprop-number gmap)]
              [(get weights [:prop-scale :alt 2 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-number gmap)
                  (:rS gmap)
                  (:nonprop-number gmap))]
              [(get weights [:prop-scale :alt 2 :cat 0 :alt 2] 100)
                (gen/tuple
                  (:nonprop-number gmap)
                  (:rS gmap)
                  (:nonprop-number gmap)
                  (:rS gmap)
                  (:nonprop-number gmap))]])]])
        gmap (assoc gmap :prop-scale gen-prop-scale)

        gen-nonprop-font-family
        (:prop-font-family gmap)
        gmap (assoc gmap :nonprop-font-family gen-nonprop-font-family)

        gen-nonprop-common-lig-values
        (igen/freq [
          [(get weights [:nonprop-common-lig-values :cat 0 :alt 0] 100)
            (gen/return "common-ligatures")]
          [(get weights [:nonprop-common-lig-values :cat 0 :alt 1] 100)
            (gen/return "no-common-ligatures")]])
        gmap (assoc gmap :nonprop-common-lig-values gen-nonprop-common-lig-values)]
    gmap))

(defn- css3-generators-part-8 [gmap weights]
  (let [
        gen-nonprop-historical-lig-values
        (igen/freq [
          [(get weights [:nonprop-historical-lig-values :cat 0 :alt 0] 100)
            (gen/return "historical-ligatures")]
          [(get weights [:nonprop-historical-lig-values :cat 0 :alt 1] 100)
            (gen/return "no-historical-ligatures")]])
        gmap (assoc gmap :nonprop-historical-lig-values gen-nonprop-historical-lig-values)

        gen-nonprop-contextual-alt-values
        (igen/freq [
          [(get weights [:nonprop-contextual-alt-values :cat 0 :alt 0] 100)
            (gen/return "contextual")]
          [(get weights [:nonprop-contextual-alt-values :cat 0 :alt 1] 100)
            (gen/return "no-contextual")]])
        gmap (assoc gmap :nonprop-contextual-alt-values gen-nonprop-contextual-alt-values)

        gen-prop-font-variant-ligatures
        (igen/freq [
          [(get weights [:prop-font-variant-ligatures :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-ligatures :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-ligatures :alt 2] 100)
            (gen/return "none")]
          [(get weights [:prop-font-variant-ligatures :alt 3] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-variant-ligatures :alt 3 :cat 0 :plus :alt 0] 100)
                  (:nonprop-common-lig-values gmap)]
                [(get weights [:prop-font-variant-ligatures :alt 3 :cat 0 :plus :alt 1] 100)
                  (:nonprop-discretionary-lig-values gmap)]
                [(get weights [:prop-font-variant-ligatures :alt 3 :cat 0 :plus :alt 2] 100)
                  (:nonprop-historical-lig-values gmap)]
                [(get weights [:prop-font-variant-ligatures :alt 3 :cat 0 :plus :alt 3] 100)
                  (:nonprop-contextual-alt-values gmap)]])))]])
        gmap (assoc gmap :prop-font-variant-ligatures gen-prop-font-variant-ligatures)

        gen-prop-max-width
        (igen/freq [
          [(get weights [:prop-max-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-max-width :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-max-width :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-max-width :alt 3] 100)
            (gen/return "none")]
          [(get weights [:prop-max-width :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-max-width :alt 5] 100)
            (gen/return "min-content")]
          [(get weights [:prop-max-width :alt 6] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-max-width :alt 7] 100)
            (gen/return "fill-available")]])
        gmap (assoc gmap :prop-max-width gen-prop-max-width)

        gen-prop-transform-box
        (igen/freq [
          [(get weights [:prop-transform-box :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transform-box :alt 1] 100)
            (gen/return "border-box")]
          [(get weights [:prop-transform-box :alt 2] 100)
            (gen/return "fill-box")]
          [(get weights [:prop-transform-box :alt 3] 100)
            (gen/return "view-box")]])
        gmap (assoc gmap :prop-transform-box gen-prop-transform-box)

        gen-prop-scroll-behavior
        (igen/freq [
          [(get weights [:prop-scroll-behavior :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-behavior :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-behavior :alt 2] 100)
            (gen/return "smooth")]])
        gmap (assoc gmap :prop-scroll-behavior gen-prop-scroll-behavior)

        gen-prop-grid-template-areas
        (igen/freq [
          [(get weights [:prop-grid-template-areas :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-template-areas :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-grid-template-areas :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (:nonprop-string gmap)))]])
        gmap (assoc gmap :prop-grid-template-areas gen-prop-grid-template-areas)

        gen-nonprop-filter-function-list
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-filter-function-list :cat 0 :plus :alt 0] 100)
              (:nonprop-filter-function gmap)]
            [(get weights [:nonprop-filter-function-list :cat 0 :plus :alt 1] 100)
              (:nonprop-url gmap)]])))
        gmap (assoc gmap :nonprop-filter-function-list gen-nonprop-filter-function-list)

        gen-prop-filter
        (igen/freq [
          [(get weights [:prop-filter :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-filter :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-filter :alt 2] 100)
            (:nonprop-filter-function-list gmap)]])
        gmap (assoc gmap :prop-filter gen-prop-filter)

        gen-prop-text-justify
        (igen/freq [
          [(get weights [:prop-text-justify :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-justify :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-text-justify :alt 2] 100)
            (gen/return "inter-character")]
          [(get weights [:prop-text-justify :alt 3] 100)
            (gen/return "inter-word")]
          [(get weights [:prop-text-justify :alt 4] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-text-justify gen-prop-text-justify)

        gen-prop-flex-direction
        (igen/freq [
          [(get weights [:prop-flex-direction :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-direction :alt 1] 100)
            (gen/return "row")]
          [(get weights [:prop-flex-direction :alt 2] 100)
            (gen/return "row-reverse")]
          [(get weights [:prop-flex-direction :alt 3] 100)
            (gen/return "column")]
          [(get weights [:prop-flex-direction :alt 4] 100)
            (gen/return "column-reverse")]])
        gmap (assoc gmap :prop-flex-direction gen-prop-flex-direction)

        gen-nonprop-flex-direction
        (:prop-flex-direction gmap)
        gmap (assoc gmap :nonprop-flex-direction gen-nonprop-flex-direction)

        gen-prop-flex-flow
        (igen/freq [
          [(get weights [:prop-flex-flow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-flex-flow :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-flex-flow :alt 1 :plus :alt 0] 100)
                  (:nonprop-flex-direction gmap)]
                [(get weights [:prop-flex-flow :alt 1 :plus :alt 1] 100)
                  (:nonprop-flex-wrap gmap)]])))]])
        gmap (assoc gmap :prop-flex-flow gen-prop-flex-flow)

        gen-prop-background-repeat
        (igen/freq [
          [(get weights [:prop-background-repeat :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-repeat :alt 1] 100)
            (gen/tuple
              (:nonprop-repeat-style gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-repeat-style gmap))))]])
        gmap (assoc gmap :prop-background-repeat gen-prop-background-repeat)

        gen-nonprop-absolute-size
        (igen/freq [
          [(get weights [:nonprop-absolute-size :alt 0] 100)
            (gen/return "xx-small")]
          [(get weights [:nonprop-absolute-size :alt 1] 100)
            (gen/return "x-small")]
          [(get weights [:nonprop-absolute-size :alt 2] 100)
            (gen/return "small")]
          [(get weights [:nonprop-absolute-size :alt 3] 100)
            (gen/return "medium")]
          [(get weights [:nonprop-absolute-size :alt 4] 100)
            (gen/return "large")]
          [(get weights [:nonprop-absolute-size :alt 5] 100)
            (gen/return "x-large")]
          [(get weights [:nonprop-absolute-size :alt 6] 100)
            (gen/return "xx-large")]])
        gmap (assoc gmap :nonprop-absolute-size gen-nonprop-absolute-size)

        gen-nonprop-relative-size
        (igen/freq [
          [(get weights [:nonprop-relative-size :alt 0] 100)
            (gen/return "larger")]
          [(get weights [:nonprop-relative-size :alt 1] 100)
            (gen/return "smaller")]])
        gmap (assoc gmap :nonprop-relative-size gen-nonprop-relative-size)

        gen-prop-font-size
        (igen/freq [
          [(get weights [:prop-font-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-size :alt 1] 100)
            (:nonprop-absolute-size gmap)]
          [(get weights [:prop-font-size :alt 2] 100)
            (:nonprop-relative-size gmap)]
          [(get weights [:prop-font-size :alt 3] 100)
            (:nonprop-length-percentage gmap)]])
        gmap (assoc gmap :prop-font-size gen-prop-font-size)

        gen-prop-border-inline-end
        (igen/freq [
          [(get weights [:prop-border-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-end :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-inline-end :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-inline-end :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-inline-end :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-inline-end gen-prop-border-inline-end)

        gen-nonprop-bg-size
        (igen/freq [
          [(get weights [:nonprop-bg-size :alt 0] 100)
            (igen/freq [
              [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0 :alt 0] 100)
                    (:nonprop-length-percentage gmap)]
                  [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "auto")]])]
              [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "auto")]]))]])]
          [(get weights [:nonprop-bg-size :alt 1] 100)
            (gen/return "cover")]
          [(get weights [:nonprop-bg-size :alt 2] 100)
            (gen/return "contain")]])
        gmap (assoc gmap :nonprop-bg-size gen-nonprop-bg-size)

        gen-prop-mask-size
        (igen/freq [
          [(get weights [:prop-mask-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-size :alt 1] 100)
            (gen/tuple
              (:nonprop-bg-size gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-bg-size gmap))))]])
        gmap (assoc gmap :prop-mask-size gen-prop-mask-size)

        gen-prop-float
        (igen/freq [
          [(get weights [:prop-float :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-float :alt 1] 100)
            (gen/return "left")]
          [(get weights [:prop-float :alt 2] 100)
            (gen/return "right")]
          [(get weights [:prop-float :alt 3] 100)
            (gen/return "none")]
          [(get weights [:prop-float :alt 4] 100)
            (gen/return "inline-start")]
          [(get weights [:prop-float :alt 5] 100)
            (gen/return "inline-end")]])
        gmap (assoc gmap :prop-float gen-prop-float)

        gen-prop-scroll-padding-inline
        (igen/freq [
          [(get weights [:prop-scroll-padding-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-inline :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (:nonprop-percentage gmap)]])]
              [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding-inline :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (:nonprop-percentage gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-padding-inline gen-prop-scroll-padding-inline)

        gen-nonprop-masking-mode
        (igen/freq [
          [(get weights [:nonprop-masking-mode :alt 0] 100)
            (gen/return "alpha")]
          [(get weights [:nonprop-masking-mode :alt 1] 100)
            (gen/return "luminance")]
          [(get weights [:nonprop-masking-mode :alt 2] 100)
            (gen/return "match-source")]])
        gmap (assoc gmap :nonprop-masking-mode gen-nonprop-masking-mode)

        gen-prop-mask-mode
        (igen/freq [
          [(get weights [:prop-mask-mode :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-mode :alt 1] 100)
            (gen/tuple
              (:nonprop-masking-mode gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-masking-mode gmap))))]])
        gmap (assoc gmap :prop-mask-mode gen-prop-mask-mode)

        gen-nonprop-quote
        (igen/freq [
          [(get weights [:nonprop-quote :alt 0] 100)
            (gen/return "open-quote")]
          [(get weights [:nonprop-quote :alt 1] 100)
            (gen/return "close-quote")]
          [(get weights [:nonprop-quote :alt 2] 100)
            (gen/return "no-open-quote")]
          [(get weights [:nonprop-quote :alt 3] 100)
            (gen/return "no-close-quote")]])
        gmap (assoc gmap :nonprop-quote gen-nonprop-quote)

        gen-prop-scroll-snap-stop
        (igen/freq [
          [(get weights [:prop-scroll-snap-stop :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-snap-stop :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-scroll-snap-stop :alt 2] 100)
            (gen/return "always")]])
        gmap (assoc gmap :prop-scroll-snap-stop gen-prop-scroll-snap-stop)

        gen-prop-letter-spacing
        (igen/freq [
          [(get weights [:prop-letter-spacing :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-letter-spacing :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-letter-spacing :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-letter-spacing gen-prop-letter-spacing)

        gen-prop-border-top
        (igen/freq [
          [(get weights [:prop-border-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-top :alt 1 :plus :alt 0] 100)
                  (:nonprop-line-width gmap)]
                [(get weights [:prop-border-top :alt 1 :plus :alt 1] 100)
                  (:nonprop-line-style gmap)]
                [(get weights [:prop-border-top :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-top gen-prop-border-top)

        gen-prop-text-combine-upright
        (igen/freq [
          [(get weights [:prop-text-combine-upright :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-combine-upright :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-text-combine-upright :alt 2] 100)
            (gen/return "all")]
          [(get weights [:prop-text-combine-upright :alt 3] 100)
            (gen/tuple
              (gen/return "digits")
              (gen/one-of [
                (gen/return "")
                (:nonprop-integer gmap)]))]])
        gmap (assoc gmap :prop-text-combine-upright gen-prop-text-combine-upright)

        gen-prop-border-bottom-right-radius
        (igen/freq [
          [(get weights [:prop-border-bottom-right-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom-right-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-bottom-right-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-bottom-right-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-bottom-right-radius gen-prop-border-bottom-right-radius)

        gen-prop-page-break-after
        (igen/freq [
          [(get weights [:prop-page-break-after :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-page-break-after :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-page-break-after :alt 2] 100)
            (gen/return "always")]
          [(get weights [:prop-page-break-after :alt 3] 100)
            (gen/return "avoid")]
          [(get weights [:prop-page-break-after :alt 4] 100)
            (gen/return "left")]
          [(get weights [:prop-page-break-after :alt 5] 100)
            (gen/return "right")]
          [(get weights [:prop-page-break-after :alt 6] 100)
            (gen/return "recto")]
          [(get weights [:prop-page-break-after :alt 7] 100)
            (gen/return "verso")]])
        gmap (assoc gmap :prop-page-break-after gen-prop-page-break-after)

        gen-prop-border-image-slice
        (igen/freq [
          [(get weights [:prop-border-image-slice :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image-slice :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-border-image-slice :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-number-percentage gmap)]
                [(get weights [:prop-border-image-slice :alt 1 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap))]
                [(get weights [:prop-border-image-slice :alt 1 :cat 0 :alt 2] 100)
                  (gen/tuple
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap))]
                [(get weights [:prop-border-image-slice :alt 1 :cat 0 :alt 3] 100)
                  (gen/tuple
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap)
                    (:rS gmap)
                    (:nonprop-number-percentage gmap))]])
              (gen/one-of [
                (gen/return "")
                (gen/return "fill")]))]])
        gmap (assoc gmap :prop-border-image-slice gen-prop-border-image-slice)

        gen-nonprop-border-image-slice
        (:prop-border-image-slice gmap)
        gmap (assoc gmap :nonprop-border-image-slice gen-nonprop-border-image-slice)

        gen-prop-border-inline-start-color
        (igen/freq [
          [(get weights [:prop-border-inline-start-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-start-color :alt 1] 100)
            (:nonprop-border-top-color gmap)]])
        gmap (assoc gmap :prop-border-inline-start-color gen-prop-border-inline-start-color)

        gen-prop-mask-image
        (igen/freq [
          [(get weights [:prop-mask-image :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-image :alt 1] 100)
            (gen/tuple
              (:nonprop-mask-reference gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-mask-reference gmap))))]])
        gmap (assoc gmap :prop-mask-image gen-prop-mask-image)

        gen-prop-mask-position
        (igen/freq [
          [(get weights [:prop-mask-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-position :alt 1] 100)
            (gen/tuple
              (:nonprop-position gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-position gmap))))]])
        gmap (assoc gmap :prop-mask-position gen-prop-mask-position)

        gen-prop-hyphens
        (igen/freq [
          [(get weights [:prop-hyphens :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-hyphens :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-hyphens :alt 2] 100)
            (gen/return "manual")]
          [(get weights [:prop-hyphens :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-hyphens gen-prop-hyphens)

        gen-prop-transition
        (igen/freq [
          [(get weights [:prop-transition :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transition :alt 1] 100)
            (gen/tuple
              (:nonprop-single-transition gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-transition gmap))))]])
        gmap (assoc gmap :prop-transition gen-prop-transition)

        gen-prop-caret-color
        (igen/freq [
          [(get weights [:prop-caret-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-caret-color :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-caret-color :alt 2] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-caret-color gen-prop-caret-color)

        gen-func-ellipse
        (gen/tuple
          (gen/return "ellipse")
          (gen/return "(")
          (gen/tuple
            (:nonprop-shape-radius gmap)
            (:rS gmap)
            (:nonprop-shape-radius gmap))
          (gen/one-of [
            (gen/return "")
            (:S gmap)])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (:nonprop-position gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-ellipse gen-func-ellipse)

        gen-prop-pointer-events
        (igen/freq [
          [(get weights [:prop-pointer-events :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-pointer-events :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-pointer-events :alt 2] 100)
            (gen/return "none")]
          [(get weights [:prop-pointer-events :alt 3] 100)
            (gen/return "visiblePainted")]
          [(get weights [:prop-pointer-events :alt 4] 100)
            (gen/return "visibleFill")]
          [(get weights [:prop-pointer-events :alt 5] 100)
            (gen/return "visibleStroke")]
          [(get weights [:prop-pointer-events :alt 6] 100)
            (gen/return "visible")]
          [(get weights [:prop-pointer-events :alt 7] 100)
            (gen/return "painted")]
          [(get weights [:prop-pointer-events :alt 8] 100)
            (gen/return "fill")]
          [(get weights [:prop-pointer-events :alt 9] 100)
            (gen/return "stroke")]
          [(get weights [:prop-pointer-events :alt 10] 100)
            (gen/return "all")]
          [(get weights [:prop-pointer-events :alt 11] 100)
            (gen/return "inherit")]])
        gmap (assoc gmap :prop-pointer-events gen-prop-pointer-events)

        gen-prop-animation-fill-mode
        (igen/freq [
          [(get weights [:prop-animation-fill-mode :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-fill-mode :alt 1] 100)
            (gen/tuple
              (:nonprop-single-animation-fill-mode gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-animation-fill-mode gmap))))]])
        gmap (assoc gmap :prop-animation-fill-mode gen-prop-animation-fill-mode)

        gen-prop-margin-top
        (igen/freq [
          [(get weights [:prop-margin-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-top :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-margin-top :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-margin-top :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-margin-top gen-prop-margin-top)

        gen-prop-touch-action
        (igen/freq [
          [(get weights [:prop-touch-action :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-touch-action :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-touch-action :alt 2] 100)
            (gen/return "none")]
          [(get weights [:prop-touch-action :alt 3] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 0] 100)
                  (igen/freq [
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 0 :cat 0 :alt 0] 100)
                      (gen/return "pan-x")]
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 0 :cat 0 :alt 1] 100)
                      (gen/return "pan-left")]
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 0 :cat 0 :alt 2] 100)
                      (gen/return "pan-right")]])]
                [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 1] 100)
                  (igen/freq [
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "pan-y")]
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "pan-up")]
                    [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "pan-down")]])]
                [(get weights [:prop-touch-action :alt 3 :cat 0 :plus :alt 2] 100)
                  (gen/return "pinch-zoom")]])))]
          [(get weights [:prop-touch-action :alt 4] 100)
            (gen/return "manipulation")]])
        gmap (assoc gmap :prop-touch-action gen-prop-touch-action)

        gen-prop-text-underline-position
        (igen/freq [
          [(get weights [:prop-text-underline-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-underline-position :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-text-underline-position :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-text-underline-position :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/return "under")]
                [(get weights [:prop-text-underline-position :alt 2 :cat 0 :plus :alt 1] 100)
                  (igen/freq [
                    [(get weights [:prop-text-underline-position :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "left")]
                    [(get weights [:prop-text-underline-position :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "right")]])]])))]])
        gmap (assoc gmap :prop-text-underline-position gen-prop-text-underline-position)

        gen-prop-line-break
        (igen/freq [
          [(get weights [:prop-line-break :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-line-break :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-line-break :alt 2] 100)
            (gen/return "loose")]
          [(get weights [:prop-line-break :alt 3] 100)
            (gen/return "normal")]
          [(get weights [:prop-line-break :alt 4] 100)
            (gen/return "strict")]])
        gmap (assoc gmap :prop-line-break gen-prop-line-break)

        gen-prop-scroll-margin-bottom
        (igen/freq [
          [(get weights [:prop-scroll-margin-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-bottom :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-bottom :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-bottom gen-prop-scroll-margin-bottom)

        gen-prop-border-end-start-radius
        (igen/freq [
          [(get weights [:prop-border-end-start-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-end-start-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-end-start-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-end-start-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-end-start-radius gen-prop-border-end-start-radius)

        gen-prop-padding-top
        (igen/freq [
          [(get weights [:prop-padding-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-top :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-padding-top :alt 2] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-padding-top gen-prop-padding-top)

        gen-nonprop-clip-source
        (:nonprop-url gmap)
        gmap (assoc gmap :nonprop-clip-source gen-nonprop-clip-source)]
    gmap))

(defn- css3-generators-part-9 [gmap weights]
  (let [
        gen-prop-border-radius
        (igen/freq [
          [(get weights [:prop-border-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-radius :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-border-radius :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-length-percentage gmap)]
                [(get weights [:prop-border-radius :alt 1 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap))]
                [(get weights [:prop-border-radius :alt 1 :cat 0 :alt 2] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap))]
                [(get weights [:prop-border-radius :alt 1 :cat 0 :alt 3] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap)
                    (:rS gmap)
                    (:nonprop-length-percentage gmap))]])
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (igen/freq [
                    [(get weights [:prop-border-radius :alt 1 :cat 1 :opt :cat 1 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-radius :alt 1 :cat 1 :opt :cat 1 :alt 1] 100)
                      (gen/tuple
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap))]
                    [(get weights [:prop-border-radius :alt 1 :cat 1 :opt :cat 1 :alt 2] 100)
                      (gen/tuple
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap))]
                    [(get weights [:prop-border-radius :alt 1 :cat 1 :opt :cat 1 :alt 3] 100)
                      (gen/tuple
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap)
                        (:rS gmap)
                        (:nonprop-length-percentage gmap))]]))]))]])
        gmap (assoc gmap :prop-border-radius gen-prop-border-radius)

        gen-nonprop-border-radius
        (:prop-border-radius gmap)
        gmap (assoc gmap :nonprop-border-radius gen-nonprop-border-radius)

        gen-nonprop-fill-rule
        (igen/freq [
          [(get weights [:nonprop-fill-rule :alt 0] 100)
            (gen/return "nonzero")]
          [(get weights [:nonprop-fill-rule :alt 1] 100)
            (gen/return "evenodd")]])
        gmap (assoc gmap :nonprop-fill-rule gen-nonprop-fill-rule)

        gen-func-polygon
        (gen/tuple
          (gen/return "polygon")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (:nonprop-fill-rule gmap)])
          (gen/return ",")
          (gen/tuple
            (:nonprop-length-percentage gmap)
            (:nonprop-length-percentage gmap))
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))))
          (gen/return ")"))
        gmap (assoc gmap :func-polygon gen-func-polygon)

        gen-func-inset
        (gen/tuple
          (gen/return "inset")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-inset :cat 2 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:func-inset :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:func-inset :cat 2 :alt 2] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:func-inset :cat 2 :alt 3] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap)
                (:rS gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "round")
              (:nonprop-border-radius gmap))])
          (gen/return ")"))
        gmap (assoc gmap :func-inset gen-func-inset)

        gen-nonprop-basic-shape
        (igen/freq [
          [(get weights [:nonprop-basic-shape :alt 0] 100)
            (:func-inset gmap)]
          [(get weights [:nonprop-basic-shape :alt 1] 100)
            (:func-circle gmap)]
          [(get weights [:nonprop-basic-shape :alt 2] 100)
            (:func-ellipse gmap)]
          [(get weights [:nonprop-basic-shape :alt 3] 100)
            (:func-polygon gmap)]])
        gmap (assoc gmap :nonprop-basic-shape gen-nonprop-basic-shape)

        gen-prop-shape-outside
        (igen/freq [
          [(get weights [:prop-shape-outside :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-shape-outside :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-shape-outside :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-shape-outside :alt 2 :plus :alt 0] 100)
                  (:nonprop-shape-box gmap)]
                [(get weights [:prop-shape-outside :alt 2 :plus :alt 1] 100)
                  (:nonprop-basic-shape gmap)]])))]
          [(get weights [:prop-shape-outside :alt 3] 100)
            (:nonprop-image gmap)]])
        gmap (assoc gmap :prop-shape-outside gen-prop-shape-outside)

        gen-prop-block-size
        (igen/freq [
          [(get weights [:prop-block-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-block-size :alt 1] 100)
            (:nonprop-width gmap)]])
        gmap (assoc gmap :prop-block-size gen-prop-block-size)

        gen-prop-clip-path
        (igen/freq [
          [(get weights [:prop-clip-path :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-clip-path :alt 1] 100)
            (:nonprop-clip-source gmap)]
          [(get weights [:prop-clip-path :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-clip-path :alt 2 :cat 0 :plus :alt 0] 100)
                  (:nonprop-basic-shape gmap)]
                [(get weights [:prop-clip-path :alt 2 :cat 0 :plus :alt 1] 100)
                  (:nonprop-geometry-box gmap)]])))]
          [(get weights [:prop-clip-path :alt 3] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-clip-path gen-prop-clip-path)

        gen-nonprop-y
        (gen/return "11")
        gmap (assoc gmap :nonprop-y gen-nonprop-y)

        gen-prop-scroll-padding-left
        (igen/freq [
          [(get weights [:prop-scroll-padding-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-left :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-left :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-left :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-left gen-prop-scroll-padding-left)

        gen-prop-word-break
        (igen/freq [
          [(get weights [:prop-word-break :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-word-break :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-word-break :alt 2] 100)
            (gen/return "break-all")]
          [(get weights [:prop-word-break :alt 3] 100)
            (gen/return "keep-all")]
          [(get weights [:prop-word-break :alt 4] 100)
            (gen/return "break-word")]])
        gmap (assoc gmap :prop-word-break gen-prop-word-break)

        gen-prop-transition-property
        (igen/freq [
          [(get weights [:prop-transition-property :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transition-property :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-transition-property :alt 2] 100)
            (gen/tuple
              (:nonprop-single-transition-property gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-transition-property gmap))))]])
        gmap (assoc gmap :prop-transition-property gen-prop-transition-property)

        gen-prop-list-style-image
        (igen/freq [
          [(get weights [:prop-list-style-image :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-list-style-image :alt 1] 100)
            (:nonprop-url gmap)]
          [(get weights [:prop-list-style-image :alt 2] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-list-style-image gen-prop-list-style-image)

        gen-prop-border-bottom-color
        (igen/freq [
          [(get weights [:prop-border-bottom-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom-color :alt 1] 100)
            (:nonprop-border-top-color gmap)]])
        gmap (assoc gmap :prop-border-bottom-color gen-prop-border-bottom-color)

        gen-nonprop-list-style-image
        (:prop-list-style-image gmap)
        gmap (assoc gmap :nonprop-list-style-image gen-nonprop-list-style-image)

        gen-prop-list-style
        (igen/freq [
          [(get weights [:prop-list-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-list-style :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-list-style :alt 1 :plus :alt 0] 100)
                  (:nonprop-list-style-type gmap)]
                [(get weights [:prop-list-style :alt 1 :plus :alt 1] 100)
                  (:nonprop-list-style-position gmap)]
                [(get weights [:prop-list-style :alt 1 :plus :alt 2] 100)
                  (:nonprop-list-style-image gmap)]])))]])
        gmap (assoc gmap :prop-list-style gen-prop-list-style)

        gen-prop-border-collapse
        (igen/freq [
          [(get weights [:prop-border-collapse :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-collapse :alt 1] 100)
            (gen/return "collapse")]
          [(get weights [:prop-border-collapse :alt 2] 100)
            (gen/return "separate")]])
        gmap (assoc gmap :prop-border-collapse gen-prop-border-collapse)

        gen-prop-border-block-color
        (igen/freq [
          [(get weights [:prop-border-block-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-color :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-block-color :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-border-top-color gmap)]
              [(get weights [:prop-border-block-color :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-border-top-color gmap)
                  (:rS gmap)
                  (:nonprop-border-top-color gmap))]])]])
        gmap (assoc gmap :prop-border-block-color gen-prop-border-block-color)

        gen-prop-break-before
        (igen/freq [
          [(get weights [:prop-break-before :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-break-before :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-break-before :alt 2] 100)
            (gen/return "avoid")]
          [(get weights [:prop-break-before :alt 3] 100)
            (gen/return "always")]
          [(get weights [:prop-break-before :alt 4] 100)
            (gen/return "all")]
          [(get weights [:prop-break-before :alt 5] 100)
            (gen/return "avoid-page")]
          [(get weights [:prop-break-before :alt 6] 100)
            (gen/return "page")]
          [(get weights [:prop-break-before :alt 7] 100)
            (gen/return "left")]
          [(get weights [:prop-break-before :alt 8] 100)
            (gen/return "right")]
          [(get weights [:prop-break-before :alt 9] 100)
            (gen/return "recto")]
          [(get weights [:prop-break-before :alt 10] 100)
            (gen/return "verso")]
          [(get weights [:prop-break-before :alt 11] 100)
            (gen/return "avoid-column")]
          [(get weights [:prop-break-before :alt 12] 100)
            (gen/return "column")]
          [(get weights [:prop-break-before :alt 13] 100)
            (gen/return "avoid-region")]
          [(get weights [:prop-break-before :alt 14] 100)
            (gen/return "region")]])
        gmap (assoc gmap :prop-break-before gen-prop-break-before)

        gen-prop-background-color
        (igen/freq [
          [(get weights [:prop-background-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-background-color gen-prop-background-color)

        gen-prop-transition-timing-function
        (igen/freq [
          [(get weights [:prop-transition-timing-function :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transition-timing-function :alt 1] 100)
            (gen/tuple
              (:nonprop-timing-function gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-timing-function gmap))))]])
        gmap (assoc gmap :prop-transition-timing-function gen-prop-transition-timing-function)

        gen-prop-background-clip
        (igen/freq [
          [(get weights [:prop-background-clip :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-clip :alt 1] 100)
            (gen/tuple
              (:nonprop-box gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-box gmap))))]])
        gmap (assoc gmap :prop-background-clip gen-prop-background-clip)

        gen-prop-word-wrap
        (igen/freq [
          [(get weights [:prop-word-wrap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-word-wrap :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-word-wrap :alt 2] 100)
            (gen/return "break-word")]])
        gmap (assoc gmap :prop-word-wrap gen-prop-word-wrap)

        gen-prop-scroll-margin-inline-start
        (igen/freq [
          [(get weights [:prop-scroll-margin-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-inline-start :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-inline-start :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-inline-start gen-prop-scroll-margin-inline-start)

        gen-prop-font-variant-alternates
        (igen/freq [
          [(get weights [:prop-font-variant-alternates :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-alternates :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-alternates :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 0] 100)
                  (gen/tuple
                    (gen/return "stylistic")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 1] 100)
                  (gen/return "historical-forms")]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 2] 100)
                  (gen/tuple
                    (gen/return "styleset")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/vector
                      (gen/tuple
                        (gen/return ",")
                        (:nonprop-feature-value-name gmap)))
                    (gen/return ")"))]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 3] 100)
                  (gen/tuple
                    (gen/return "character-variant")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/vector
                      (gen/tuple
                        (gen/return ",")
                        (:nonprop-feature-value-name gmap)))
                    (gen/return ")"))]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 4] 100)
                  (gen/tuple
                    (gen/return "swash")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 5] 100)
                  (gen/tuple
                    (gen/return "ornaments")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant-alternates :alt 2 :cat 0 :plus :alt 6] 100)
                  (gen/tuple
                    (gen/return "annotation")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]])))]])
        gmap (assoc gmap :prop-font-variant-alternates gen-prop-font-variant-alternates)

        gen-prop-image-orientation
        (igen/freq [
          [(get weights [:prop-image-orientation :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-image-orientation :alt 1] 100)
            (gen/return "from-image")]
          [(get weights [:prop-image-orientation :alt 2] 100)
            (:nonprop-angle gmap)]
          [(get weights [:prop-image-orientation :alt 3] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-angle gmap)])
              (gen/return "flip"))]])
        gmap (assoc gmap :prop-image-orientation gen-prop-image-orientation)

        gen-prop-grid-column
        (igen/freq [
          [(get weights [:prop-grid-column :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-column :alt 1] 100)
            (gen/tuple
              (:nonprop-grid-line gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-grid-line gmap))]))]])
        gmap (assoc gmap :prop-grid-column gen-prop-grid-column)

        gen-prop-position
        (igen/freq [
          [(get weights [:prop-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-position :alt 1] 100)
            (gen/return "static")]
          [(get weights [:prop-position :alt 2] 100)
            (gen/return "relative")]
          [(get weights [:prop-position :alt 3] 100)
            (gen/return "absolute")]
          [(get weights [:prop-position :alt 4] 100)
            (gen/return "sticky")]
          [(get weights [:prop-position :alt 5] 100)
            (gen/return "fixed")]])
        gmap (assoc gmap :prop-position gen-prop-position)

        gen-prop-grid-row-start
        (igen/freq [
          [(get weights [:prop-grid-row-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-row-start :alt 1] 100)
            (:nonprop-grid-line gmap)]])
        gmap (assoc gmap :prop-grid-row-start gen-prop-grid-row-start)

        gen-prop-scroll-padding-inline-end
        (igen/freq [
          [(get weights [:prop-scroll-padding-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-inline-end :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-inline-end :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-inline-end :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-inline-end gen-prop-scroll-padding-inline-end)

        gen-prop-border-top-left-radius
        (igen/freq [
          [(get weights [:prop-border-top-left-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top-left-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-top-left-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-top-left-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-top-left-radius gen-prop-border-top-left-radius)

        gen-prop-margin-inline-end
        (igen/freq [
          [(get weights [:prop-margin-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-inline-end :alt 1] 100)
            (:nonprop-margin-left gmap)]])
        gmap (assoc gmap :prop-margin-inline-end gen-prop-margin-inline-end)

        gen-prop-scroll-padding-bottom
        (igen/freq [
          [(get weights [:prop-scroll-padding-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-bottom :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-bottom :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-bottom :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-bottom gen-prop-scroll-padding-bottom)

        gen-prop-background-attachment
        (igen/freq [
          [(get weights [:prop-background-attachment :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-attachment :alt 1] 100)
            (gen/tuple
              (:nonprop-attachment gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-attachment gmap))))]])
        gmap (assoc gmap :prop-background-attachment gen-prop-background-attachment)

        gen-prop-padding-block
        (igen/freq [
          [(get weights [:prop-padding-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-block :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-padding-block :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-padding-left gmap)]
              [(get weights [:prop-padding-block :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-padding-left gmap)
                  (:rS gmap)
                  (:nonprop-padding-left gmap))]])]])
        gmap (assoc gmap :prop-padding-block gen-prop-padding-block)

        gen-prop-table-layout
        (igen/freq [
          [(get weights [:prop-table-layout :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-table-layout :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-table-layout :alt 2] 100)
            (gen/return "fixed")]])
        gmap (assoc gmap :prop-table-layout gen-prop-table-layout)

        gen-prop-border-left-width
        (igen/freq [
          [(get weights [:prop-border-left-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-left-width :alt 1] 100)
            (:nonprop-line-width gmap)]])
        gmap (assoc gmap :prop-border-left-width gen-prop-border-left-width)

        gen-nonprop-font-weight-absolute
        (igen/freq [
          [(get weights [:nonprop-font-weight-absolute :alt 0] 100)
            (gen/return "normal")]
          [(get weights [:nonprop-font-weight-absolute :alt 1] 100)
            (gen/return "bold")]
          [(get weights [:nonprop-font-weight-absolute :alt 2] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :nonprop-font-weight-absolute gen-nonprop-font-weight-absolute)

        gen-prop-font-weight
        (igen/freq [
          [(get weights [:prop-font-weight :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-weight :alt 1] 100)
            (:nonprop-font-weight-absolute gmap)]
          [(get weights [:prop-font-weight :alt 2] 100)
            (gen/return "bolder")]
          [(get weights [:prop-font-weight :alt 3] 100)
            (gen/return "lighter")]])
        gmap (assoc gmap :prop-font-weight gen-prop-font-weight)

        gen-prop-scroll-margin-block-end
        (igen/freq [
          [(get weights [:prop-scroll-margin-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-block-end :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-block-end :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-block-end gen-prop-scroll-margin-block-end)

        gen-prop-animation-timing-function
        (igen/freq [
          [(get weights [:prop-animation-timing-function :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-timing-function :alt 1] 100)
            (gen/tuple
              (:nonprop-timing-function gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-timing-function gmap))))]])
        gmap (assoc gmap :prop-animation-timing-function gen-prop-animation-timing-function)

        gen-prop-page-break-before
        (igen/freq [
          [(get weights [:prop-page-break-before :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-page-break-before :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-page-break-before :alt 2] 100)
            (gen/return "always")]
          [(get weights [:prop-page-break-before :alt 3] 100)
            (gen/return "avoid")]
          [(get weights [:prop-page-break-before :alt 4] 100)
            (gen/return "left")]
          [(get weights [:prop-page-break-before :alt 5] 100)
            (gen/return "right")]
          [(get weights [:prop-page-break-before :alt 6] 100)
            (gen/return "recto")]
          [(get weights [:prop-page-break-before :alt 7] 100)
            (gen/return "verso")]])
        gmap (assoc gmap :prop-page-break-before gen-prop-page-break-before)

        gen-nonprop-single-animation-iteration-count
        (igen/freq [
          [(get weights [:nonprop-single-animation-iteration-count :alt 0] 100)
            (gen/return "infinite")]
          [(get weights [:nonprop-single-animation-iteration-count :alt 1] 100)
            (:nonprop-number gmap)]])
        gmap (assoc gmap :nonprop-single-animation-iteration-count gen-nonprop-single-animation-iteration-count)

        gen-nonprop-single-animation
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-single-animation :plus :alt 0] 100)
              (:nonprop-time gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 1] 100)
              (:nonprop-timing-function gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 2] 100)
              (:nonprop-time gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 3] 100)
              (:nonprop-single-animation-iteration-count gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 4] 100)
              (:nonprop-single-animation-direction gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 5] 100)
              (:nonprop-single-animation-fill-mode gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 6] 100)
              (:nonprop-single-animation-play-state gmap)]
            [(get weights [:nonprop-single-animation :plus :alt 7] 100)
              (igen/freq [
                [(get weights [:nonprop-single-animation :plus :alt 7 :cat 0 :alt 0] 100)
                  (gen/return "none")]
                [(get weights [:nonprop-single-animation :plus :alt 7 :cat 0 :alt 1] 100)
                  (:nonprop-keyframes-name gmap)]])]])))
        gmap (assoc gmap :nonprop-single-animation gen-nonprop-single-animation)

        gen-prop-grid-column-start
        (igen/freq [
          [(get weights [:prop-grid-column-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-column-start :alt 1] 100)
            (:nonprop-grid-line gmap)]])
        gmap (assoc gmap :prop-grid-column-start gen-prop-grid-column-start)

        gen-prop-border-color
        (igen/freq [
          [(get weights [:prop-border-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-color :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-color :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-color gmap)]
              [(get weights [:prop-border-color :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap))]
              [(get weights [:prop-border-color :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap))]
              [(get weights [:prop-border-color :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap)
                  (:rS gmap)
                  (:nonprop-color gmap))]])]])
        gmap (assoc gmap :prop-border-color gen-prop-border-color)

        gen-nonprop-bg-layer
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-bg-layer :plus :alt 0] 100)
              (:nonprop-bg-image gmap)]
            [(get weights [:nonprop-bg-layer :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-bg-position gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (:nonprop-bg-size gmap))]))]
            [(get weights [:nonprop-bg-layer :plus :alt 2] 100)
              (:nonprop-repeat-style gmap)]
            [(get weights [:nonprop-bg-layer :plus :alt 3] 100)
              (:nonprop-attachment gmap)]
            [(get weights [:nonprop-bg-layer :plus :alt 4] 100)
              (:nonprop-box gmap)]
            [(get weights [:nonprop-bg-layer :plus :alt 5] 100)
              (:nonprop-box gmap)]])))
        gmap (assoc gmap :nonprop-bg-layer gen-nonprop-bg-layer)

        gen-prop-font-variant-position
        (igen/freq [
          [(get weights [:prop-font-variant-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-position :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-position :alt 2] 100)
            (gen/return "sub")]
          [(get weights [:prop-font-variant-position :alt 3] 100)
            (gen/return "super")]])
        gmap (assoc gmap :prop-font-variant-position gen-prop-font-variant-position)

        gen-prop-grid-column-end
        (igen/freq [
          [(get weights [:prop-grid-column-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-column-end :alt 1] 100)
            (:nonprop-grid-line gmap)]])
        gmap (assoc gmap :prop-grid-column-end gen-prop-grid-column-end)]
    gmap))

(defn- css3-generators-part-10 [gmap weights]
  (let [
        gen-prop-text-emphasis-color
        (igen/freq [
          [(get weights [:prop-text-emphasis-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-emphasis-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-text-emphasis-color gen-prop-text-emphasis-color)

        gen-prop-background-size
        (igen/freq [
          [(get weights [:prop-background-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-size :alt 1] 100)
            (gen/tuple
              (:nonprop-bg-size gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-bg-size gmap))))]])
        gmap (assoc gmap :prop-background-size gen-prop-background-size)

        gen-prop-font-variant-east-asian
        (igen/freq [
          [(get weights [:prop-font-variant-east-asian :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant-east-asian :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant-east-asian :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-variant-east-asian :alt 2 :cat 0 :plus :alt 0] 100)
                  (:nonprop-east-asian-variant-values gmap)]
                [(get weights [:prop-font-variant-east-asian :alt 2 :cat 0 :plus :alt 1] 100)
                  (:nonprop-east-asian-width-values gmap)]
                [(get weights [:prop-font-variant-east-asian :alt 2 :cat 0 :plus :alt 2] 100)
                  (gen/return "ruby")]])))]])
        gmap (assoc gmap :prop-font-variant-east-asian gen-prop-font-variant-east-asian)

        gen-prop-perspective-origin
        (igen/freq [
          [(get weights [:prop-perspective-origin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-perspective-origin :alt 1] 100)
            (:nonprop-position gmap)]])
        gmap (assoc gmap :prop-perspective-origin gen-prop-perspective-origin)

        gen-prop-animation
        (igen/freq [
          [(get weights [:prop-animation :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation :alt 1] 100)
            (gen/tuple
              (:nonprop-single-animation gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-animation gmap))))]])
        gmap (assoc gmap :prop-animation gen-prop-animation)

        gen-prop-margin-block-start
        (igen/freq [
          [(get weights [:prop-margin-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-block-start :alt 1] 100)
            (:nonprop-margin-left gmap)]])
        gmap (assoc gmap :prop-margin-block-start gen-prop-margin-block-start)

        gen-prop-translate
        (igen/freq [
          [(get weights [:prop-translate :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-translate :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-translate :alt 2] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-length gmap)]))]))]])
        gmap (assoc gmap :prop-translate gen-prop-translate)

        gen-prop-transform-style
        (igen/freq [
          [(get weights [:prop-transform-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-transform-style :alt 1] 100)
            (gen/return "flat")]
          [(get weights [:prop-transform-style :alt 2] 100)
            (gen/return "preserve-3d")]])
        gmap (assoc gmap :prop-transform-style gen-prop-transform-style)

        gen-nonprop-content-replacement
        (:nonprop-image gmap)
        gmap (assoc gmap :nonprop-content-replacement gen-nonprop-content-replacement)

        gen-prop-animation-direction
        (igen/freq [
          [(get weights [:prop-animation-direction :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-direction :alt 1] 100)
            (gen/tuple
              (:nonprop-single-animation-direction gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-animation-direction gmap))))]])
        gmap (assoc gmap :prop-animation-direction gen-prop-animation-direction)

        gen-prop-border-image-outset
        (igen/freq [
          [(get weights [:prop-border-image-outset :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image-outset :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-number gmap)]])]
              [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]]))]
              [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-number gmap)]]))]
              [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-number gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-border-image-outset :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-number gmap)]]))]])]])
        gmap (assoc gmap :prop-border-image-outset gen-prop-border-image-outset)

        gen-prop-margin-inline-start
        (igen/freq [
          [(get weights [:prop-margin-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-inline-start :alt 1] 100)
            (:nonprop-margin-left gmap)]])
        gmap (assoc gmap :prop-margin-inline-start gen-prop-margin-inline-start)

        gen-prop-scroll-snap-type
        (igen/freq [
          [(get weights [:prop-scroll-snap-type :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-snap-type :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-scroll-snap-type :alt 2] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 0 :alt 0] 100)
                  (gen/return "x")]
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 0 :alt 1] 100)
                  (gen/return "y")]
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 0 :alt 2] 100)
                  (gen/return "block")]
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 0 :alt 3] 100)
                  (gen/return "inline")]
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 0 :alt 4] 100)
                  (gen/return "both")]])
              (igen/freq [
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 1 :alt 0] 100)
                  (gen/return "mandatory")]
                [(get weights [:prop-scroll-snap-type :alt 2 :cat 1 :alt 1] 100)
                  (gen/return "proximity")]]))]])
        gmap (assoc gmap :prop-scroll-snap-type gen-prop-scroll-snap-type)

        gen-prop-scroll-padding-top
        (igen/freq [
          [(get weights [:prop-scroll-padding-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-top :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-top :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-top :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-top gen-prop-scroll-padding-top)

        gen-prop-max-height
        (igen/freq [
          [(get weights [:prop-max-height :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-max-height :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-max-height :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-max-height :alt 3] 100)
            (gen/return "none")]
          [(get weights [:prop-max-height :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-max-height :alt 5] 100)
            (gen/return "min-content")]
          [(get weights [:prop-max-height :alt 6] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-max-height :alt 7] 100)
            (gen/return "fill-available")]])
        gmap (assoc gmap :prop-max-height gen-prop-max-height)

        gen-prop-border-block-style
        (igen/freq [
          [(get weights [:prop-border-block-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-block-style gen-prop-border-block-style)

        gen-prop-border-image-repeat
        (igen/freq [
          [(get weights [:prop-border-image-repeat :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image-repeat :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "stretch")]
                  [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "repeat")]
                  [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "round")]
                  [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 0 :alt 3] 100)
                    (gen/return "space")]])]
              [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "stretch")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "repeat")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "round")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 0 :alt 3] 100)
                      (gen/return "space")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "stretch")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "repeat")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "round")]
                    [(get weights [:prop-border-image-repeat :alt 1 :cat 0 :alt 1 :cat 2 :alt 3] 100)
                      (gen/return "space")]]))]])]])
        gmap (assoc gmap :prop-border-image-repeat gen-prop-border-image-repeat)

        gen-nonprop-border-image-repeat
        (:prop-border-image-repeat gmap)
        gmap (assoc gmap :nonprop-border-image-repeat gen-nonprop-border-image-repeat)

        gen-prop-border-image-width
        (igen/freq [
          [(get weights [:prop-border-image-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image-width :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (:nonprop-length-percentage gmap)]
                  [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-number gmap)]
                  [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "auto")]])]
              [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "auto")]]))]
              [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 2 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 2 :cat 4 :alt 2] 100)
                      (gen/return "auto")]]))]
              [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 2 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 4 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (:nonprop-length-percentage gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-number gmap)]
                    [(get weights [:prop-border-image-width :alt 1 :cat 0 :alt 3 :cat 6 :alt 2] 100)
                      (gen/return "auto")]]))]])]])
        gmap (assoc gmap :prop-border-image-width gen-prop-border-image-width)

        gen-nonprop-border-image-width
        (:prop-border-image-width gmap)
        gmap (assoc gmap :nonprop-border-image-width gen-nonprop-border-image-width)

        gen-nonprop-border-image-outset
        (:prop-border-image-outset gmap)
        gmap (assoc gmap :nonprop-border-image-outset gen-nonprop-border-image-outset)

        gen-nonprop-border-image-source
        (:prop-border-image-source gmap)
        gmap (assoc gmap :nonprop-border-image-source gen-nonprop-border-image-source)

        gen-prop-border-image
        (igen/freq [
          [(get weights [:prop-border-image :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-image :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-image :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-image-source gmap)]
                [(get weights [:prop-border-image :alt 1 :plus :alt 1] 100)
                  (gen/tuple
                    (:nonprop-border-image-slice gmap)
                    (gen/one-of [
                      (gen/return "")
                      (igen/freq [
                        [(get weights [:prop-border-image :alt 1 :plus :alt 1 :cat 1 :opt :alt 0] 100)
                          (gen/tuple
                            (gen/return "/")
                            (:nonprop-border-image-width gmap))]
                        [(get weights [:prop-border-image :alt 1 :plus :alt 1 :cat 1 :opt :alt 1] 100)
                          (gen/tuple
                            (gen/return "/")
                            (gen/one-of [
                              (gen/return "")
                              (:nonprop-border-image-width gmap)])
                            (gen/return "/")
                            (:nonprop-border-image-outset gmap))]])]))]
                [(get weights [:prop-border-image :alt 1 :plus :alt 2] 100)
                  (:nonprop-border-image-repeat gmap)]])))]])
        gmap (assoc gmap :prop-border-image gen-prop-border-image)

        gen-prop-scroll-margin-right
        (igen/freq [
          [(get weights [:prop-scroll-margin-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-right :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-right :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-right gen-prop-scroll-margin-right)

        gen-nonprop-font-weight
        (:prop-font-weight gmap)
        gmap (assoc gmap :nonprop-font-weight gen-nonprop-font-weight)

        gen-prop-margin
        (igen/freq [
          [(get weights [:prop-margin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-margin :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-margin :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-margin :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-percentage gmap)]
                  [(get weights [:prop-margin :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "auto")]])]
              [(get weights [:prop-margin :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "auto")]]))]
              [(get weights [:prop-margin :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 2 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 2 :cat 4 :alt 2] 100)
                      (gen/return "auto")]]))]
              [(get weights [:prop-margin :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 0 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 2 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 4 :alt 2] 100)
                      (gen/return "auto")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-percentage gmap)]
                    [(get weights [:prop-margin :alt 1 :cat 0 :alt 3 :cat 6 :alt 2] 100)
                      (gen/return "auto")]]))]])]])
        gmap (assoc gmap :prop-margin gen-prop-margin)

        gen-nonprop-compositing-operator
        (igen/freq [
          [(get weights [:nonprop-compositing-operator :alt 0] 100)
            (gen/return "add")]
          [(get weights [:nonprop-compositing-operator :alt 1] 100)
            (gen/return "subtract")]
          [(get weights [:nonprop-compositing-operator :alt 2] 100)
            (gen/return "intersect")]
          [(get weights [:nonprop-compositing-operator :alt 3] 100)
            (gen/return "exclude")]])
        gmap (assoc gmap :nonprop-compositing-operator gen-nonprop-compositing-operator)

        gen-nonprop-mask-layer
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-mask-layer :plus :alt 0] 100)
              (:nonprop-mask-reference gmap)]
            [(get weights [:nonprop-mask-layer :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-position gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (:nonprop-bg-size gmap))]))]
            [(get weights [:nonprop-mask-layer :plus :alt 2] 100)
              (:nonprop-repeat-style gmap)]
            [(get weights [:nonprop-mask-layer :plus :alt 3] 100)
              (:nonprop-geometry-box gmap)]
            [(get weights [:nonprop-mask-layer :plus :alt 4] 100)
              (igen/freq [
                [(get weights [:nonprop-mask-layer :plus :alt 4 :cat 0 :alt 0] 100)
                  (:nonprop-geometry-box gmap)]
                [(get weights [:nonprop-mask-layer :plus :alt 4 :cat 0 :alt 1] 100)
                  (gen/return "no-clip")]])]
            [(get weights [:nonprop-mask-layer :plus :alt 5] 100)
              (:nonprop-compositing-operator gmap)]
            [(get weights [:nonprop-mask-layer :plus :alt 6] 100)
              (:nonprop-masking-mode gmap)]])))
        gmap (assoc gmap :nonprop-mask-layer gen-nonprop-mask-layer)

        gen-prop-mask-repeat
        (igen/freq [
          [(get weights [:prop-mask-repeat :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-repeat :alt 1] 100)
            (gen/tuple
              (:nonprop-repeat-style gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-repeat-style gmap))))]])
        gmap (assoc gmap :prop-mask-repeat gen-prop-mask-repeat)

        gen-prop-overflow-wrap
        (igen/freq [
          [(get weights [:prop-overflow-wrap :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-overflow-wrap :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-overflow-wrap :alt 2] 100)
            (gen/return "break-word")]
          [(get weights [:prop-overflow-wrap :alt 3] 100)
            (gen/return "anywhere")]])
        gmap (assoc gmap :prop-overflow-wrap gen-prop-overflow-wrap)

        gen-prop-border-inline-end-color
        (igen/freq [
          [(get weights [:prop-border-inline-end-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline-end-color :alt 1] 100)
            (:nonprop-border-top-color gmap)]])
        gmap (assoc gmap :prop-border-inline-end-color gen-prop-border-inline-end-color)

        gen-prop-font-kerning
        (igen/freq [
          [(get weights [:prop-font-kerning :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-kerning :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-font-kerning :alt 2] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-kerning :alt 3] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-font-kerning gen-prop-font-kerning)

        gen-prop-text-overflow
        (igen/freq [
          [(get weights [:prop-text-overflow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-overflow :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "clip")]
                  [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "ellipsis")]
                  [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (:nonprop-string gmap)]])]
              [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "clip")]
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "ellipsis")]
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (:nonprop-string gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "clip")]
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "ellipsis")]
                    [(get weights [:prop-text-overflow :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (:nonprop-string gmap)]]))]])]])
        gmap (assoc gmap :prop-text-overflow gen-prop-text-overflow)

        gen-prop-order
        (igen/freq [
          [(get weights [:prop-order :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-order :alt 1] 100)
            (:nonprop-integer gmap)]])
        gmap (assoc gmap :prop-order gen-prop-order)

        gen-nonprop-text-emphasis-color
        (:prop-text-emphasis-color gmap)
        gmap (assoc gmap :nonprop-text-emphasis-color gen-nonprop-text-emphasis-color)

        gen-prop-object-position
        (igen/freq [
          [(get weights [:prop-object-position :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-object-position :alt 1] 100)
            (:nonprop-position gmap)]])
        gmap (assoc gmap :prop-object-position gen-prop-object-position)

        gen-prop-writing-mode
        (igen/freq [
          [(get weights [:prop-writing-mode :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-writing-mode :alt 1] 100)
            (gen/return "horizontal-tb")]
          [(get weights [:prop-writing-mode :alt 2] 100)
            (gen/return "vertical-rl")]
          [(get weights [:prop-writing-mode :alt 3] 100)
            (gen/return "vertical-lr")]
          [(get weights [:prop-writing-mode :alt 4] 100)
            (gen/return "sideways-rl")]
          [(get weights [:prop-writing-mode :alt 5] 100)
            (gen/return "sideways-lr")]])
        gmap (assoc gmap :prop-writing-mode gen-prop-writing-mode)

        gen-prop-overflow-y
        (igen/freq [
          [(get weights [:prop-overflow-y :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-overflow-y :alt 1] 100)
            (gen/return "visible")]
          [(get weights [:prop-overflow-y :alt 2] 100)
            (gen/return "hidden")]
          [(get weights [:prop-overflow-y :alt 3] 100)
            (gen/return "clip")]
          [(get weights [:prop-overflow-y :alt 4] 100)
            (gen/return "scroll")]
          [(get weights [:prop-overflow-y :alt 5] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-overflow-y gen-prop-overflow-y)

        gen-prop-inset-block
        (igen/freq [
          [(get weights [:prop-inset-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-block :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-inset-block :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-top gmap)]
              [(get weights [:prop-inset-block :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-top gmap)
                  (:rS gmap)
                  (:nonprop-top gmap))]])]])
        gmap (assoc gmap :prop-inset-block gen-prop-inset-block)

        gen-prop-border-block-end-style
        (igen/freq [
          [(get weights [:prop-border-block-end-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-end-style :alt 1] 100)
            (:nonprop-border-top-style gmap)]])
        gmap (assoc gmap :prop-border-block-end-style gen-prop-border-block-end-style)

        gen-prop-border-bottom-width
        (igen/freq [
          [(get weights [:prop-border-bottom-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom-width :alt 1] 100)
            (:nonprop-line-width gmap)]])
        gmap (assoc gmap :prop-border-bottom-width gen-prop-border-bottom-width)

        gen-prop-border-block-end-color
        (igen/freq [
          [(get weights [:prop-border-block-end-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-end-color :alt 1] 100)
            (:nonprop-border-top-color gmap)]])
        gmap (assoc gmap :prop-border-block-end-color gen-prop-border-block-end-color)

        gen-prop-border-bottom
        (igen/freq [
          [(get weights [:prop-border-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-bottom :alt 1 :plus :alt 0] 100)
                  (:nonprop-line-width gmap)]
                [(get weights [:prop-border-bottom :alt 1 :plus :alt 1] 100)
                  (:nonprop-line-style gmap)]
                [(get weights [:prop-border-bottom :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-bottom gen-prop-border-bottom)

        gen-prop-page-break-inside
        (igen/freq [
          [(get weights [:prop-page-break-inside :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-page-break-inside :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-page-break-inside :alt 2] 100)
            (gen/return "avoid")]])
        gmap (assoc gmap :prop-page-break-inside gen-prop-page-break-inside)

        gen-prop-font-stretch
        (igen/freq [
          [(get weights [:prop-font-stretch :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-stretch :alt 1] 100)
            (:nonprop-font-stretch-absolute gmap)]])
        gmap (assoc gmap :prop-font-stretch gen-prop-font-stretch)

        gen-nonprop-font-stretch
        (:prop-font-stretch gmap)
        gmap (assoc gmap :nonprop-font-stretch gen-nonprop-font-stretch)

        gen-prop-text-indent
        (igen/freq [
          [(get weights [:prop-text-indent :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-indent :alt 1] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/one-of [
                (gen/return "")
                (gen/return "hanging")])
              (gen/one-of [
                (gen/return "")
                (gen/return "each-line")]))]])
        gmap (assoc gmap :prop-text-indent gen-prop-text-indent)

        gen-prop-min-inline-size
        (igen/freq [
          [(get weights [:prop-min-inline-size :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-min-inline-size :alt 1] 100)
            (:nonprop-min-width gmap)]])
        gmap (assoc gmap :prop-min-inline-size gen-prop-min-inline-size)

        gen-prop-padding-inline-start
        (igen/freq [
          [(get weights [:prop-padding-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-inline-start :alt 1] 100)
            (:nonprop-padding-left gmap)]])
        gmap (assoc gmap :prop-padding-inline-start gen-prop-padding-inline-start)

        gen-prop-font-style
        (igen/freq [
          [(get weights [:prop-font-style :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-style :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-style :alt 2] 100)
            (gen/return "italic")]
          [(get weights [:prop-font-style :alt 3] 100)
            (gen/tuple
              (gen/return "oblique")
              (gen/one-of [
                (gen/return "")
                (:nonprop-angle gmap)]))]])
        gmap (assoc gmap :prop-font-style gen-prop-font-style)]
    gmap))

(defn- css3-generators-part-11 [gmap weights]
  (let [
        gen-prop-padding
        (igen/freq [
          [(get weights [:prop-padding :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-padding :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-padding :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-padding :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-percentage gmap)]])]
              [(get weights [:prop-padding :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]]))]
              [(get weights [:prop-padding :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-percentage gmap)]]))]
              [(get weights [:prop-padding :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-padding :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-percentage gmap)]]))]])]])
        gmap (assoc gmap :prop-padding gen-prop-padding)

        gen-prop-padding-bottom
        (igen/freq [
          [(get weights [:prop-padding-bottom :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-bottom :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-padding-bottom :alt 2] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-padding-bottom gen-prop-padding-bottom)

        gen-prop-cursor
        (igen/freq [
          [(get weights [:prop-cursor :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-cursor :alt 1] 100)
            (gen/tuple
              (gen/vector
                (gen/tuple
                  (:nonprop-url gmap)
                  (gen/one-of [
                    (gen/return "")
                    (gen/tuple
                      (:nonprop-x gmap)
                      (:nonprop-y gmap))])
                  (gen/return ",")))
              (igen/freq [
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 0] 100)
                  (gen/return "auto")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 1] 100)
                  (gen/return "default")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 2] 100)
                  (gen/return "none")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 3] 100)
                  (gen/return "context-menu")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 4] 100)
                  (gen/return "help")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 5] 100)
                  (gen/return "pointer")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 6] 100)
                  (gen/return "progress")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 7] 100)
                  (gen/return "wait")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 8] 100)
                  (gen/return "cell")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 9] 100)
                  (gen/return "crosshair")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 10] 100)
                  (gen/return "text")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 11] 100)
                  (gen/return "vertical-text")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 12] 100)
                  (gen/return "alias")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 13] 100)
                  (gen/return "copy")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 14] 100)
                  (gen/return "move")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 15] 100)
                  (gen/return "no-drop")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 16] 100)
                  (gen/return "not-allowed")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 17] 100)
                  (gen/return "e-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 18] 100)
                  (gen/return "n-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 19] 100)
                  (gen/return "ne-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 20] 100)
                  (gen/return "nw-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 21] 100)
                  (gen/return "s-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 22] 100)
                  (gen/return "se-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 23] 100)
                  (gen/return "sw-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 24] 100)
                  (gen/return "w-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 25] 100)
                  (gen/return "ew-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 26] 100)
                  (gen/return "ns-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 27] 100)
                  (gen/return "nesw-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 28] 100)
                  (gen/return "nwse-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 29] 100)
                  (gen/return "col-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 30] 100)
                  (gen/return "row-resize")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 31] 100)
                  (gen/return "all-scroll")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 32] 100)
                  (gen/return "zoom-in")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 33] 100)
                  (gen/return "zoom-out")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 34] 100)
                  (gen/return "grab")]
                [(get weights [:prop-cursor :alt 1 :cat 0 :cat 1 :alt 35] 100)
                  (gen/return "grabbing")]]))]])
        gmap (assoc gmap :prop-cursor gen-prop-cursor)

        gen-prop-scroll-padding
        (igen/freq [
          [(get weights [:prop-scroll-padding :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]
                  [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (:nonprop-percentage gmap)]])]
              [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (:nonprop-percentage gmap)]]))]
              [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 0 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 2 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 4 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 4 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 2 :cat 4 :alt 2] 100)
                      (:nonprop-percentage gmap)]]))]
              [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 0 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 2 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 4 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 4 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 4 :alt 2] 100)
                      (:nonprop-percentage gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 6 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 6 :alt 1] 100)
                      (:nonprop-length gmap)]
                    [(get weights [:prop-scroll-padding :alt 1 :cat 0 :alt 3 :cat 6 :alt 2] 100)
                      (:nonprop-percentage gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-padding gen-prop-scroll-padding)

        gen-prop-animation-iteration-count
        (igen/freq [
          [(get weights [:prop-animation-iteration-count :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-animation-iteration-count :alt 1] 100)
            (gen/tuple
              (:nonprop-single-animation-iteration-count gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-single-animation-iteration-count gmap))))]])
        gmap (assoc gmap :prop-animation-iteration-count gen-prop-animation-iteration-count)

        gen-prop-margin-inline
        (igen/freq [
          [(get weights [:prop-margin-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-inline :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-margin-inline :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-margin-left gmap)]
              [(get weights [:prop-margin-inline :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-margin-left gmap)
                  (:rS gmap)
                  (:nonprop-margin-left gmap))]])]])
        gmap (assoc gmap :prop-margin-inline gen-prop-margin-inline)

        gen-prop-border-block-width
        (igen/freq [
          [(get weights [:prop-border-block-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-block-width gen-prop-border-block-width)

        gen-prop-font-feature-settings
        (igen/freq [
          [(get weights [:prop-font-feature-settings :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-feature-settings :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-feature-settings :alt 2] 100)
            (gen/tuple
              (:nonprop-feature-tag-value gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-feature-tag-value gmap))))]])
        gmap (assoc gmap :prop-font-feature-settings gen-prop-font-feature-settings)

        gen-prop-perspective
        (igen/freq [
          [(get weights [:prop-perspective :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-perspective :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-perspective :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-perspective gen-prop-perspective)

        gen-prop-justify-self
        (igen/freq [
          [(get weights [:prop-justify-self :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-justify-self :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-justify-self :alt 2] 100)
            (gen/return "normal")]
          [(get weights [:prop-justify-self :alt 3] 100)
            (gen/return "stretch")]
          [(get weights [:prop-justify-self :alt 4] 100)
            (:nonprop-baseline-position gmap)]
          [(get weights [:prop-justify-self :alt 5] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-overflow-position gmap)])
              (igen/freq [
                [(get weights [:prop-justify-self :alt 5 :cat 1 :alt 0] 100)
                  (:nonprop-self-position gmap)]
                [(get weights [:prop-justify-self :alt 5 :cat 1 :alt 1] 100)
                  (gen/return "left")]
                [(get weights [:prop-justify-self :alt 5 :cat 1 :alt 2] 100)
                  (gen/return "right")]]))]])
        gmap (assoc gmap :prop-justify-self gen-prop-justify-self)

        gen-nonprop-justify-self
        (:prop-justify-self gmap)
        gmap (assoc gmap :nonprop-justify-self gen-nonprop-justify-self)

        gen-prop-border-top-right-radius
        (igen/freq [
          [(get weights [:prop-border-top-right-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-top-right-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-top-right-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-top-right-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-top-right-radius gen-prop-border-top-right-radius)

        gen-nonprop-font-size
        (:prop-font-size gmap)
        gmap (assoc gmap :nonprop-font-size gen-nonprop-font-size)

        gen-nonprop-background-color
        (:prop-background-color gmap)
        gmap (assoc gmap :nonprop-background-color gen-nonprop-background-color)

        gen-nonprop-final-bg-layer
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-final-bg-layer :plus :alt 0] 100)
              (:nonprop-background-color gmap)]
            [(get weights [:nonprop-final-bg-layer :plus :alt 1] 100)
              (:nonprop-bg-image gmap)]
            [(get weights [:nonprop-final-bg-layer :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-bg-position gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (:nonprop-bg-size gmap))]))]
            [(get weights [:nonprop-final-bg-layer :plus :alt 3] 100)
              (:nonprop-repeat-style gmap)]
            [(get weights [:nonprop-final-bg-layer :plus :alt 4] 100)
              (:nonprop-attachment gmap)]
            [(get weights [:nonprop-final-bg-layer :plus :alt 5] 100)
              (:nonprop-box gmap)]
            [(get weights [:nonprop-final-bg-layer :plus :alt 6] 100)
              (:nonprop-box gmap)]])))
        gmap (assoc gmap :nonprop-final-bg-layer gen-nonprop-final-bg-layer)

        gen-prop-margin-right
        (igen/freq [
          [(get weights [:prop-margin-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-margin-right :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-margin-right :alt 2] 100)
            (:nonprop-percentage gmap)]
          [(get weights [:prop-margin-right :alt 3] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-margin-right gen-prop-margin-right)

        gen-nonprop-outline-width
        (:prop-outline-width gmap)
        gmap (assoc gmap :nonprop-outline-width gen-nonprop-outline-width)

        gen-prop-outline
        (igen/freq [
          [(get weights [:prop-outline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-outline :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-outline :alt 1 :cat 0 :plus :alt 0] 100)
                  (:nonprop-outline-color gmap)]
                [(get weights [:prop-outline :alt 1 :cat 0 :plus :alt 1] 100)
                  (:nonprop-outline-style gmap)]
                [(get weights [:prop-outline :alt 1 :cat 0 :plus :alt 2] 100)
                  (:nonprop-outline-width gmap)]])))]])
        gmap (assoc gmap :prop-outline gen-prop-outline)

        gen-prop-text-rendering
        (igen/freq [
          [(get weights [:prop-text-rendering :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-rendering :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-text-rendering :alt 2] 100)
            (gen/return "optimizeSpeed")]
          [(get weights [:prop-text-rendering :alt 3] 100)
            (gen/return "optimizeLegibility")]
          [(get weights [:prop-text-rendering :alt 4] 100)
            (gen/return "geometricPrecision")]])
        gmap (assoc gmap :prop-text-rendering gen-prop-text-rendering)

        gen-prop-border-block-start-color
        (igen/freq [
          [(get weights [:prop-border-block-start-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-start-color :alt 1] 100)
            (:nonprop-border-top-color gmap)]])
        gmap (assoc gmap :prop-border-block-start-color gen-prop-border-block-start-color)

        gen-prop-mask
        (igen/freq [
          [(get weights [:prop-mask :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask :alt 1] 100)
            (gen/tuple
              (:nonprop-mask-layer gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-mask-layer gmap))))]])
        gmap (assoc gmap :prop-mask gen-prop-mask)

        gen-prop-scroll-padding-inline-start
        (igen/freq [
          [(get weights [:prop-scroll-padding-inline-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-inline-start :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-inline-start :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-inline-start :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-inline-start gen-prop-scroll-padding-inline-start)

        gen-prop-mix-blend-mode
        (igen/freq [
          [(get weights [:prop-mix-blend-mode :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mix-blend-mode :alt 1] 100)
            (:nonprop-blend-mode gmap)]])
        gmap (assoc gmap :prop-mix-blend-mode gen-prop-mix-blend-mode)

        gen-prop-background-origin
        (igen/freq [
          [(get weights [:prop-background-origin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background-origin :alt 1] 100)
            (gen/tuple
              (:nonprop-box gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-box gmap))))]])
        gmap (assoc gmap :prop-background-origin gen-prop-background-origin)

        gen-prop-border-block-start-width
        (igen/freq [
          [(get weights [:prop-border-block-start-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-start-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-block-start-width gen-prop-border-block-start-width)

        gen-nonprop-font-style
        (:prop-font-style gmap)
        gmap (assoc gmap :nonprop-font-style gen-nonprop-font-style)

        gen-prop-scroll-margin-block
        (igen/freq [
          [(get weights [:prop-scroll-margin-block :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-block :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "auto")]
                  [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (:nonprop-length gmap)]])]
              [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (:nonprop-length gmap)]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "auto")]
                    [(get weights [:prop-scroll-margin-block :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (:nonprop-length gmap)]]))]])]])
        gmap (assoc gmap :prop-scroll-margin-block gen-prop-scroll-margin-block)

        gen-nonprop-display-box
        (igen/freq [
          [(get weights [:nonprop-display-box :alt 0] 100)
            (gen/return "contents")]
          [(get weights [:nonprop-display-box :alt 1] 100)
            (gen/return "none")]])
        gmap (assoc gmap :nonprop-display-box gen-nonprop-display-box)

        gen-prop-display
        (igen/freq [
          [(get weights [:prop-display :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-display :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-display :alt 1 :cat 0 :plus :alt 0] 100)
                  (:nonprop-display-outside gmap)]
                [(get weights [:prop-display :alt 1 :cat 0 :plus :alt 1] 100)
                  (:nonprop-display-inside gmap)]])))]
          [(get weights [:prop-display :alt 2] 100)
            (:nonprop-display-listitem gmap)]
          [(get weights [:prop-display :alt 3] 100)
            (:nonprop-display-internal gmap)]
          [(get weights [:prop-display :alt 4] 100)
            (:nonprop-display-box gmap)]
          [(get weights [:prop-display :alt 5] 100)
            (:nonprop-display-legacy gmap)]])
        gmap (assoc gmap :prop-display gen-prop-display)

        gen-prop-border-inline
        (igen/freq [
          [(get weights [:prop-border-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-inline :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-inline :alt 1 :plus :alt 0] 100)
                  (:nonprop-border-top-width gmap)]
                [(get weights [:prop-border-inline :alt 1 :plus :alt 1] 100)
                  (:nonprop-border-top-style gmap)]
                [(get weights [:prop-border-inline :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-inline gen-prop-border-inline)

        gen-prop-padding-inline
        (igen/freq [
          [(get weights [:prop-padding-inline :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-inline :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-padding-inline :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-padding-left gmap)]
              [(get weights [:prop-padding-inline :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-padding-left gmap)
                  (:rS gmap)
                  (:nonprop-padding-left gmap))]])]])
        gmap (assoc gmap :prop-padding-inline gen-prop-padding-inline)

        gen-prop-isolation
        (igen/freq [
          [(get weights [:prop-isolation :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-isolation :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-isolation :alt 2] 100)
            (gen/return "isolate")]])
        gmap (assoc gmap :prop-isolation gen-prop-isolation)

        gen-nonprop-content-list
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 1] 100)
              (gen/return "contents")]
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 2] 100)
              (:nonprop-image gmap)]
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 3] 100)
              (:nonprop-quote gmap)]
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 4] 100)
              (:nonprop-target gmap)]
            [(get weights [:nonprop-content-list :cat 0 :plus :alt 5] 100)
              (:func-leader gmap)]])))
        gmap (assoc gmap :nonprop-content-list gen-nonprop-content-list)

        gen-prop-content
        (igen/freq [
          [(get weights [:prop-content :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-content :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-content :alt 2] 100)
            (gen/return "none")]
          [(get weights [:prop-content :alt 3] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-content :alt 3 :cat 0 :alt 0] 100)
                  (:nonprop-content-replacement gmap)]
                [(get weights [:prop-content :alt 3 :cat 0 :alt 1] 100)
                  (:nonprop-content-list gmap)]])
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-string gmap))]))]])
        gmap (assoc gmap :prop-content gen-prop-content)

        gen-prop-text-align
        (igen/freq [
          [(get weights [:prop-text-align :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-align :alt 1] 100)
            (gen/return "start")]
          [(get weights [:prop-text-align :alt 2] 100)
            (gen/return "end")]
          [(get weights [:prop-text-align :alt 3] 100)
            (gen/return "left")]
          [(get weights [:prop-text-align :alt 4] 100)
            (gen/return "right")]
          [(get weights [:prop-text-align :alt 5] 100)
            (gen/return "center")]
          [(get weights [:prop-text-align :alt 6] 100)
            (gen/return "justify")]
          [(get weights [:prop-text-align :alt 7] 100)
            (gen/return "match-parent")]])
        gmap (assoc gmap :prop-text-align gen-prop-text-align)

        gen-prop-mask-type
        (igen/freq [
          [(get weights [:prop-mask-type :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-type :alt 1] 100)
            (gen/return "luminance")]
          [(get weights [:prop-mask-type :alt 2] 100)
            (gen/return "alpha")]])
        gmap (assoc gmap :prop-mask-type gen-prop-mask-type)

        gen-prop-counter-increment
        (igen/freq [
          [(get weights [:prop-counter-increment :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-counter-increment :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (gen/tuple
                (:nonprop-custom-ident gmap)
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-integer gmap)]))))]
          [(get weights [:prop-counter-increment :alt 2] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-counter-increment gen-prop-counter-increment)

        gen-prop-scroll-margin-top
        (igen/freq [
          [(get weights [:prop-scroll-margin-top :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-top :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-top :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-top gen-prop-scroll-margin-top)

        gen-prop-scroll-padding-block-end
        (igen/freq [
          [(get weights [:prop-scroll-padding-block-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-block-end :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-block-end :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-block-end :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-block-end gen-prop-scroll-padding-block-end)

        gen-prop-color
        (igen/freq [
          [(get weights [:prop-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-color :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :prop-color gen-prop-color)

        gen-prop-scrollbar-width
        (igen/freq [
          [(get weights [:prop-scrollbar-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scrollbar-width :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scrollbar-width :alt 2] 100)
            (gen/return "thin")]
          [(get weights [:prop-scrollbar-width :alt 3] 100)
            (gen/return "none")]])
        gmap (assoc gmap :prop-scrollbar-width gen-prop-scrollbar-width)

        gen-prop-inset-block-start
        (igen/freq [
          [(get weights [:prop-inset-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-block-start :alt 1] 100)
            (:nonprop-top gmap)]])
        gmap (assoc gmap :prop-inset-block-start gen-prop-inset-block-start)

        gen-prop-scroll-padding-right
        (igen/freq [
          [(get weights [:prop-scroll-padding-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-padding-right :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-padding-right :alt 2] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-scroll-padding-right :alt 3] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-scroll-padding-right gen-prop-scroll-padding-right)

        gen-prop-quotes
        (igen/freq [
          [(get weights [:prop-quotes :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-quotes :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-quotes :alt 2] 100)
            (gen/such-that not-empty (gen/vector
              (gen/tuple
                (:nonprop-string gmap)
                (:nonprop-string gmap))))]])
        gmap (assoc gmap :prop-quotes gen-prop-quotes)

        gen-prop-unicode-bidi
        (igen/freq [
          [(get weights [:prop-unicode-bidi :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-unicode-bidi :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-unicode-bidi :alt 2] 100)
            (gen/return "embed")]
          [(get weights [:prop-unicode-bidi :alt 3] 100)
            (gen/return "isolate")]
          [(get weights [:prop-unicode-bidi :alt 4] 100)
            (gen/return "bidi-override")]
          [(get weights [:prop-unicode-bidi :alt 5] 100)
            (gen/return "isolate-override")]
          [(get weights [:prop-unicode-bidi :alt 6] 100)
            (gen/return "plaintext")]])
        gmap (assoc gmap :prop-unicode-bidi gen-prop-unicode-bidi)

        gen-prop-inset-inline-end
        (igen/freq [
          [(get weights [:prop-inset-inline-end :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-inset-inline-end :alt 1] 100)
            (:nonprop-top gmap)]])
        gmap (assoc gmap :prop-inset-inline-end gen-prop-inset-inline-end)

        gen-prop-grid-auto-flow
        (igen/freq [
          [(get weights [:prop-grid-auto-flow :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-grid-auto-flow :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-grid-auto-flow :alt 1 :plus :alt 0] 100)
                  (igen/freq [
                    [(get weights [:prop-grid-auto-flow :alt 1 :plus :alt 0 :cat 0 :alt 0] 100)
                      (gen/return "row")]
                    [(get weights [:prop-grid-auto-flow :alt 1 :plus :alt 0 :cat 0 :alt 1] 100)
                      (gen/return "column")]])]
                [(get weights [:prop-grid-auto-flow :alt 1 :plus :alt 1] 100)
                  (gen/return "dense")]])))]])
        gmap (assoc gmap :prop-grid-auto-flow gen-prop-grid-auto-flow)

        gen-prop-mask-origin
        (igen/freq [
          [(get weights [:prop-mask-origin :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-origin :alt 1] 100)
            (gen/tuple
              (:nonprop-geometry-box gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-geometry-box gmap))))]])
        gmap (assoc gmap :prop-mask-origin gen-prop-mask-origin)

        gen-prop-place-self
        (igen/freq [
          [(get weights [:prop-place-self :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-place-self :alt 1] 100)
            (gen/tuple
              (:nonprop-align-self gmap)
              (gen/one-of [
                (gen/return "")
                (:nonprop-justify-self gmap)]))]])
        gmap (assoc gmap :prop-place-self gen-prop-place-self)

        gen-prop-border-bottom-left-radius
        (igen/freq [
          [(get weights [:prop-border-bottom-left-radius :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-bottom-left-radius :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-border-bottom-left-radius :alt 1 :cat 0 :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:prop-border-bottom-left-radius :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (:rS gmap)
                  (:nonprop-length-percentage gmap))]])]])
        gmap (assoc gmap :prop-border-bottom-left-radius gen-prop-border-bottom-left-radius)]
    gmap))

(defn- css3-generators-part-12 [gmap weights]
  (let [
        gen-prop-border-block-end-width
        (igen/freq [
          [(get weights [:prop-border-block-end-width :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-block-end-width :alt 1] 100)
            (:nonprop-border-top-width gmap)]])
        gmap (assoc gmap :prop-border-block-end-width gen-prop-border-block-end-width)

        gen-prop-background
        (igen/freq [
          [(get weights [:prop-background :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-background :alt 1] 100)
            (gen/tuple
              (gen/vector
                (gen/tuple
                  (:nonprop-bg-layer gmap)
                  (gen/return ",")))
              (:nonprop-final-bg-layer gmap))]])
        gmap (assoc gmap :prop-background gen-prop-background)

        gen-prop-z-index
        (igen/freq [
          [(get weights [:prop-z-index :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-z-index :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-z-index :alt 2] 100)
            (:nonprop-integer gmap)]])
        gmap (assoc gmap :prop-z-index gen-prop-z-index)

        gen-prop-height
        (igen/freq [
          [(get weights [:prop-height :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-height :alt 1] 100)
            (gen/tuple
              (igen/freq [
                [(get weights [:prop-height :alt 1 :cat 0 :alt 0] 100)
                  (:nonprop-length gmap)]
                [(get weights [:prop-height :alt 1 :cat 0 :alt 1] 100)
                  (:nonprop-percentage gmap)]])
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:prop-height :alt 1 :cat 1 :opt :alt 0] 100)
                    (gen/return "border-box")]
                  [(get weights [:prop-height :alt 1 :cat 1 :opt :alt 1] 100)
                    (gen/return "content-box")]])]))]
          [(get weights [:prop-height :alt 2] 100)
            (gen/return "available")]
          [(get weights [:prop-height :alt 3] 100)
            (gen/return "min-content")]
          [(get weights [:prop-height :alt 4] 100)
            (gen/return "max-content")]
          [(get weights [:prop-height :alt 5] 100)
            (gen/return "fit-content")]
          [(get weights [:prop-height :alt 6] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :prop-height gen-prop-height)

        gen-prop-font-variant
        (igen/freq [
          [(get weights [:prop-font-variant :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font-variant :alt 1] 100)
            (gen/return "normal")]
          [(get weights [:prop-font-variant :alt 2] 100)
            (gen/return "none")]
          [(get weights [:prop-font-variant :alt 3] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 0] 100)
                  (:nonprop-common-lig-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 1] 100)
                  (:nonprop-discretionary-lig-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 2] 100)
                  (:nonprop-historical-lig-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 3] 100)
                  (:nonprop-contextual-alt-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 4] 100)
                  (gen/tuple
                    (gen/return "stylistic")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 5] 100)
                  (gen/return "historical-forms")]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 6] 100)
                  (gen/tuple
                    (gen/return "styleset")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/vector
                      (gen/tuple
                        (gen/return ",")
                        (:nonprop-feature-value-name gmap)))
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 7] 100)
                  (gen/tuple
                    (gen/return "character-variant")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/vector
                      (gen/tuple
                        (gen/return ",")
                        (:nonprop-feature-value-name gmap)))
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 8] 100)
                  (gen/tuple
                    (gen/return "swash")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 9] 100)
                  (gen/tuple
                    (gen/return "ornaments")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 10] 100)
                  (gen/tuple
                    (gen/return "annotation")
                    (gen/return "(")
                    (:nonprop-feature-value-name gmap)
                    (gen/return ")"))]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11] 100)
                  (igen/freq [
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 0] 100)
                      (gen/return "small-caps")]
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 1] 100)
                      (gen/return "all-small-caps")]
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 2] 100)
                      (gen/return "petite-caps")]
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 3] 100)
                      (gen/return "all-petite-caps")]
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 4] 100)
                      (gen/return "unicase")]
                    [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 11 :cat 0 :alt 5] 100)
                      (gen/return "titling-caps")]])]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 12] 100)
                  (:nonprop-numeric-figure-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 13] 100)
                  (:nonprop-numeric-spacing-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 14] 100)
                  (:nonprop-numeric-fraction-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 15] 100)
                  (gen/return "ordinal")]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 16] 100)
                  (gen/return "slashed-zero")]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 17] 100)
                  (:nonprop-east-asian-variant-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 18] 100)
                  (:nonprop-east-asian-width-values gmap)]
                [(get weights [:prop-font-variant :alt 3 :cat 0 :plus :alt 19] 100)
                  (gen/return "ruby")]])))]])
        gmap (assoc gmap :prop-font-variant gen-prop-font-variant)

        gen-prop-mask-composite
        (igen/freq [
          [(get weights [:prop-mask-composite :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-mask-composite :alt 1] 100)
            (gen/tuple
              (:nonprop-compositing-operator gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  (:nonprop-compositing-operator gmap))))]])
        gmap (assoc gmap :prop-mask-composite gen-prop-mask-composite)

        gen-nonprop-font-variant-css21
        (igen/freq [
          [(get weights [:nonprop-font-variant-css21 :cat 0 :alt 0] 100)
            (gen/return "normal")]
          [(get weights [:nonprop-font-variant-css21 :cat 0 :alt 1] 100)
            (gen/return "small-caps")]])
        gmap (assoc gmap :nonprop-font-variant-css21 gen-nonprop-font-variant-css21)

        gen-prop-font
        (igen/freq [
          [(get weights [:prop-font :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-font :alt 1] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (gen/such-that not-empty (gen/vector
                  (igen/freq [
                    [(get weights [:prop-font :alt 1 :cat 0 :cat 0 :opt :plus :alt 0] 100)
                      (:nonprop-font-style gmap)]
                    [(get weights [:prop-font :alt 1 :cat 0 :cat 0 :opt :plus :alt 1] 100)
                      (:nonprop-font-variant-css21 gmap)]
                    [(get weights [:prop-font :alt 1 :cat 0 :cat 0 :opt :plus :alt 2] 100)
                      (:nonprop-font-weight gmap)]
                    [(get weights [:prop-font :alt 1 :cat 0 :cat 0 :opt :plus :alt 3] 100)
                      (:nonprop-font-stretch gmap)]])))])
              (:nonprop-font-size gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (:nonprop-line-height gmap))])
              (:nonprop-font-family gmap))]
          [(get weights [:prop-font :alt 2] 100)
            (gen/return "caption")]
          [(get weights [:prop-font :alt 3] 100)
            (gen/return "icon")]
          [(get weights [:prop-font :alt 4] 100)
            (gen/return "menu")]
          [(get weights [:prop-font :alt 5] 100)
            (gen/return "message-box")]
          [(get weights [:prop-font :alt 6] 100)
            (gen/return "small-caption")]
          [(get weights [:prop-font :alt 7] 100)
            (gen/return "status-bar")]])
        gmap (assoc gmap :prop-font gen-prop-font)

        gen-prop-empty-cells
        (igen/freq [
          [(get weights [:prop-empty-cells :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-empty-cells :alt 1] 100)
            (gen/return "show")]
          [(get weights [:prop-empty-cells :alt 2] 100)
            (gen/return "hide")]])
        gmap (assoc gmap :prop-empty-cells gen-prop-empty-cells)

        gen-prop-scrollbar-color
        (igen/freq [
          [(get weights [:prop-scrollbar-color :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scrollbar-color :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scrollbar-color :alt 2] 100)
            (gen/return "dark")]
          [(get weights [:prop-scrollbar-color :alt 3] 100)
            (gen/return "light")]
          [(get weights [:prop-scrollbar-color :alt 4] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (:rS gmap)
              (:nonprop-color gmap))]])
        gmap (assoc gmap :prop-scrollbar-color gen-prop-scrollbar-color)

        gen-prop-box-decoration-break
        (igen/freq [
          [(get weights [:prop-box-decoration-break :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-box-decoration-break :alt 1] 100)
            (gen/return "slice")]
          [(get weights [:prop-box-decoration-break :alt 2] 100)
            (gen/return "clone")]])
        gmap (assoc gmap :prop-box-decoration-break gen-prop-box-decoration-break)

        gen-prop-column-span
        (igen/freq [
          [(get weights [:prop-column-span :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-column-span :alt 1] 100)
            (gen/return "none")]
          [(get weights [:prop-column-span :alt 2] 100)
            (gen/return "all")]])
        gmap (assoc gmap :prop-column-span gen-prop-column-span)

        gen-prop-padding-right
        (igen/freq [
          [(get weights [:prop-padding-right :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-padding-right :alt 1] 100)
            (:nonprop-length gmap)]
          [(get weights [:prop-padding-right :alt 2] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :prop-padding-right gen-prop-padding-right)

        gen-prop-break-after
        (igen/freq [
          [(get weights [:prop-break-after :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-break-after :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-break-after :alt 2] 100)
            (gen/return "avoid")]
          [(get weights [:prop-break-after :alt 3] 100)
            (gen/return "always")]
          [(get weights [:prop-break-after :alt 4] 100)
            (gen/return "all")]
          [(get weights [:prop-break-after :alt 5] 100)
            (gen/return "avoid-page")]
          [(get weights [:prop-break-after :alt 6] 100)
            (gen/return "page")]
          [(get weights [:prop-break-after :alt 7] 100)
            (gen/return "left")]
          [(get weights [:prop-break-after :alt 8] 100)
            (gen/return "right")]
          [(get weights [:prop-break-after :alt 9] 100)
            (gen/return "recto")]
          [(get weights [:prop-break-after :alt 10] 100)
            (gen/return "verso")]
          [(get weights [:prop-break-after :alt 11] 100)
            (gen/return "avoid-column")]
          [(get weights [:prop-break-after :alt 12] 100)
            (gen/return "column")]
          [(get weights [:prop-break-after :alt 13] 100)
            (gen/return "avoid-region")]
          [(get weights [:prop-break-after :alt 14] 100)
            (gen/return "region")]])
        gmap (assoc gmap :prop-break-after gen-prop-break-after)

        gen-prop-scroll-margin-block-start
        (igen/freq [
          [(get weights [:prop-scroll-margin-block-start :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-block-start :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-block-start :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-block-start gen-prop-scroll-margin-block-start)

        gen-prop-text-emphasis
        (igen/freq [
          [(get weights [:prop-text-emphasis :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-text-emphasis :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-text-emphasis :alt 1 :plus :alt 0] 100)
                  (:nonprop-text-emphasis-style gmap)]
                [(get weights [:prop-text-emphasis :alt 1 :plus :alt 1] 100)
                  (:nonprop-text-emphasis-color gmap)]])))]])
        gmap (assoc gmap :prop-text-emphasis gen-prop-text-emphasis)

        gen-prop-scroll-snap-align
        (igen/freq [
          [(get weights [:prop-scroll-snap-align :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-snap-align :alt 1] 100)
            (igen/freq [
              [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 0] 100)
                (igen/freq [
                  [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 0 :alt 0] 100)
                    (gen/return "none")]
                  [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 0 :alt 1] 100)
                    (gen/return "start")]
                  [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 0 :alt 2] 100)
                    (gen/return "end")]
                  [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 0 :alt 3] 100)
                    (gen/return "center")]])]
              [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1] 100)
                (gen/tuple
                  (igen/freq [
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                      (gen/return "none")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                      (gen/return "start")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                      (gen/return "end")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 0 :alt 3] 100)
                      (gen/return "center")]])
                  (:rS gmap)
                  (igen/freq [
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 2 :alt 0] 100)
                      (gen/return "none")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 2 :alt 1] 100)
                      (gen/return "start")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 2 :alt 2] 100)
                      (gen/return "end")]
                    [(get weights [:prop-scroll-snap-align :alt 1 :cat 0 :alt 1 :cat 2 :alt 3] 100)
                      (gen/return "center")]]))]])]])
        gmap (assoc gmap :prop-scroll-snap-align gen-prop-scroll-snap-align)

        gen-prop-box-sizing
        (igen/freq [
          [(get weights [:prop-box-sizing :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-box-sizing :alt 1] 100)
            (gen/return "content-box")]
          [(get weights [:prop-box-sizing :alt 2] 100)
            (gen/return "border-box")]])
        gmap (assoc gmap :prop-box-sizing gen-prop-box-sizing)

        gen-prop-border-left
        (igen/freq [
          [(get weights [:prop-border-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-border-left :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:prop-border-left :alt 1 :plus :alt 0] 100)
                  (:nonprop-line-width gmap)]
                [(get weights [:prop-border-left :alt 1 :plus :alt 1] 100)
                  (:nonprop-line-style gmap)]
                [(get weights [:prop-border-left :alt 1 :plus :alt 2] 100)
                  (:nonprop-color gmap)]])))]])
        gmap (assoc gmap :prop-border-left gen-prop-border-left)

        gen-prop-object-fit
        (igen/freq [
          [(get weights [:prop-object-fit :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-object-fit :alt 1] 100)
            (gen/return "fill")]
          [(get weights [:prop-object-fit :alt 2] 100)
            (gen/return "contain")]
          [(get weights [:prop-object-fit :alt 3] 100)
            (gen/return "cover")]
          [(get weights [:prop-object-fit :alt 4] 100)
            (gen/return "none")]
          [(get weights [:prop-object-fit :alt 5] 100)
            (gen/return "scale-down")]])
        gmap (assoc gmap :prop-object-fit gen-prop-object-fit)

        gen-prop-scroll-margin-left
        (igen/freq [
          [(get weights [:prop-scroll-margin-left :alt 0] 100)
            (:nonprop-all gmap)]
          [(get weights [:prop-scroll-margin-left :alt 1] 100)
            (gen/return "auto")]
          [(get weights [:prop-scroll-margin-left :alt 2] 100)
            (:nonprop-length gmap)]])
        gmap (assoc gmap :prop-scroll-margin-left gen-prop-scroll-margin-left)

        gen-css-known
        (igen/freq [
          [(get weights [:css-known :alt 0] 100)
            (gen/tuple
              (gen/return "align-content")
              (gen/return ":")
              (:prop-align-content gmap))]
          [(get weights [:css-known :alt 1] 100)
            (gen/tuple
              (gen/return "align-items")
              (gen/return ":")
              (:prop-align-items gmap))]
          [(get weights [:css-known :alt 2] 100)
            (gen/tuple
              (gen/return "align-self")
              (gen/return ":")
              (:prop-align-self gmap))]
          [(get weights [:css-known :alt 3] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return ":")
              (:prop-all gmap))]
          [(get weights [:css-known :alt 4] 100)
            (gen/tuple
              (gen/return "animation")
              (gen/return ":")
              (:prop-animation gmap))]
          [(get weights [:css-known :alt 5] 100)
            (gen/tuple
              (gen/return "animation-delay")
              (gen/return ":")
              (:prop-animation-delay gmap))]
          [(get weights [:css-known :alt 6] 100)
            (gen/tuple
              (gen/return "animation-direction")
              (gen/return ":")
              (:prop-animation-direction gmap))]
          [(get weights [:css-known :alt 7] 100)
            (gen/tuple
              (gen/return "animation-duration")
              (gen/return ":")
              (:prop-animation-duration gmap))]
          [(get weights [:css-known :alt 8] 100)
            (gen/tuple
              (gen/return "animation-fill-mode")
              (gen/return ":")
              (:prop-animation-fill-mode gmap))]
          [(get weights [:css-known :alt 9] 100)
            (gen/tuple
              (gen/return "animation-iteration-count")
              (gen/return ":")
              (:prop-animation-iteration-count gmap))]
          [(get weights [:css-known :alt 10] 100)
            (gen/tuple
              (gen/return "animation-name")
              (gen/return ":")
              (:prop-animation-name gmap))]
          [(get weights [:css-known :alt 11] 100)
            (gen/tuple
              (gen/return "animation-play-state")
              (gen/return ":")
              (:prop-animation-play-state gmap))]
          [(get weights [:css-known :alt 12] 100)
            (gen/tuple
              (gen/return "animation-timing-function")
              (gen/return ":")
              (:prop-animation-timing-function gmap))]
          [(get weights [:css-known :alt 13] 100)
            (gen/tuple
              (gen/return "backface-visibility")
              (gen/return ":")
              (:prop-backface-visibility gmap))]
          [(get weights [:css-known :alt 14] 100)
            (gen/tuple
              (gen/return "background")
              (gen/return ":")
              (:prop-background gmap))]
          [(get weights [:css-known :alt 15] 100)
            (gen/tuple
              (gen/return "background-attachment")
              (gen/return ":")
              (:prop-background-attachment gmap))]
          [(get weights [:css-known :alt 16] 100)
            (gen/tuple
              (gen/return "background-blend-mode")
              (gen/return ":")
              (:prop-background-blend-mode gmap))]
          [(get weights [:css-known :alt 17] 100)
            (gen/tuple
              (gen/return "background-clip")
              (gen/return ":")
              (:prop-background-clip gmap))]
          [(get weights [:css-known :alt 18] 100)
            (gen/tuple
              (gen/return "background-color")
              (gen/return ":")
              (:prop-background-color gmap))]
          [(get weights [:css-known :alt 19] 100)
            (gen/tuple
              (gen/return "background-image")
              (gen/return ":")
              (:prop-background-image gmap))]
          [(get weights [:css-known :alt 20] 100)
            (gen/tuple
              (gen/return "background-origin")
              (gen/return ":")
              (:prop-background-origin gmap))]
          [(get weights [:css-known :alt 21] 100)
            (gen/tuple
              (gen/return "background-position")
              (gen/return ":")
              (:prop-background-position gmap))]
          [(get weights [:css-known :alt 22] 100)
            (gen/tuple
              (gen/return "background-repeat")
              (gen/return ":")
              (:prop-background-repeat gmap))]
          [(get weights [:css-known :alt 23] 100)
            (gen/tuple
              (gen/return "background-size")
              (gen/return ":")
              (:prop-background-size gmap))]
          [(get weights [:css-known :alt 24] 100)
            (gen/tuple
              (gen/return "block-size")
              (gen/return ":")
              (:prop-block-size gmap))]
          [(get weights [:css-known :alt 25] 100)
            (gen/tuple
              (gen/return "border")
              (gen/return ":")
              (:prop-border gmap))]
          [(get weights [:css-known :alt 26] 100)
            (gen/tuple
              (gen/return "border-block")
              (gen/return ":")
              (:prop-border-block gmap))]
          [(get weights [:css-known :alt 27] 100)
            (gen/tuple
              (gen/return "border-block-color")
              (gen/return ":")
              (:prop-border-block-color gmap))]
          [(get weights [:css-known :alt 28] 100)
            (gen/tuple
              (gen/return "border-block-end")
              (gen/return ":")
              (:prop-border-block-end gmap))]
          [(get weights [:css-known :alt 29] 100)
            (gen/tuple
              (gen/return "border-block-end-color")
              (gen/return ":")
              (:prop-border-block-end-color gmap))]
          [(get weights [:css-known :alt 30] 100)
            (gen/tuple
              (gen/return "border-block-end-style")
              (gen/return ":")
              (:prop-border-block-end-style gmap))]
          [(get weights [:css-known :alt 31] 100)
            (gen/tuple
              (gen/return "border-block-end-width")
              (gen/return ":")
              (:prop-border-block-end-width gmap))]
          [(get weights [:css-known :alt 32] 100)
            (gen/tuple
              (gen/return "border-block-start")
              (gen/return ":")
              (:prop-border-block-start gmap))]
          [(get weights [:css-known :alt 33] 100)
            (gen/tuple
              (gen/return "border-block-start-color")
              (gen/return ":")
              (:prop-border-block-start-color gmap))]
          [(get weights [:css-known :alt 34] 100)
            (gen/tuple
              (gen/return "border-block-start-style")
              (gen/return ":")
              (:prop-border-block-start-style gmap))]
          [(get weights [:css-known :alt 35] 100)
            (gen/tuple
              (gen/return "border-block-start-width")
              (gen/return ":")
              (:prop-border-block-start-width gmap))]
          [(get weights [:css-known :alt 36] 100)
            (gen/tuple
              (gen/return "border-block-style")
              (gen/return ":")
              (:prop-border-block-style gmap))]
          [(get weights [:css-known :alt 37] 100)
            (gen/tuple
              (gen/return "border-block-width")
              (gen/return ":")
              (:prop-border-block-width gmap))]
          [(get weights [:css-known :alt 38] 100)
            (gen/tuple
              (gen/return "border-bottom")
              (gen/return ":")
              (:prop-border-bottom gmap))]
          [(get weights [:css-known :alt 39] 100)
            (gen/tuple
              (gen/return "border-bottom-color")
              (gen/return ":")
              (:prop-border-bottom-color gmap))]
          [(get weights [:css-known :alt 40] 100)
            (gen/tuple
              (gen/return "border-bottom-left-radius")
              (gen/return ":")
              (:prop-border-bottom-left-radius gmap))]
          [(get weights [:css-known :alt 41] 100)
            (gen/tuple
              (gen/return "border-bottom-right-radius")
              (gen/return ":")
              (:prop-border-bottom-right-radius gmap))]
          [(get weights [:css-known :alt 42] 100)
            (gen/tuple
              (gen/return "border-bottom-style")
              (gen/return ":")
              (:prop-border-bottom-style gmap))]
          [(get weights [:css-known :alt 43] 100)
            (gen/tuple
              (gen/return "border-bottom-width")
              (gen/return ":")
              (:prop-border-bottom-width gmap))]
          [(get weights [:css-known :alt 44] 100)
            (gen/tuple
              (gen/return "border-collapse")
              (gen/return ":")
              (:prop-border-collapse gmap))]
          [(get weights [:css-known :alt 45] 100)
            (gen/tuple
              (gen/return "border-color")
              (gen/return ":")
              (:prop-border-color gmap))]
          [(get weights [:css-known :alt 46] 100)
            (gen/tuple
              (gen/return "border-end-end-radius")
              (gen/return ":")
              (:prop-border-end-end-radius gmap))]
          [(get weights [:css-known :alt 47] 100)
            (gen/tuple
              (gen/return "border-end-start-radius")
              (gen/return ":")
              (:prop-border-end-start-radius gmap))]
          [(get weights [:css-known :alt 48] 100)
            (gen/tuple
              (gen/return "border-image")
              (gen/return ":")
              (:prop-border-image gmap))]
          [(get weights [:css-known :alt 49] 100)
            (gen/tuple
              (gen/return "border-image-outset")
              (gen/return ":")
              (:prop-border-image-outset gmap))]
          [(get weights [:css-known :alt 50] 100)
            (gen/tuple
              (gen/return "border-image-repeat")
              (gen/return ":")
              (:prop-border-image-repeat gmap))]
          [(get weights [:css-known :alt 51] 100)
            (gen/tuple
              (gen/return "border-image-slice")
              (gen/return ":")
              (:prop-border-image-slice gmap))]
          [(get weights [:css-known :alt 52] 100)
            (gen/tuple
              (gen/return "border-image-source")
              (gen/return ":")
              (:prop-border-image-source gmap))]
          [(get weights [:css-known :alt 53] 100)
            (gen/tuple
              (gen/return "border-image-width")
              (gen/return ":")
              (:prop-border-image-width gmap))]
          [(get weights [:css-known :alt 54] 100)
            (gen/tuple
              (gen/return "border-inline")
              (gen/return ":")
              (:prop-border-inline gmap))]
          [(get weights [:css-known :alt 55] 100)
            (gen/tuple
              (gen/return "border-inline-color")
              (gen/return ":")
              (:prop-border-inline-color gmap))]
          [(get weights [:css-known :alt 56] 100)
            (gen/tuple
              (gen/return "border-inline-end")
              (gen/return ":")
              (:prop-border-inline-end gmap))]
          [(get weights [:css-known :alt 57] 100)
            (gen/tuple
              (gen/return "border-inline-end-color")
              (gen/return ":")
              (:prop-border-inline-end-color gmap))]
          [(get weights [:css-known :alt 58] 100)
            (gen/tuple
              (gen/return "border-inline-end-style")
              (gen/return ":")
              (:prop-border-inline-end-style gmap))]
          [(get weights [:css-known :alt 59] 100)
            (gen/tuple
              (gen/return "border-inline-end-width")
              (gen/return ":")
              (:prop-border-inline-end-width gmap))]
          [(get weights [:css-known :alt 60] 100)
            (gen/tuple
              (gen/return "border-inline-start")
              (gen/return ":")
              (:prop-border-inline-start gmap))]
          [(get weights [:css-known :alt 61] 100)
            (gen/tuple
              (gen/return "border-inline-start-color")
              (gen/return ":")
              (:prop-border-inline-start-color gmap))]
          [(get weights [:css-known :alt 62] 100)
            (gen/tuple
              (gen/return "border-inline-start-style")
              (gen/return ":")
              (:prop-border-inline-start-style gmap))]
          [(get weights [:css-known :alt 63] 100)
            (gen/tuple
              (gen/return "border-inline-start-width")
              (gen/return ":")
              (:prop-border-inline-start-width gmap))]
          [(get weights [:css-known :alt 64] 100)
            (gen/tuple
              (gen/return "border-inline-style")
              (gen/return ":")
              (:prop-border-inline-style gmap))]
          [(get weights [:css-known :alt 65] 100)
            (gen/tuple
              (gen/return "border-inline-width")
              (gen/return ":")
              (:prop-border-inline-width gmap))]
          [(get weights [:css-known :alt 66] 100)
            (gen/tuple
              (gen/return "border-left")
              (gen/return ":")
              (:prop-border-left gmap))]
          [(get weights [:css-known :alt 67] 100)
            (gen/tuple
              (gen/return "border-left-color")
              (gen/return ":")
              (:prop-border-left-color gmap))]
          [(get weights [:css-known :alt 68] 100)
            (gen/tuple
              (gen/return "border-left-style")
              (gen/return ":")
              (:prop-border-left-style gmap))]
          [(get weights [:css-known :alt 69] 100)
            (gen/tuple
              (gen/return "border-left-width")
              (gen/return ":")
              (:prop-border-left-width gmap))]
          [(get weights [:css-known :alt 70] 100)
            (gen/tuple
              (gen/return "border-radius")
              (gen/return ":")
              (:prop-border-radius gmap))]
          [(get weights [:css-known :alt 71] 100)
            (gen/tuple
              (gen/return "border-right")
              (gen/return ":")
              (:prop-border-right gmap))]
          [(get weights [:css-known :alt 72] 100)
            (gen/tuple
              (gen/return "border-right-color")
              (gen/return ":")
              (:prop-border-right-color gmap))]
          [(get weights [:css-known :alt 73] 100)
            (gen/tuple
              (gen/return "border-right-style")
              (gen/return ":")
              (:prop-border-right-style gmap))]
          [(get weights [:css-known :alt 74] 100)
            (gen/tuple
              (gen/return "border-right-width")
              (gen/return ":")
              (:prop-border-right-width gmap))]
          [(get weights [:css-known :alt 75] 100)
            (gen/tuple
              (gen/return "border-spacing")
              (gen/return ":")
              (:prop-border-spacing gmap))]
          [(get weights [:css-known :alt 76] 100)
            (gen/tuple
              (gen/return "border-start-end-radius")
              (gen/return ":")
              (:prop-border-start-end-radius gmap))]
          [(get weights [:css-known :alt 77] 100)
            (gen/tuple
              (gen/return "border-start-start-radius")
              (gen/return ":")
              (:prop-border-start-start-radius gmap))]
          [(get weights [:css-known :alt 78] 100)
            (gen/tuple
              (gen/return "border-style")
              (gen/return ":")
              (:prop-border-style gmap))]
          [(get weights [:css-known :alt 79] 100)
            (gen/tuple
              (gen/return "border-top")
              (gen/return ":")
              (:prop-border-top gmap))]
          [(get weights [:css-known :alt 80] 100)
            (gen/tuple
              (gen/return "border-top-color")
              (gen/return ":")
              (:prop-border-top-color gmap))]
          [(get weights [:css-known :alt 81] 100)
            (gen/tuple
              (gen/return "border-top-left-radius")
              (gen/return ":")
              (:prop-border-top-left-radius gmap))]
          [(get weights [:css-known :alt 82] 100)
            (gen/tuple
              (gen/return "border-top-right-radius")
              (gen/return ":")
              (:prop-border-top-right-radius gmap))]
          [(get weights [:css-known :alt 83] 100)
            (gen/tuple
              (gen/return "border-top-style")
              (gen/return ":")
              (:prop-border-top-style gmap))]
          [(get weights [:css-known :alt 84] 100)
            (gen/tuple
              (gen/return "border-top-width")
              (gen/return ":")
              (:prop-border-top-width gmap))]
          [(get weights [:css-known :alt 85] 100)
            (gen/tuple
              (gen/return "border-width")
              (gen/return ":")
              (:prop-border-width gmap))]
          [(get weights [:css-known :alt 86] 100)
            (gen/tuple
              (gen/return "bottom")
              (gen/return ":")
              (:prop-bottom gmap))]
          [(get weights [:css-known :alt 87] 100)
            (gen/tuple
              (gen/return "box-decoration-break")
              (gen/return ":")
              (:prop-box-decoration-break gmap))]
          [(get weights [:css-known :alt 88] 100)
            (gen/tuple
              (gen/return "box-shadow")
              (gen/return ":")
              (:prop-box-shadow gmap))]
          [(get weights [:css-known :alt 89] 100)
            (gen/tuple
              (gen/return "box-sizing")
              (gen/return ":")
              (:prop-box-sizing gmap))]
          [(get weights [:css-known :alt 90] 100)
            (gen/tuple
              (gen/return "break-after")
              (gen/return ":")
              (:prop-break-after gmap))]
          [(get weights [:css-known :alt 91] 100)
            (gen/tuple
              (gen/return "break-before")
              (gen/return ":")
              (:prop-break-before gmap))]
          [(get weights [:css-known :alt 92] 100)
            (gen/tuple
              (gen/return "break-inside")
              (gen/return ":")
              (:prop-break-inside gmap))]
          [(get weights [:css-known :alt 93] 100)
            (gen/tuple
              (gen/return "caption-side")
              (gen/return ":")
              (:prop-caption-side gmap))]
          [(get weights [:css-known :alt 94] 100)
            (gen/tuple
              (gen/return "caret-color")
              (gen/return ":")
              (:prop-caret-color gmap))]
          [(get weights [:css-known :alt 95] 100)
            (gen/tuple
              (gen/return "clear")
              (gen/return ":")
              (:prop-clear gmap))]
          [(get weights [:css-known :alt 96] 100)
            (gen/tuple
              (gen/return "clip")
              (gen/return ":")
              (:prop-clip gmap))]
          [(get weights [:css-known :alt 97] 100)
            (gen/tuple
              (gen/return "clip-path")
              (gen/return ":")
              (:prop-clip-path gmap))]
          [(get weights [:css-known :alt 98] 100)
            (gen/tuple
              (gen/return "color")
              (gen/return ":")
              (:prop-color gmap))]
          [(get weights [:css-known :alt 99] 100)
            (gen/tuple
              (gen/return "color-adjust")
              (gen/return ":")
              (:prop-color-adjust gmap))]
          [(get weights [:css-known :alt 100] 100)
            (gen/tuple
              (gen/return "column-count")
              (gen/return ":")
              (:prop-column-count gmap))]
          [(get weights [:css-known :alt 101] 100)
            (gen/tuple
              (gen/return "column-fill")
              (gen/return ":")
              (:prop-column-fill gmap))]
          [(get weights [:css-known :alt 102] 100)
            (gen/tuple
              (gen/return "column-gap")
              (gen/return ":")
              (:prop-column-gap gmap))]
          [(get weights [:css-known :alt 103] 100)
            (gen/tuple
              (gen/return "column-rule")
              (gen/return ":")
              (:prop-column-rule gmap))]
          [(get weights [:css-known :alt 104] 100)
            (gen/tuple
              (gen/return "column-rule-color")
              (gen/return ":")
              (:prop-column-rule-color gmap))]
          [(get weights [:css-known :alt 105] 100)
            (gen/tuple
              (gen/return "column-rule-style")
              (gen/return ":")
              (:prop-column-rule-style gmap))]
          [(get weights [:css-known :alt 106] 100)
            (gen/tuple
              (gen/return "column-rule-width")
              (gen/return ":")
              (:prop-column-rule-width gmap))]
          [(get weights [:css-known :alt 107] 100)
            (gen/tuple
              (gen/return "column-span")
              (gen/return ":")
              (:prop-column-span gmap))]
          [(get weights [:css-known :alt 108] 100)
            (gen/tuple
              (gen/return "column-width")
              (gen/return ":")
              (:prop-column-width gmap))]
          [(get weights [:css-known :alt 109] 100)
            (gen/tuple
              (gen/return "columns")
              (gen/return ":")
              (:prop-columns gmap))]
          [(get weights [:css-known :alt 110] 100)
            (gen/tuple
              (gen/return "content")
              (gen/return ":")
              (:prop-content gmap))]
          [(get weights [:css-known :alt 111] 100)
            (gen/tuple
              (gen/return "counter-increment")
              (gen/return ":")
              (:prop-counter-increment gmap))]
          [(get weights [:css-known :alt 112] 100)
            (gen/tuple
              (gen/return "counter-reset")
              (gen/return ":")
              (:prop-counter-reset gmap))]
          [(get weights [:css-known :alt 113] 100)
            (gen/tuple
              (gen/return "cursor")
              (gen/return ":")
              (:prop-cursor gmap))]
          [(get weights [:css-known :alt 114] 100)
            (gen/tuple
              (gen/return "direction")
              (gen/return ":")
              (:prop-direction gmap))]
          [(get weights [:css-known :alt 115] 100)
            (gen/tuple
              (gen/return "display")
              (gen/return ":")
              (:prop-display gmap))]
          [(get weights [:css-known :alt 116] 100)
            (gen/tuple
              (gen/return "empty-cells")
              (gen/return ":")
              (:prop-empty-cells gmap))]
          [(get weights [:css-known :alt 117] 100)
            (gen/tuple
              (gen/return "filter")
              (gen/return ":")
              (:prop-filter gmap))]
          [(get weights [:css-known :alt 118] 100)
            (gen/tuple
              (gen/return "flex")
              (gen/return ":")
              (:prop-flex gmap))]
          [(get weights [:css-known :alt 119] 100)
            (gen/tuple
              (gen/return "flex-basis")
              (gen/return ":")
              (:prop-flex-basis gmap))]
          [(get weights [:css-known :alt 120] 100)
            (gen/tuple
              (gen/return "flex-direction")
              (gen/return ":")
              (:prop-flex-direction gmap))]
          [(get weights [:css-known :alt 121] 100)
            (gen/tuple
              (gen/return "flex-flow")
              (gen/return ":")
              (:prop-flex-flow gmap))]
          [(get weights [:css-known :alt 122] 100)
            (gen/tuple
              (gen/return "flex-grow")
              (gen/return ":")
              (:prop-flex-grow gmap))]
          [(get weights [:css-known :alt 123] 100)
            (gen/tuple
              (gen/return "flex-shrink")
              (gen/return ":")
              (:prop-flex-shrink gmap))]
          [(get weights [:css-known :alt 124] 100)
            (gen/tuple
              (gen/return "flex-wrap")
              (gen/return ":")
              (:prop-flex-wrap gmap))]
          [(get weights [:css-known :alt 125] 100)
            (gen/tuple
              (gen/return "float")
              (gen/return ":")
              (:prop-float gmap))]
          [(get weights [:css-known :alt 126] 100)
            (gen/tuple
              (gen/return "font")
              (gen/return ":")
              (:prop-font gmap))]
          [(get weights [:css-known :alt 127] 100)
            (gen/tuple
              (gen/return "font-family")
              (gen/return ":")
              (:prop-font-family gmap))]
          [(get weights [:css-known :alt 128] 100)
            (gen/tuple
              (gen/return "font-feature-settings")
              (gen/return ":")
              (:prop-font-feature-settings gmap))]
          [(get weights [:css-known :alt 129] 100)
            (gen/tuple
              (gen/return "font-kerning")
              (gen/return ":")
              (:prop-font-kerning gmap))]
          [(get weights [:css-known :alt 130] 100)
            (gen/tuple
              (gen/return "font-language-override")
              (gen/return ":")
              (:prop-font-language-override gmap))]
          [(get weights [:css-known :alt 131] 100)
            (gen/tuple
              (gen/return "font-optical-sizing")
              (gen/return ":")
              (:prop-font-optical-sizing gmap))]
          [(get weights [:css-known :alt 132] 100)
            (gen/tuple
              (gen/return "font-size")
              (gen/return ":")
              (:prop-font-size gmap))]
          [(get weights [:css-known :alt 133] 100)
            (gen/tuple
              (gen/return "font-size-adjust")
              (gen/return ":")
              (:prop-font-size-adjust gmap))]
          [(get weights [:css-known :alt 134] 100)
            (gen/tuple
              (gen/return "font-stretch")
              (gen/return ":")
              (:prop-font-stretch gmap))]
          [(get weights [:css-known :alt 135] 100)
            (gen/tuple
              (gen/return "font-style")
              (gen/return ":")
              (:prop-font-style gmap))]
          [(get weights [:css-known :alt 136] 100)
            (gen/tuple
              (gen/return "font-synthesis")
              (gen/return ":")
              (:prop-font-synthesis gmap))]
          [(get weights [:css-known :alt 137] 100)
            (gen/tuple
              (gen/return "font-variant")
              (gen/return ":")
              (:prop-font-variant gmap))]
          [(get weights [:css-known :alt 138] 100)
            (gen/tuple
              (gen/return "font-variant-alternates")
              (gen/return ":")
              (:prop-font-variant-alternates gmap))]
          [(get weights [:css-known :alt 139] 100)
            (gen/tuple
              (gen/return "font-variant-caps")
              (gen/return ":")
              (:prop-font-variant-caps gmap))]
          [(get weights [:css-known :alt 140] 100)
            (gen/tuple
              (gen/return "font-variant-east-asian")
              (gen/return ":")
              (:prop-font-variant-east-asian gmap))]
          [(get weights [:css-known :alt 141] 100)
            (gen/tuple
              (gen/return "font-variant-ligatures")
              (gen/return ":")
              (:prop-font-variant-ligatures gmap))]
          [(get weights [:css-known :alt 142] 100)
            (gen/tuple
              (gen/return "font-variant-numeric")
              (gen/return ":")
              (:prop-font-variant-numeric gmap))]
          [(get weights [:css-known :alt 143] 100)
            (gen/tuple
              (gen/return "font-variant-position")
              (gen/return ":")
              (:prop-font-variant-position gmap))]
          [(get weights [:css-known :alt 144] 100)
            (gen/tuple
              (gen/return "font-weight")
              (gen/return ":")
              (:prop-font-weight gmap))]
          [(get weights [:css-known :alt 145] 100)
            (gen/tuple
              (gen/return "gap")
              (gen/return ":")
              (:prop-gap gmap))]
          [(get weights [:css-known :alt 146] 100)
            (gen/tuple
              (gen/return "grid")
              (gen/return ":")
              (:prop-grid gmap))]
          [(get weights [:css-known :alt 147] 100)
            (gen/tuple
              (gen/return "grid-area")
              (gen/return ":")
              (:prop-grid-area gmap))]
          [(get weights [:css-known :alt 148] 100)
            (gen/tuple
              (gen/return "grid-auto-columns")
              (gen/return ":")
              (:prop-grid-auto-columns gmap))]
          [(get weights [:css-known :alt 149] 100)
            (gen/tuple
              (gen/return "grid-auto-flow")
              (gen/return ":")
              (:prop-grid-auto-flow gmap))]
          [(get weights [:css-known :alt 150] 100)
            (gen/tuple
              (gen/return "grid-auto-rows")
              (gen/return ":")
              (:prop-grid-auto-rows gmap))]
          [(get weights [:css-known :alt 151] 100)
            (gen/tuple
              (gen/return "grid-column")
              (gen/return ":")
              (:prop-grid-column gmap))]
          [(get weights [:css-known :alt 152] 100)
            (gen/tuple
              (gen/return "grid-column-end")
              (gen/return ":")
              (:prop-grid-column-end gmap))]
          [(get weights [:css-known :alt 153] 100)
            (gen/tuple
              (gen/return "grid-column-start")
              (gen/return ":")
              (:prop-grid-column-start gmap))]
          [(get weights [:css-known :alt 154] 100)
            (gen/tuple
              (gen/return "grid-row")
              (gen/return ":")
              (:prop-grid-row gmap))]
          [(get weights [:css-known :alt 155] 100)
            (gen/tuple
              (gen/return "grid-row-end")
              (gen/return ":")
              (:prop-grid-row-end gmap))]
          [(get weights [:css-known :alt 156] 100)
            (gen/tuple
              (gen/return "grid-row-start")
              (gen/return ":")
              (:prop-grid-row-start gmap))]
          [(get weights [:css-known :alt 157] 100)
            (gen/tuple
              (gen/return "grid-template")
              (gen/return ":")
              (:prop-grid-template gmap))]
          [(get weights [:css-known :alt 158] 100)
            (gen/tuple
              (gen/return "grid-template-areas")
              (gen/return ":")
              (:prop-grid-template-areas gmap))]
          [(get weights [:css-known :alt 159] 100)
            (gen/tuple
              (gen/return "grid-template-columns")
              (gen/return ":")
              (:prop-grid-template-columns gmap))]
          [(get weights [:css-known :alt 160] 100)
            (gen/tuple
              (gen/return "grid-template-rows")
              (gen/return ":")
              (:prop-grid-template-rows gmap))]
          [(get weights [:css-known :alt 161] 100)
            (gen/tuple
              (gen/return "hanging-punctuation")
              (gen/return ":")
              (:prop-hanging-punctuation gmap))]
          [(get weights [:css-known :alt 162] 100)
            (gen/tuple
              (gen/return "height")
              (gen/return ":")
              (:prop-height gmap))]
          [(get weights [:css-known :alt 163] 100)
            (gen/tuple
              (gen/return "hyphens")
              (gen/return ":")
              (:prop-hyphens gmap))]
          [(get weights [:css-known :alt 164] 100)
            (gen/tuple
              (gen/return "image-orientation")
              (gen/return ":")
              (:prop-image-orientation gmap))]
          [(get weights [:css-known :alt 165] 100)
            (gen/tuple
              (gen/return "image-rendering")
              (gen/return ":")
              (:prop-image-rendering gmap))]
          [(get weights [:css-known :alt 166] 100)
            (gen/tuple
              (gen/return "inline-size")
              (gen/return ":")
              (:prop-inline-size gmap))]
          [(get weights [:css-known :alt 167] 100)
            (gen/tuple
              (gen/return "inset")
              (gen/return ":")
              (:prop-inset gmap))]
          [(get weights [:css-known :alt 168] 100)
            (gen/tuple
              (gen/return "inset-block")
              (gen/return ":")
              (:prop-inset-block gmap))]
          [(get weights [:css-known :alt 169] 100)
            (gen/tuple
              (gen/return "inset-block-end")
              (gen/return ":")
              (:prop-inset-block-end gmap))]
          [(get weights [:css-known :alt 170] 100)
            (gen/tuple
              (gen/return "inset-block-start")
              (gen/return ":")
              (:prop-inset-block-start gmap))]
          [(get weights [:css-known :alt 171] 100)
            (gen/tuple
              (gen/return "inset-inline")
              (gen/return ":")
              (:prop-inset-inline gmap))]
          [(get weights [:css-known :alt 172] 100)
            (gen/tuple
              (gen/return "inset-inline-end")
              (gen/return ":")
              (:prop-inset-inline-end gmap))]
          [(get weights [:css-known :alt 173] 100)
            (gen/tuple
              (gen/return "inset-inline-start")
              (gen/return ":")
              (:prop-inset-inline-start gmap))]
          [(get weights [:css-known :alt 174] 100)
            (gen/tuple
              (gen/return "isolation")
              (gen/return ":")
              (:prop-isolation gmap))]
          [(get weights [:css-known :alt 175] 100)
            (gen/tuple
              (gen/return "justify-content")
              (gen/return ":")
              (:prop-justify-content gmap))]
          [(get weights [:css-known :alt 176] 100)
            (gen/tuple
              (gen/return "justify-items")
              (gen/return ":")
              (:prop-justify-items gmap))]
          [(get weights [:css-known :alt 177] 100)
            (gen/tuple
              (gen/return "justify-self")
              (gen/return ":")
              (:prop-justify-self gmap))]
          [(get weights [:css-known :alt 178] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return ":")
              (:prop-left gmap))]
          [(get weights [:css-known :alt 179] 100)
            (gen/tuple
              (gen/return "letter-spacing")
              (gen/return ":")
              (:prop-letter-spacing gmap))]
          [(get weights [:css-known :alt 180] 100)
            (gen/tuple
              (gen/return "line-break")
              (gen/return ":")
              (:prop-line-break gmap))]
          [(get weights [:css-known :alt 181] 100)
            (gen/tuple
              (gen/return "line-height")
              (gen/return ":")
              (:prop-line-height gmap))]
          [(get weights [:css-known :alt 182] 100)
            (gen/tuple
              (gen/return "list-style")
              (gen/return ":")
              (:prop-list-style gmap))]
          [(get weights [:css-known :alt 183] 100)
            (gen/tuple
              (gen/return "list-style-image")
              (gen/return ":")
              (:prop-list-style-image gmap))]
          [(get weights [:css-known :alt 184] 100)
            (gen/tuple
              (gen/return "list-style-position")
              (gen/return ":")
              (:prop-list-style-position gmap))]
          [(get weights [:css-known :alt 185] 100)
            (gen/tuple
              (gen/return "list-style-type")
              (gen/return ":")
              (:prop-list-style-type gmap))]
          [(get weights [:css-known :alt 186] 100)
            (gen/tuple
              (gen/return "margin")
              (gen/return ":")
              (:prop-margin gmap))]
          [(get weights [:css-known :alt 187] 100)
            (gen/tuple
              (gen/return "margin-block")
              (gen/return ":")
              (:prop-margin-block gmap))]
          [(get weights [:css-known :alt 188] 100)
            (gen/tuple
              (gen/return "margin-block-end")
              (gen/return ":")
              (:prop-margin-block-end gmap))]
          [(get weights [:css-known :alt 189] 100)
            (gen/tuple
              (gen/return "margin-block-start")
              (gen/return ":")
              (:prop-margin-block-start gmap))]
          [(get weights [:css-known :alt 190] 100)
            (gen/tuple
              (gen/return "margin-bottom")
              (gen/return ":")
              (:prop-margin-bottom gmap))]
          [(get weights [:css-known :alt 191] 100)
            (gen/tuple
              (gen/return "margin-inline")
              (gen/return ":")
              (:prop-margin-inline gmap))]
          [(get weights [:css-known :alt 192] 100)
            (gen/tuple
              (gen/return "margin-inline-end")
              (gen/return ":")
              (:prop-margin-inline-end gmap))]
          [(get weights [:css-known :alt 193] 100)
            (gen/tuple
              (gen/return "margin-inline-start")
              (gen/return ":")
              (:prop-margin-inline-start gmap))]
          [(get weights [:css-known :alt 194] 100)
            (gen/tuple
              (gen/return "margin-left")
              (gen/return ":")
              (:prop-margin-left gmap))]
          [(get weights [:css-known :alt 195] 100)
            (gen/tuple
              (gen/return "margin-right")
              (gen/return ":")
              (:prop-margin-right gmap))]
          [(get weights [:css-known :alt 196] 100)
            (gen/tuple
              (gen/return "margin-top")
              (gen/return ":")
              (:prop-margin-top gmap))]
          [(get weights [:css-known :alt 197] 100)
            (gen/tuple
              (gen/return "mask")
              (gen/return ":")
              (:prop-mask gmap))]
          [(get weights [:css-known :alt 198] 100)
            (gen/tuple
              (gen/return "mask-clip")
              (gen/return ":")
              (:prop-mask-clip gmap))]
          [(get weights [:css-known :alt 199] 100)
            (gen/tuple
              (gen/return "mask-composite")
              (gen/return ":")
              (:prop-mask-composite gmap))]
          [(get weights [:css-known :alt 200] 100)
            (gen/tuple
              (gen/return "mask-image")
              (gen/return ":")
              (:prop-mask-image gmap))]
          [(get weights [:css-known :alt 201] 100)
            (gen/tuple
              (gen/return "mask-mode")
              (gen/return ":")
              (:prop-mask-mode gmap))]
          [(get weights [:css-known :alt 202] 100)
            (gen/tuple
              (gen/return "mask-origin")
              (gen/return ":")
              (:prop-mask-origin gmap))]
          [(get weights [:css-known :alt 203] 100)
            (gen/tuple
              (gen/return "mask-position")
              (gen/return ":")
              (:prop-mask-position gmap))]
          [(get weights [:css-known :alt 204] 100)
            (gen/tuple
              (gen/return "mask-repeat")
              (gen/return ":")
              (:prop-mask-repeat gmap))]
          [(get weights [:css-known :alt 205] 100)
            (gen/tuple
              (gen/return "mask-size")
              (gen/return ":")
              (:prop-mask-size gmap))]
          [(get weights [:css-known :alt 206] 100)
            (gen/tuple
              (gen/return "mask-type")
              (gen/return ":")
              (:prop-mask-type gmap))]
          [(get weights [:css-known :alt 207] 100)
            (gen/tuple
              (gen/return "max-height")
              (gen/return ":")
              (:prop-max-height gmap))]
          [(get weights [:css-known :alt 208] 100)
            (gen/tuple
              (gen/return "max-width")
              (gen/return ":")
              (:prop-max-width gmap))]
          [(get weights [:css-known :alt 209] 100)
            (gen/tuple
              (gen/return "min-block-size")
              (gen/return ":")
              (:prop-min-block-size gmap))]
          [(get weights [:css-known :alt 210] 100)
            (gen/tuple
              (gen/return "min-height")
              (gen/return ":")
              (:prop-min-height gmap))]
          [(get weights [:css-known :alt 211] 100)
            (gen/tuple
              (gen/return "min-inline-size")
              (gen/return ":")
              (:prop-min-inline-size gmap))]
          [(get weights [:css-known :alt 212] 100)
            (gen/tuple
              (gen/return "min-width")
              (gen/return ":")
              (:prop-min-width gmap))]
          [(get weights [:css-known :alt 213] 100)
            (gen/tuple
              (gen/return "mix-blend-mode")
              (gen/return ":")
              (:prop-mix-blend-mode gmap))]
          [(get weights [:css-known :alt 214] 100)
            (gen/tuple
              (gen/return "object-fit")
              (gen/return ":")
              (:prop-object-fit gmap))]
          [(get weights [:css-known :alt 215] 100)
            (gen/tuple
              (gen/return "object-position")
              (gen/return ":")
              (:prop-object-position gmap))]
          [(get weights [:css-known :alt 216] 100)
            (gen/tuple
              (gen/return "opacity")
              (gen/return ":")
              (:prop-opacity gmap))]
          [(get weights [:css-known :alt 217] 100)
            (gen/tuple
              (gen/return "order")
              (gen/return ":")
              (:prop-order gmap))]
          [(get weights [:css-known :alt 218] 100)
            (gen/tuple
              (gen/return "orphans")
              (gen/return ":")
              (:prop-orphans gmap))]
          [(get weights [:css-known :alt 219] 100)
            (gen/tuple
              (gen/return "outline")
              (gen/return ":")
              (:prop-outline gmap))]
          [(get weights [:css-known :alt 220] 100)
            (gen/tuple
              (gen/return "outline-color")
              (gen/return ":")
              (:prop-outline-color gmap))]
          [(get weights [:css-known :alt 221] 100)
            (gen/tuple
              (gen/return "outline-offset")
              (gen/return ":")
              (:prop-outline-offset gmap))]
          [(get weights [:css-known :alt 222] 100)
            (gen/tuple
              (gen/return "outline-style")
              (gen/return ":")
              (:prop-outline-style gmap))]
          [(get weights [:css-known :alt 223] 100)
            (gen/tuple
              (gen/return "outline-width")
              (gen/return ":")
              (:prop-outline-width gmap))]
          [(get weights [:css-known :alt 224] 100)
            (gen/tuple
              (gen/return "overflow")
              (gen/return ":")
              (:prop-overflow gmap))]
          [(get weights [:css-known :alt 225] 100)
            (gen/tuple
              (gen/return "overflow-wrap")
              (gen/return ":")
              (:prop-overflow-wrap gmap))]
          [(get weights [:css-known :alt 226] 100)
            (gen/tuple
              (gen/return "overflow-x")
              (gen/return ":")
              (:prop-overflow-x gmap))]
          [(get weights [:css-known :alt 227] 100)
            (gen/tuple
              (gen/return "overflow-y")
              (gen/return ":")
              (:prop-overflow-y gmap))]
          [(get weights [:css-known :alt 228] 100)
            (gen/tuple
              (gen/return "padding")
              (gen/return ":")
              (:prop-padding gmap))]
          [(get weights [:css-known :alt 229] 100)
            (gen/tuple
              (gen/return "padding-block")
              (gen/return ":")
              (:prop-padding-block gmap))]
          [(get weights [:css-known :alt 230] 100)
            (gen/tuple
              (gen/return "padding-block-end")
              (gen/return ":")
              (:prop-padding-block-end gmap))]
          [(get weights [:css-known :alt 231] 100)
            (gen/tuple
              (gen/return "padding-block-start")
              (gen/return ":")
              (:prop-padding-block-start gmap))]
          [(get weights [:css-known :alt 232] 100)
            (gen/tuple
              (gen/return "padding-bottom")
              (gen/return ":")
              (:prop-padding-bottom gmap))]
          [(get weights [:css-known :alt 233] 100)
            (gen/tuple
              (gen/return "padding-inline")
              (gen/return ":")
              (:prop-padding-inline gmap))]
          [(get weights [:css-known :alt 234] 100)
            (gen/tuple
              (gen/return "padding-inline-end")
              (gen/return ":")
              (:prop-padding-inline-end gmap))]
          [(get weights [:css-known :alt 235] 100)
            (gen/tuple
              (gen/return "padding-inline-start")
              (gen/return ":")
              (:prop-padding-inline-start gmap))]
          [(get weights [:css-known :alt 236] 100)
            (gen/tuple
              (gen/return "padding-left")
              (gen/return ":")
              (:prop-padding-left gmap))]
          [(get weights [:css-known :alt 237] 100)
            (gen/tuple
              (gen/return "padding-right")
              (gen/return ":")
              (:prop-padding-right gmap))]
          [(get weights [:css-known :alt 238] 100)
            (gen/tuple
              (gen/return "padding-top")
              (gen/return ":")
              (:prop-padding-top gmap))]
          [(get weights [:css-known :alt 239] 100)
            (gen/tuple
              (gen/return "page-break-after")
              (gen/return ":")
              (:prop-page-break-after gmap))]
          [(get weights [:css-known :alt 240] 100)
            (gen/tuple
              (gen/return "page-break-before")
              (gen/return ":")
              (:prop-page-break-before gmap))]
          [(get weights [:css-known :alt 241] 100)
            (gen/tuple
              (gen/return "page-break-inside")
              (gen/return ":")
              (:prop-page-break-inside gmap))]
          [(get weights [:css-known :alt 242] 100)
            (gen/tuple
              (gen/return "perspective")
              (gen/return ":")
              (:prop-perspective gmap))]
          [(get weights [:css-known :alt 243] 100)
            (gen/tuple
              (gen/return "perspective-origin")
              (gen/return ":")
              (:prop-perspective-origin gmap))]
          [(get weights [:css-known :alt 244] 100)
            (gen/tuple
              (gen/return "place-content")
              (gen/return ":")
              (:prop-place-content gmap))]
          [(get weights [:css-known :alt 245] 100)
            (gen/tuple
              (gen/return "place-items")
              (gen/return ":")
              (:prop-place-items gmap))]
          [(get weights [:css-known :alt 246] 100)
            (gen/tuple
              (gen/return "place-self")
              (gen/return ":")
              (:prop-place-self gmap))]
          [(get weights [:css-known :alt 247] 100)
            (gen/tuple
              (gen/return "pointer-events")
              (gen/return ":")
              (:prop-pointer-events gmap))]
          [(get weights [:css-known :alt 248] 100)
            (gen/tuple
              (gen/return "position")
              (gen/return ":")
              (:prop-position gmap))]
          [(get weights [:css-known :alt 249] 100)
            (gen/tuple
              (gen/return "quotes")
              (gen/return ":")
              (:prop-quotes gmap))]
          [(get weights [:css-known :alt 250] 100)
            (gen/tuple
              (gen/return "resize")
              (gen/return ":")
              (:prop-resize gmap))]
          [(get weights [:css-known :alt 251] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return ":")
              (:prop-right gmap))]
          [(get weights [:css-known :alt 252] 100)
            (gen/tuple
              (gen/return "rotate")
              (gen/return ":")
              (:prop-rotate gmap))]
          [(get weights [:css-known :alt 253] 100)
            (gen/tuple
              (gen/return "row-gap")
              (gen/return ":")
              (:prop-row-gap gmap))]
          [(get weights [:css-known :alt 254] 100)
            (gen/tuple
              (gen/return "scale")
              (gen/return ":")
              (:prop-scale gmap))]
          [(get weights [:css-known :alt 255] 100)
            (gen/tuple
              (gen/return "scroll-behavior")
              (gen/return ":")
              (:prop-scroll-behavior gmap))]
          [(get weights [:css-known :alt 256] 100)
            (gen/tuple
              (gen/return "scroll-margin")
              (gen/return ":")
              (:prop-scroll-margin gmap))]
          [(get weights [:css-known :alt 257] 100)
            (gen/tuple
              (gen/return "scroll-margin-block")
              (gen/return ":")
              (:prop-scroll-margin-block gmap))]
          [(get weights [:css-known :alt 258] 100)
            (gen/tuple
              (gen/return "scroll-margin-block-end")
              (gen/return ":")
              (:prop-scroll-margin-block-end gmap))]
          [(get weights [:css-known :alt 259] 100)
            (gen/tuple
              (gen/return "scroll-margin-block-start")
              (gen/return ":")
              (:prop-scroll-margin-block-start gmap))]
          [(get weights [:css-known :alt 260] 100)
            (gen/tuple
              (gen/return "scroll-margin-bottom")
              (gen/return ":")
              (:prop-scroll-margin-bottom gmap))]
          [(get weights [:css-known :alt 261] 100)
            (gen/tuple
              (gen/return "scroll-margin-inline")
              (gen/return ":")
              (:prop-scroll-margin-inline gmap))]
          [(get weights [:css-known :alt 262] 100)
            (gen/tuple
              (gen/return "scroll-margin-inline-end")
              (gen/return ":")
              (:prop-scroll-margin-inline-end gmap))]
          [(get weights [:css-known :alt 263] 100)
            (gen/tuple
              (gen/return "scroll-margin-inline-start")
              (gen/return ":")
              (:prop-scroll-margin-inline-start gmap))]
          [(get weights [:css-known :alt 264] 100)
            (gen/tuple
              (gen/return "scroll-margin-left")
              (gen/return ":")
              (:prop-scroll-margin-left gmap))]
          [(get weights [:css-known :alt 265] 100)
            (gen/tuple
              (gen/return "scroll-margin-right")
              (gen/return ":")
              (:prop-scroll-margin-right gmap))]
          [(get weights [:css-known :alt 266] 100)
            (gen/tuple
              (gen/return "scroll-margin-top")
              (gen/return ":")
              (:prop-scroll-margin-top gmap))]
          [(get weights [:css-known :alt 267] 100)
            (gen/tuple
              (gen/return "scroll-padding")
              (gen/return ":")
              (:prop-scroll-padding gmap))]
          [(get weights [:css-known :alt 268] 100)
            (gen/tuple
              (gen/return "scroll-padding-block")
              (gen/return ":")
              (:prop-scroll-padding-block gmap))]
          [(get weights [:css-known :alt 269] 100)
            (gen/tuple
              (gen/return "scroll-padding-block-end")
              (gen/return ":")
              (:prop-scroll-padding-block-end gmap))]
          [(get weights [:css-known :alt 270] 100)
            (gen/tuple
              (gen/return "scroll-padding-block-start")
              (gen/return ":")
              (:prop-scroll-padding-block-start gmap))]
          [(get weights [:css-known :alt 271] 100)
            (gen/tuple
              (gen/return "scroll-padding-bottom")
              (gen/return ":")
              (:prop-scroll-padding-bottom gmap))]
          [(get weights [:css-known :alt 272] 100)
            (gen/tuple
              (gen/return "scroll-padding-inline")
              (gen/return ":")
              (:prop-scroll-padding-inline gmap))]
          [(get weights [:css-known :alt 273] 100)
            (gen/tuple
              (gen/return "scroll-padding-inline-end")
              (gen/return ":")
              (:prop-scroll-padding-inline-end gmap))]
          [(get weights [:css-known :alt 274] 100)
            (gen/tuple
              (gen/return "scroll-padding-inline-start")
              (gen/return ":")
              (:prop-scroll-padding-inline-start gmap))]
          [(get weights [:css-known :alt 275] 100)
            (gen/tuple
              (gen/return "scroll-padding-left")
              (gen/return ":")
              (:prop-scroll-padding-left gmap))]
          [(get weights [:css-known :alt 276] 100)
            (gen/tuple
              (gen/return "scroll-padding-right")
              (gen/return ":")
              (:prop-scroll-padding-right gmap))]
          [(get weights [:css-known :alt 277] 100)
            (gen/tuple
              (gen/return "scroll-padding-top")
              (gen/return ":")
              (:prop-scroll-padding-top gmap))]
          [(get weights [:css-known :alt 278] 100)
            (gen/tuple
              (gen/return "scroll-snap-align")
              (gen/return ":")
              (:prop-scroll-snap-align gmap))]
          [(get weights [:css-known :alt 279] 100)
            (gen/tuple
              (gen/return "scroll-snap-stop")
              (gen/return ":")
              (:prop-scroll-snap-stop gmap))]
          [(get weights [:css-known :alt 280] 100)
            (gen/tuple
              (gen/return "scroll-snap-type")
              (gen/return ":")
              (:prop-scroll-snap-type gmap))]
          [(get weights [:css-known :alt 281] 100)
            (gen/tuple
              (gen/return "scrollbar-color")
              (gen/return ":")
              (:prop-scrollbar-color gmap))]
          [(get weights [:css-known :alt 282] 100)
            (gen/tuple
              (gen/return "scrollbar-width")
              (gen/return ":")
              (:prop-scrollbar-width gmap))]
          [(get weights [:css-known :alt 283] 100)
            (gen/tuple
              (gen/return "shape-image-threshold")
              (gen/return ":")
              (:prop-shape-image-threshold gmap))]
          [(get weights [:css-known :alt 284] 100)
            (gen/tuple
              (gen/return "shape-margin")
              (gen/return ":")
              (:prop-shape-margin gmap))]
          [(get weights [:css-known :alt 285] 100)
            (gen/tuple
              (gen/return "shape-outside")
              (gen/return ":")
              (:prop-shape-outside gmap))]
          [(get weights [:css-known :alt 286] 100)
            (gen/tuple
              (gen/return "tab-size")
              (gen/return ":")
              (:prop-tab-size gmap))]
          [(get weights [:css-known :alt 287] 100)
            (gen/tuple
              (gen/return "table-layout")
              (gen/return ":")
              (:prop-table-layout gmap))]
          [(get weights [:css-known :alt 288] 100)
            (gen/tuple
              (gen/return "text-align")
              (gen/return ":")
              (:prop-text-align gmap))]
          [(get weights [:css-known :alt 289] 100)
            (gen/tuple
              (gen/return "text-align-last")
              (gen/return ":")
              (:prop-text-align-last gmap))]
          [(get weights [:css-known :alt 290] 100)
            (gen/tuple
              (gen/return "text-combine-upright")
              (gen/return ":")
              (:prop-text-combine-upright gmap))]
          [(get weights [:css-known :alt 291] 100)
            (gen/tuple
              (gen/return "text-decoration")
              (gen/return ":")
              (:prop-text-decoration gmap))]
          [(get weights [:css-known :alt 292] 100)
            (gen/tuple
              (gen/return "text-decoration-color")
              (gen/return ":")
              (:prop-text-decoration-color gmap))]
          [(get weights [:css-known :alt 293] 100)
            (gen/tuple
              (gen/return "text-decoration-line")
              (gen/return ":")
              (:prop-text-decoration-line gmap))]
          [(get weights [:css-known :alt 294] 100)
            (gen/tuple
              (gen/return "text-decoration-style")
              (gen/return ":")
              (:prop-text-decoration-style gmap))]
          [(get weights [:css-known :alt 295] 100)
            (gen/tuple
              (gen/return "text-emphasis")
              (gen/return ":")
              (:prop-text-emphasis gmap))]
          [(get weights [:css-known :alt 296] 100)
            (gen/tuple
              (gen/return "text-emphasis-color")
              (gen/return ":")
              (:prop-text-emphasis-color gmap))]
          [(get weights [:css-known :alt 297] 100)
            (gen/tuple
              (gen/return "text-emphasis-position")
              (gen/return ":")
              (:prop-text-emphasis-position gmap))]
          [(get weights [:css-known :alt 298] 100)
            (gen/tuple
              (gen/return "text-emphasis-style")
              (gen/return ":")
              (:prop-text-emphasis-style gmap))]
          [(get weights [:css-known :alt 299] 100)
            (gen/tuple
              (gen/return "text-indent")
              (gen/return ":")
              (:prop-text-indent gmap))]
          [(get weights [:css-known :alt 300] 100)
            (gen/tuple
              (gen/return "text-justify")
              (gen/return ":")
              (:prop-text-justify gmap))]
          [(get weights [:css-known :alt 301] 100)
            (gen/tuple
              (gen/return "text-orientation")
              (gen/return ":")
              (:prop-text-orientation gmap))]
          [(get weights [:css-known :alt 302] 100)
            (gen/tuple
              (gen/return "text-overflow")
              (gen/return ":")
              (:prop-text-overflow gmap))]
          [(get weights [:css-known :alt 303] 100)
            (gen/tuple
              (gen/return "text-rendering")
              (gen/return ":")
              (:prop-text-rendering gmap))]
          [(get weights [:css-known :alt 304] 100)
            (gen/tuple
              (gen/return "text-shadow")
              (gen/return ":")
              (:prop-text-shadow gmap))]
          [(get weights [:css-known :alt 305] 100)
            (gen/tuple
              (gen/return "text-transform")
              (gen/return ":")
              (:prop-text-transform gmap))]
          [(get weights [:css-known :alt 306] 100)
            (gen/tuple
              (gen/return "text-underline-position")
              (gen/return ":")
              (:prop-text-underline-position gmap))]
          [(get weights [:css-known :alt 307] 100)
            (gen/tuple
              (gen/return "top")
              (gen/return ":")
              (:prop-top gmap))]
          [(get weights [:css-known :alt 308] 100)
            (gen/tuple
              (gen/return "touch-action")
              (gen/return ":")
              (:prop-touch-action gmap))]
          [(get weights [:css-known :alt 309] 100)
            (gen/tuple
              (gen/return "transform")
              (gen/return ":")
              (:prop-transform gmap))]
          [(get weights [:css-known :alt 310] 100)
            (gen/tuple
              (gen/return "transform-box")
              (gen/return ":")
              (:prop-transform-box gmap))]
          [(get weights [:css-known :alt 311] 100)
            (gen/tuple
              (gen/return "transform-origin")
              (gen/return ":")
              (:prop-transform-origin gmap))]
          [(get weights [:css-known :alt 312] 100)
            (gen/tuple
              (gen/return "transform-style")
              (gen/return ":")
              (:prop-transform-style gmap))]
          [(get weights [:css-known :alt 313] 100)
            (gen/tuple
              (gen/return "transition")
              (gen/return ":")
              (:prop-transition gmap))]
          [(get weights [:css-known :alt 314] 100)
            (gen/tuple
              (gen/return "transition-delay")
              (gen/return ":")
              (:prop-transition-delay gmap))]
          [(get weights [:css-known :alt 315] 100)
            (gen/tuple
              (gen/return "transition-duration")
              (gen/return ":")
              (:prop-transition-duration gmap))]
          [(get weights [:css-known :alt 316] 100)
            (gen/tuple
              (gen/return "transition-property")
              (gen/return ":")
              (:prop-transition-property gmap))]
          [(get weights [:css-known :alt 317] 100)
            (gen/tuple
              (gen/return "transition-timing-function")
              (gen/return ":")
              (:prop-transition-timing-function gmap))]
          [(get weights [:css-known :alt 318] 100)
            (gen/tuple
              (gen/return "translate")
              (gen/return ":")
              (:prop-translate gmap))]
          [(get weights [:css-known :alt 319] 100)
            (gen/tuple
              (gen/return "unicode-bidi")
              (gen/return ":")
              (:prop-unicode-bidi gmap))]
          [(get weights [:css-known :alt 320] 100)
            (gen/tuple
              (gen/return "vertical-align")
              (gen/return ":")
              (:prop-vertical-align gmap))]
          [(get weights [:css-known :alt 321] 100)
            (gen/tuple
              (gen/return "visibility")
              (gen/return ":")
              (:prop-visibility gmap))]
          [(get weights [:css-known :alt 322] 100)
            (gen/tuple
              (gen/return "white-space")
              (gen/return ":")
              (:prop-white-space gmap))]
          [(get weights [:css-known :alt 323] 100)
            (gen/tuple
              (gen/return "widows")
              (gen/return ":")
              (:prop-widows gmap))]
          [(get weights [:css-known :alt 324] 100)
            (gen/tuple
              (gen/return "width")
              (gen/return ":")
              (:prop-width gmap))]
          [(get weights [:css-known :alt 325] 100)
            (gen/tuple
              (gen/return "will-change")
              (gen/return ":")
              (:prop-will-change gmap))]
          [(get weights [:css-known :alt 326] 100)
            (gen/tuple
              (gen/return "word-break")
              (gen/return ":")
              (:prop-word-break gmap))]
          [(get weights [:css-known :alt 327] 100)
            (gen/tuple
              (gen/return "word-spacing")
              (gen/return ":")
              (:prop-word-spacing gmap))]
          [(get weights [:css-known :alt 328] 100)
            (gen/tuple
              (gen/return "word-wrap")
              (gen/return ":")
              (:prop-word-wrap gmap))]
          [(get weights [:css-known :alt 329] 100)
            (gen/tuple
              (gen/return "writing-mode")
              (gen/return ":")
              (:prop-writing-mode gmap))]
          [(get weights [:css-known :alt 330] 100)
            (gen/tuple
              (gen/return "z-index")
              (gen/return ":")
              (:prop-z-index gmap))]])
        gmap (assoc gmap :css-known gen-css-known)

        gen-nonprop-page-margin-box-type
        (igen/freq [
          [(get weights [:nonprop-page-margin-box-type :alt 0] 100)
            (gen/return "@top-left-corner")]
          [(get weights [:nonprop-page-margin-box-type :alt 1] 100)
            (gen/return "@top-left")]
          [(get weights [:nonprop-page-margin-box-type :alt 2] 100)
            (gen/return "@top-center")]
          [(get weights [:nonprop-page-margin-box-type :alt 3] 100)
            (gen/return "@top-right")]
          [(get weights [:nonprop-page-margin-box-type :alt 4] 100)
            (gen/return "@top-right-corner")]
          [(get weights [:nonprop-page-margin-box-type :alt 5] 100)
            (gen/return "@bottom-left-corner")]
          [(get weights [:nonprop-page-margin-box-type :alt 6] 100)
            (gen/return "@bottom-left")]
          [(get weights [:nonprop-page-margin-box-type :alt 7] 100)
            (gen/return "@bottom-center")]
          [(get weights [:nonprop-page-margin-box-type :alt 8] 100)
            (gen/return "@bottom-right")]
          [(get weights [:nonprop-page-margin-box-type :alt 9] 100)
            (gen/return "@bottom-right-corner")]
          [(get weights [:nonprop-page-margin-box-type :alt 10] 100)
            (gen/return "@left-top")]
          [(get weights [:nonprop-page-margin-box-type :alt 11] 100)
            (gen/return "@left-middle")]
          [(get weights [:nonprop-page-margin-box-type :alt 12] 100)
            (gen/return "@left-bottom")]
          [(get weights [:nonprop-page-margin-box-type :alt 13] 100)
            (gen/return "@right-top")]
          [(get weights [:nonprop-page-margin-box-type :alt 14] 100)
            (gen/return "@right-middle")]
          [(get weights [:nonprop-page-margin-box-type :alt 15] 100)
            (gen/return "@right-bottom")]])
        gmap (assoc gmap :nonprop-page-margin-box-type gen-nonprop-page-margin-box-type)

        gen-nonprop-declaration-list
        (gen/return "STUB_declaration_list")
        gmap (assoc gmap :nonprop-declaration-list gen-nonprop-declaration-list)

        gen-nonprop-page-margin-box
        (gen/tuple
          (:nonprop-page-margin-box-type gmap)
          (gen/return "{")
          (:nonprop-declaration-list gmap)
          (gen/return "}"))
        gmap (assoc gmap :nonprop-page-margin-box gen-nonprop-page-margin-box)

        gen-func-repeating-linear-gradient
        (gen/tuple
          (gen/return "repeating-linear-gradient")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:func-repeating-linear-gradient :cat 2 :opt :alt 0] 100)
                (:nonprop-angle gmap)]
              [(get weights [:func-repeating-linear-gradient :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "to")
                  (:nonprop-side-or-corner gmap))]])])
          (gen/return ",")
          (:nonprop-color-stop-list gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-repeating-linear-gradient gen-func-repeating-linear-gradient)

        gen-nonprop-angular-color-hint
        (:nonprop-angle-percentage gmap)
        gmap (assoc gmap :nonprop-angular-color-hint gen-nonprop-angular-color-hint)

        gen-nonprop-color-stop-angle
        (igen/freq [
          [(get weights [:nonprop-color-stop-angle :cat 0 :alt 0] 100)
            (:nonprop-angle-percentage gmap)]
          [(get weights [:nonprop-color-stop-angle :cat 0 :alt 1] 100)
            (gen/tuple
              (:nonprop-angle-percentage gmap)
              (:rS gmap)
              (:nonprop-angle-percentage gmap))]])
        gmap (assoc gmap :nonprop-color-stop-angle gen-nonprop-color-stop-angle)

        gen-nonprop-angular-color-stop
        (gen/tuple
          (:nonprop-color gmap)
          (gen/one-of [
            (gen/return "")
            (:nonprop-color-stop-angle gmap)]))
        gmap (assoc gmap :nonprop-angular-color-stop gen-nonprop-angular-color-stop)

        gen-nonprop-angular-color-stop-list
        (gen/tuple
          (gen/tuple
            (:nonprop-angular-color-stop gmap)
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (gen/return ",")
                (:nonprop-angular-color-hint gmap))]))
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/tuple
                (:nonprop-angular-color-stop gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return ",")
                    (:nonprop-angular-color-hint gmap))]))))
          (gen/return ",")
          (:nonprop-angular-color-stop gmap))
        gmap (assoc gmap :nonprop-angular-color-stop-list gen-nonprop-angular-color-stop-list)

        gen-func-radial-gradient
        (gen/tuple
          (gen/return "radial-gradient")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (igen/freq [
                [(get weights [:func-radial-gradient :cat 2 :opt :plus :alt 0] 100)
                  (:nonprop-ending-shape gmap)]
                [(get weights [:func-radial-gradient :cat 2 :opt :plus :alt 1] 100)
                  (:nonprop-size gmap)]])))])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (:nonprop-position gmap))])
          (gen/return ",")
          (:nonprop-color-stop-list gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-radial-gradient gen-func-radial-gradient)

        gen-func-conic-gradient
        (gen/tuple
          (gen/return "conic-gradient")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "from")
              (:nonprop-angle gmap))])
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (:nonprop-position gmap))])
          (gen/return ",")
          (:nonprop-angular-color-stop-list gmap)
          (gen/return ")"))
        gmap (assoc gmap :func-conic-gradient gen-func-conic-gradient)

        gen-nonprop-gradient
        (igen/freq [
          [(get weights [:nonprop-gradient :alt 0] 100)
            (:func-linear-gradient gmap)]
          [(get weights [:nonprop-gradient :alt 1] 100)
            (:func-repeating-linear-gradient gmap)]
          [(get weights [:nonprop-gradient :alt 2] 100)
            (:func-radial-gradient gmap)]
          [(get weights [:nonprop-gradient :alt 3] 100)
            (:func-repeating-radial-gradient gmap)]
          [(get weights [:nonprop-gradient :alt 4] 100)
            (:func-conic-gradient gmap)]])
        gmap (assoc gmap :nonprop-gradient gen-nonprop-gradient)

        gen-nonprop-supports-in-parens
        (gen/return "STOP_RECURSE_supports_in_parens")
        gmap (assoc gmap :nonprop-supports-in-parens gen-nonprop-supports-in-parens)

        gen-nonprop-pseudo-page
        (gen/tuple
          (gen/return ":")
          (igen/freq [
            [(get weights [:nonprop-pseudo-page :cat 1 :alt 0] 100)
              (gen/return "left")]
            [(get weights [:nonprop-pseudo-page :cat 1 :alt 1] 100)
              (gen/return "right")]
            [(get weights [:nonprop-pseudo-page :cat 1 :alt 2] 100)
              (gen/return "first")]
            [(get weights [:nonprop-pseudo-page :cat 1 :alt 3] 100)
              (gen/return "blank")]]))
        gmap (assoc gmap :nonprop-pseudo-page gen-nonprop-pseudo-page)

        gen-nonprop-page-selector
        (igen/freq [
          [(get weights [:nonprop-page-selector :alt 0] 100)
            (gen/such-that not-empty (gen/vector
              (:nonprop-pseudo-page gmap)))]
          [(get weights [:nonprop-page-selector :alt 1] 100)
            (gen/tuple
              (:nonprop-ident gmap)
              (gen/vector
                (:nonprop-pseudo-page gmap)))]])
        gmap (assoc gmap :nonprop-page-selector gen-nonprop-page-selector)

        gen-nonprop-page-selector-list
        (gen/tuple
          (:nonprop-page-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-page-selector gmap)))
          (gen/one-of [
            (gen/return "")
            (:S gmap)]))
        gmap (assoc gmap :nonprop-page-selector-list gen-nonprop-page-selector-list)

        gen-nonprop-page-body
        (gen/return "STUB_page_body")
        gmap (assoc gmap :nonprop-page-body gen-nonprop-page-body)

        gen-prop-AT-page
        (gen/tuple
          (gen/return "@page")
          (:nonprop-page-selector-list gmap)
          (gen/return "{")
          (:nonprop-page-body gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-page gen-prop-AT-page)

        gen-nonprop-font-feature-settings
        (:prop-font-feature-settings gmap)
        gmap (assoc gmap :nonprop-font-feature-settings gen-nonprop-font-feature-settings)

        gen-nonprop-frequency
        (gen/tuple
          (:nonprop-number gmap)
          (igen/freq [
            [(get weights [:nonprop-frequency :cat 1 :alt 0] 100)
              (gen/return "Hz")]
            [(get weights [:nonprop-frequency :cat 1 :alt 1] 100)
              (gen/return "kHz")]]))
        gmap (assoc gmap :nonprop-frequency gen-nonprop-frequency)

        gen-nonprop-frequency-percentage
        (igen/freq [
          [(get weights [:nonprop-frequency-percentage :alt 0] 100)
            (:nonprop-frequency gmap)]
          [(get weights [:nonprop-frequency-percentage :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-frequency-percentage gen-nonprop-frequency-percentage)

        gen-nonprop-an-plus-b
        (gen/return "STUB_an_plus_b")
        gmap (assoc gmap :nonprop-an-plus-b gen-nonprop-an-plus-b)

        gen-nonprop-padding
        (gen/return "STUB_padding")
        gmap (assoc gmap :nonprop-padding gen-nonprop-padding)

        gen-nonprop-outline-radius
        (igen/freq [
          [(get weights [:nonprop-outline-radius :alt 0] 100)
            (:nonprop-length gmap)]
          [(get weights [:nonprop-outline-radius :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-outline-radius gen-nonprop-outline-radius)

        gen-nonprop-feature-type
        (igen/freq [
          [(get weights [:nonprop-feature-type :alt 0] 100)
            (gen/return "@stylistic")]
          [(get weights [:nonprop-feature-type :alt 1] 100)
            (gen/return "@historical-forms")]
          [(get weights [:nonprop-feature-type :alt 2] 100)
            (gen/return "@styleset")]
          [(get weights [:nonprop-feature-type :alt 3] 100)
            (gen/return "@character-variant")]
          [(get weights [:nonprop-feature-type :alt 4] 100)
            (gen/return "@swash")]
          [(get weights [:nonprop-feature-type :alt 5] 100)
            (gen/return "@ornaments")]
          [(get weights [:nonprop-feature-type :alt 6] 100)
            (gen/return "@annotation")]])
        gmap (assoc gmap :nonprop-feature-type gen-nonprop-feature-type)

        gen-nonprop-calc-sum
        (gen/return "STUB_calc_sum")
        gmap (assoc gmap :nonprop-calc-sum gen-nonprop-calc-sum)

        gen-nonprop-compound-selector-list
        (gen/tuple
          (:nonprop-compound-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-compound-selector gmap))))
        gmap (assoc gmap :nonprop-compound-selector-list gen-nonprop-compound-selector-list)

        gen-nonprop-declaration
        (gen/return "STUB_declaration")
        gmap (assoc gmap :nonprop-declaration gen-nonprop-declaration)

        gen-nonprop-media-in-parens
        (gen/return "STOP_RECURSE_media_in_parens")
        gmap (assoc gmap :nonprop-media-in-parens gen-nonprop-media-in-parens)]
    gmap))

(defn- css3-generators-part-13 [gmap weights]
  (let [
        gen-nonprop-media-not
        (gen/tuple
          (gen/return "not")
          (:nonprop-media-in-parens gmap))
        gmap (assoc gmap :nonprop-media-not gen-nonprop-media-not)

        gen-nonprop-media-and
        (gen/tuple
          (:nonprop-media-in-parens gmap)
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/return "and")
              (:nonprop-media-in-parens gmap)))))
        gmap (assoc gmap :nonprop-media-and gen-nonprop-media-and)

        gen-nonprop-media-or
        (gen/tuple
          (:nonprop-media-in-parens gmap)
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/return "or")
              (:nonprop-media-in-parens gmap)))))
        gmap (assoc gmap :nonprop-media-or gen-nonprop-media-or)

        gen-nonprop-media-condition
        (igen/freq [
          [(get weights [:nonprop-media-condition :alt 0] 100)
            (:nonprop-media-not gmap)]
          [(get weights [:nonprop-media-condition :alt 1] 100)
            (:nonprop-media-and gmap)]
          [(get weights [:nonprop-media-condition :alt 2] 100)
            (:nonprop-media-or gmap)]
          [(get weights [:nonprop-media-condition :alt 3] 100)
            (:nonprop-media-in-parens gmap)]])
        gmap (assoc gmap :nonprop-media-condition gen-nonprop-media-condition)

        gen-nonprop-media-condition-without-or
        (igen/freq [
          [(get weights [:nonprop-media-condition-without-or :alt 0] 100)
            (:nonprop-media-not gmap)]
          [(get weights [:nonprop-media-condition-without-or :alt 1] 100)
            (:nonprop-media-and gmap)]
          [(get weights [:nonprop-media-condition-without-or :alt 2] 100)
            (:nonprop-media-in-parens gmap)]])
        gmap (assoc gmap :nonprop-media-condition-without-or gen-nonprop-media-condition-without-or)

        gen-nonprop-media-type
        (:nonprop-ident gmap)
        gmap (assoc gmap :nonprop-media-type gen-nonprop-media-type)

        gen-nonprop-media-query
        (igen/freq [
          [(get weights [:nonprop-media-query :alt 0] 100)
            (:nonprop-media-condition gmap)]
          [(get weights [:nonprop-media-query :alt 1] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (igen/freq [
                  [(get weights [:nonprop-media-query :alt 1 :cat 0 :opt :alt 0] 100)
                    (gen/return "not")]
                  [(get weights [:nonprop-media-query :alt 1 :cat 0 :opt :alt 1] 100)
                    (gen/return "only")]])])
              (:nonprop-media-type gmap)
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "and")
                  (:nonprop-media-condition-without-or gmap))]))]])
        gmap (assoc gmap :nonprop-media-query gen-nonprop-media-query)

        gen-nonprop-media-query-list
        (gen/tuple
          (:nonprop-media-query gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-media-query gmap))))
        gmap (assoc gmap :nonprop-media-query-list gen-nonprop-media-query-list)

        gen-prop-AT-import
        (gen/tuple
          (gen/return "@import")
          (igen/freq [
            [(get weights [:prop-AT-import :cat 1 :alt 0] 100)
              (:nonprop-string gmap)]
            [(get weights [:prop-AT-import :cat 1 :alt 1] 100)
              (:nonprop-url gmap)]])
          (:nonprop-media-query-list gmap)
          (gen/one-of [
            (gen/return "")
            (:S gmap)])
          (gen/return ";"))
        gmap (assoc gmap :prop-AT-import gen-prop-AT-import)

        gen-nonprop-feature-value-declaration
        (gen/tuple
          (:nonprop-custom-ident gmap)
          (gen/return ":")
          (gen/such-that not-empty (gen/vector
            (:nonprop-integer gmap)))
          (gen/return ";"))
        gmap (assoc gmap :nonprop-feature-value-declaration gen-nonprop-feature-value-declaration)

        gen-nonprop-feature-value-declaration-list
        (:nonprop-feature-value-declaration gmap)
        gmap (assoc gmap :nonprop-feature-value-declaration-list gen-nonprop-feature-value-declaration-list)

        gen-nonprop-feature-value-block
        (gen/tuple
          (:nonprop-feature-type gmap)
          (gen/return "{")
          (:nonprop-feature-value-declaration-list gmap)
          (gen/return "}"))
        gmap (assoc gmap :nonprop-feature-value-block gen-nonprop-feature-value-block)

        gen-nonprop-feature-value-block-list
        (gen/such-that not-empty (gen/vector
          (:nonprop-feature-value-block gmap)))
        gmap (assoc gmap :nonprop-feature-value-block-list gen-nonprop-feature-value-block-list)

        gen-prop-AT-font-feature-values
        (gen/tuple
          (gen/return "@font-feature-values")
          (:nonprop-family-name gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-family-name gmap)))
          (gen/return "{")
          (:nonprop-feature-value-block-list gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-font-feature-values gen-prop-AT-font-feature-values)

        gen-nonprop-keyframe-block
        (gen/tuple
          (:nonprop-keyframe-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-keyframe-selector gmap)))
          (gen/return "{")
          (:nonprop-declaration-list gmap)
          (gen/return "}"))
        gmap (assoc gmap :nonprop-keyframe-block gen-nonprop-keyframe-block)

        gen-nonprop-keyframe-block-list
        (gen/such-that not-empty (gen/vector
          (:nonprop-keyframe-block gmap)))
        gmap (assoc gmap :nonprop-keyframe-block-list gen-nonprop-keyframe-block-list)

        gen-nonprop-clip-style
        (gen/return "STUB_clip_style")
        gmap (assoc gmap :nonprop-clip-style gen-nonprop-clip-style)

        gen-integer
        (chuck/string-from-regex #"-?[0-9]+")
        gmap (assoc gmap :integer gen-integer)

        gen-func-max
        (gen/tuple
          (gen/return "max")
          (gen/return "(")
          (:nonprop-calc-sum gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-calc-sum gmap)))
          (gen/return ")"))
        gmap (assoc gmap :func-max gen-func-max)

        gen-func-fit-content
        (gen/tuple
          (gen/return "fit-content")
          (gen/return "(")
          (igen/freq [
            [(get weights [:func-fit-content :cat 2 :alt 0] 100)
              (:nonprop-length gmap)]
            [(get weights [:func-fit-content :cat 2 :alt 1] 100)
              (:nonprop-percentage gmap)]])
          (gen/return ")"))
        gmap (assoc gmap :func-fit-content gen-func-fit-content)

        gen-nonprop-supports-selector-fn
        (gen/tuple
          (gen/return "selector")
          (gen/return "(")
          (:nonprop-complex-selector gmap)
          (gen/return ")"))
        gmap (assoc gmap :nonprop-supports-selector-fn gen-nonprop-supports-selector-fn)

        gen-lang
        (chuck/string-from-regex #"[a-z][a-z](?:-[A-Za-z][A-Za-z])?")
        gmap (assoc gmap :lang gen-lang)

        gen-nonprop-cf-mixing-image
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-percentage gmap)])
          (:nonprop-image gmap))
        gmap (assoc gmap :nonprop-cf-mixing-image gen-nonprop-cf-mixing-image)

        gen-nonprop-cf-final-image
        (igen/freq [
          [(get weights [:nonprop-cf-final-image :alt 0] 100)
            (:nonprop-image gmap)]
          [(get weights [:nonprop-cf-final-image :alt 1] 100)
            (:nonprop-color gmap)]])
        gmap (assoc gmap :nonprop-cf-final-image gen-nonprop-cf-final-image)

        gen-func-cross-fade
        (gen/tuple
          (gen/return "cross-fade")
          (gen/return "(")
          (:nonprop-cf-mixing-image gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (:nonprop-cf-final-image gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-cross-fade gen-func-cross-fade)

        gen-func-env
        (gen/tuple
          (gen/return "env")
          (gen/return "(")
          (:nonprop-custom-ident gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (:nonprop-declaration-value gmap)])
          (gen/return ")"))
        gmap (assoc gmap :func-env gen-func-env)

        gen-func-image-set
        (gen/tuple
          (gen/return "image-set")
          (gen/return "(")
          (:nonprop-image-set-option gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-image-set-option gmap)))
          (gen/return ")"))
        gmap (assoc gmap :func-image-set gen-func-image-set)

        gen-nonprop-unicode-range
        (gen/recursive-gen
          (fn [inner]
            (gen/tuple
              (chuck/string-from-regex #"U[+](?:[0-9A-Fa-f]{1,4}-[0-9A-Fa-f]{1,4}|[0-9A-Fa-f?]{1,4})")
              (gen/vector
                (gen/tuple
                  (gen/return ",")
                  inner))))
          (gen/tuple
            (chuck/string-from-regex #"U[+](?:[0-9A-Fa-f]{1,4}-[0-9A-Fa-f]{1,4}|[0-9A-Fa-f?]{1,4})")
            (gen/return "")))
        gmap (assoc gmap :nonprop-unicode-range gen-nonprop-unicode-range)

        gen-nonprop-src
        (gen/tuple
          (igen/freq [
            [(get weights [:nonprop-src :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-url gmap)
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "format")
                    (gen/return "(")
                    (:nonprop-string gmap)
                    (gen/vector
                      (gen/tuple
                        (gen/return ",")
                        (:nonprop-string gmap)))
                    (gen/return ")"))]))]
            [(get weights [:nonprop-src :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "local")
                (gen/return "(")
                (:nonprop-family-name gmap)
                (gen/return ")"))]])
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (igen/freq [
                [(get weights [:nonprop-src :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-url gmap)
                    (gen/one-of [
                      (gen/return "")
                      (gen/tuple
                        (gen/return "format")
                        (gen/return "(")
                        (:nonprop-string gmap)
                        (gen/vector
                          (gen/tuple
                            (gen/return ",")
                            (:nonprop-string gmap)))
                        (gen/return ")"))]))]
                [(get weights [:nonprop-src :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/return "local")
                    (gen/return "(")
                    (:nonprop-family-name gmap)
                    (gen/return ")"))]]))))
        gmap (assoc gmap :nonprop-src gen-nonprop-src)

        gen-nonprop-font-variant
        (:prop-font-variant gmap)
        gmap (assoc gmap :nonprop-font-variant gen-nonprop-font-variant)

        gen-nonprop-font-variation-settings
        (:prop-unknown gmap)
        gmap (assoc gmap :nonprop-font-variation-settings gen-nonprop-font-variation-settings)

        gen-prop-AT-font-face
        (gen/tuple
          (gen/return "@font-face")
          (gen/return "{")
          (gen/such-that not-empty (gen/vector
            (igen/freq [
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 0] 100)
                (gen/tuple
                  (gen/return "font-family:")
                  (:nonprop-family-name gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 1] 100)
                (gen/tuple
                  (gen/return "src:")
                  (:nonprop-src gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 2] 100)
                (gen/tuple
                  (gen/return "unicode-range:")
                  (:nonprop-unicode-range gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 3] 100)
                (gen/tuple
                  (gen/return "font-variant:")
                  (:nonprop-font-variant gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 4] 100)
                (gen/tuple
                  (gen/return "font-feature-settings:")
                  (:nonprop-font-feature-settings gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 5] 100)
                (gen/tuple
                  (gen/return "font-variation-settings:")
                  (:nonprop-font-variation-settings gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 6] 100)
                (gen/tuple
                  (gen/return "font-stretch:")
                  (:nonprop-font-stretch gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 7] 100)
                (gen/tuple
                  (gen/return "font-weight:")
                  (:nonprop-font-weight gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-font-face :cat 2 :plus :alt 8] 100)
                (gen/tuple
                  (gen/return "font-style:")
                  (:nonprop-font-style gmap)
                  (gen/return ";"))]])))
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-font-face gen-prop-AT-font-face)

        gen-func-clamp
        (gen/tuple
          (gen/return "clamp")
          (gen/return "(")
          (gen/tuple
            (:nonprop-calc-sum gmap)
            (gen/return ",")
            (:nonprop-calc-sum gmap)
            (gen/return ",")
            (:nonprop-calc-sum gmap))
          (gen/return ")"))
        gmap (assoc gmap :func-clamp gen-func-clamp)

        gen-nonprop-supports-condition
        (igen/freq [
          [(get weights [:nonprop-supports-condition :alt 0] 100)
            (gen/tuple
              (gen/return "not")
              (:nonprop-supports-in-parens gmap))]
          [(get weights [:nonprop-supports-condition :alt 1] 100)
            (gen/tuple
              (:nonprop-supports-in-parens gmap)
              (gen/vector
                (gen/tuple
                  (gen/return "and")
                  (:nonprop-supports-in-parens gmap))))]
          [(get weights [:nonprop-supports-condition :alt 2] 100)
            (gen/tuple
              (:nonprop-supports-in-parens gmap)
              (gen/vector
                (gen/tuple
                  (gen/return "or")
                  (:nonprop-supports-in-parens gmap))))]])
        gmap (assoc gmap :nonprop-supports-condition gen-nonprop-supports-condition)

        gen-nonprop-supports-decl
        (gen/tuple
          (gen/return "(")
          (:nonprop-declaration gmap)
          (gen/return ")"))
        gmap (assoc gmap :nonprop-supports-decl gen-nonprop-supports-decl)

        gen-nonprop-supports-feature
        (igen/freq [
          [(get weights [:nonprop-supports-feature :alt 0] 100)
            (:nonprop-supports-decl gmap)]
          [(get weights [:nonprop-supports-feature :alt 1] 100)
            (:nonprop-supports-selector-fn gmap)]])
        gmap (assoc gmap :nonprop-supports-feature gen-nonprop-supports-feature)

        gen-prop-AT-keyframes
        (gen/tuple
          (gen/return "@keyframes")
          (:nonprop-keyframes-name gmap)
          (gen/return "{")
          (:nonprop-keyframe-block-list gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-keyframes gen-prop-AT-keyframes)

        gen-nonprop-additive-symbols
        (gen/return "STUB_additive_symbols")
        gmap (assoc gmap :nonprop-additive-symbols gen-nonprop-additive-symbols)

        gen-nonprop-mask-origin
        (:prop-mask-origin gmap)
        gmap (assoc gmap :nonprop-mask-origin gen-nonprop-mask-origin)

        gen-nonprop-max-width
        (:prop-max-width gmap)
        gmap (assoc gmap :nonprop-max-width gen-nonprop-max-width)

        gen-nonprop-prefix
        (gen/return "STUB_prefix")
        gmap (assoc gmap :nonprop-prefix gen-nonprop-prefix)

        gen-floating-point-number
        (chuck/string-from-regex #"-?[0-9]*.[0-9]+")
        gmap (assoc gmap :floating-point-number gen-floating-point-number)

        gen-nonprop-speak-as
        (gen/return "STUB_speak_as")
        gmap (assoc gmap :nonprop-speak-as gen-nonprop-speak-as)

        gen-nonprop-mask-repeat
        (:prop-mask-repeat gmap)
        gmap (assoc gmap :nonprop-mask-repeat gen-nonprop-mask-repeat)

        gen-nonprop-group-rule-body
        (gen/return "STUB_nonprop_group_rule_body")
        gmap (assoc gmap :nonprop-group-rule-body gen-nonprop-group-rule-body)

        gen-nonprop-complex-selector-list
        (gen/tuple
          (:nonprop-complex-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-complex-selector gmap))))
        gmap (assoc gmap :nonprop-complex-selector-list gen-nonprop-complex-selector-list)

        gen-nonprop-time-percentage
        (igen/freq [
          [(get weights [:nonprop-time-percentage :alt 0] 100)
            (:nonprop-time gmap)]
          [(get weights [:nonprop-time-percentage :alt 1] 100)
            (:nonprop-percentage gmap)]])
        gmap (assoc gmap :nonprop-time-percentage gen-nonprop-time-percentage)

        gen-nonprop-name-repeat
        (gen/return "STUB_name_repeat")
        gmap (assoc gmap :nonprop-name-repeat gen-nonprop-name-repeat)

        gen-nonprop-image-tags
        (igen/freq [
          [(get weights [:nonprop-image-tags :alt 0] 100)
            (gen/return "ltr")]
          [(get weights [:nonprop-image-tags :alt 1] 100)
            (gen/return "rtl")]])
        gmap (assoc gmap :nonprop-image-tags gen-nonprop-image-tags)

        gen-func-image
        (gen/tuple
          (gen/return "image")
          (gen/return "(")
          (gen/one-of [
            (gen/return "")
            (:nonprop-image-tags gmap)])
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (:nonprop-image-src gmap)])
            (gen/return ",")
            (gen/one-of [
              (gen/return "")
              (:nonprop-color gmap)]))
          (gen/return ")"))
        gmap (assoc gmap :func-image gen-func-image)]
    gmap))

(defn- css3-generators-part-14 [gmap weights]
  (let [
        gen-nonprop-compat
        (igen/freq [
          [(get weights [:nonprop-compat :alt 0] 100)
            (gen/return "searchfield")]
          [(get weights [:nonprop-compat :alt 1] 100)
            (gen/return "textarea")]
          [(get weights [:nonprop-compat :alt 2] 100)
            (gen/return "push-button")]
          [(get weights [:nonprop-compat :alt 3] 100)
            (gen/return "button-bevel")]
          [(get weights [:nonprop-compat :alt 4] 100)
            (gen/return "slider-horizontal")]
          [(get weights [:nonprop-compat :alt 5] 100)
            (gen/return "checkbox")]
          [(get weights [:nonprop-compat :alt 6] 100)
            (gen/return "radio")]
          [(get weights [:nonprop-compat :alt 7] 100)
            (gen/return "square-button")]
          [(get weights [:nonprop-compat :alt 8] 100)
            (gen/return "menulist")]
          [(get weights [:nonprop-compat :alt 9] 100)
            (gen/return "menulist-button")]
          [(get weights [:nonprop-compat :alt 10] 100)
            (gen/return "listbox")]
          [(get weights [:nonprop-compat :alt 11] 100)
            (gen/return "meter")]
          [(get weights [:nonprop-compat :alt 12] 100)
            (gen/return "progress-bar")]])
        gmap (assoc gmap :nonprop-compat gen-nonprop-compat)

        gen-prop-AT-supports
        (gen/tuple
          (gen/return "@supports")
          (:nonprop-supports-condition gmap)
          (gen/return "{")
          (:nonprop-group-rule-body gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-supports gen-prop-AT-supports)

        gen-nonprop-general-enclosed
        (igen/freq [
          [(get weights [:nonprop-general-enclosed :alt 0] 100)
            (gen/tuple
              (:nonprop-function-token gmap)
              (:nonprop-any-value gmap)
              (gen/return ")"))]
          [(get weights [:nonprop-general-enclosed :alt 1] 100)
            (gen/tuple
              (gen/return "(")
              (:nonprop-ident gmap)
              (:nonprop-any-value gmap)
              (gen/return ")"))]])
        gmap (assoc gmap :nonprop-general-enclosed gen-nonprop-general-enclosed)

        gen-func-min
        (gen/tuple
          (gen/return "min")
          (gen/return "(")
          (:nonprop-calc-sum gmap)
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (:nonprop-calc-sum gmap)))
          (gen/return ")"))
        gmap (assoc gmap :func-min gen-func-min)

        gen-nonprop-counter-symbols
        (gen/return "STUB_counter_symbols")
        gmap (assoc gmap :nonprop-counter-symbols gen-nonprop-counter-symbols)

        gen-nonprop-counter-system
        (gen/return "STUB_counter_system")
        gmap (assoc gmap :nonprop-counter-system gen-nonprop-counter-system)

        gen-nonprop-composite-style
        (igen/freq [
          [(get weights [:nonprop-composite-style :alt 0] 100)
            (gen/return "clear")]
          [(get weights [:nonprop-composite-style :alt 1] 100)
            (gen/return "copy")]
          [(get weights [:nonprop-composite-style :alt 2] 100)
            (gen/return "source-over")]
          [(get weights [:nonprop-composite-style :alt 3] 100)
            (gen/return "source-in")]
          [(get weights [:nonprop-composite-style :alt 4] 100)
            (gen/return "source-out")]
          [(get weights [:nonprop-composite-style :alt 5] 100)
            (gen/return "source-atop")]
          [(get weights [:nonprop-composite-style :alt 6] 100)
            (gen/return "destination-over")]
          [(get weights [:nonprop-composite-style :alt 7] 100)
            (gen/return "destination-in")]
          [(get weights [:nonprop-composite-style :alt 8] 100)
            (gen/return "destination-out")]
          [(get weights [:nonprop-composite-style :alt 9] 100)
            (gen/return "destination-atop")]
          [(get weights [:nonprop-composite-style :alt 10] 100)
            (gen/return "xor")]])
        gmap (assoc gmap :nonprop-composite-style gen-nonprop-composite-style)

        gen-nonprop-line-name-list
        (gen/such-that not-empty (gen/vector
          (igen/freq [
            [(get weights [:nonprop-line-name-list :cat 0 :plus :alt 0] 100)
              (:nonprop-line-names gmap)]
            [(get weights [:nonprop-line-name-list :cat 0 :plus :alt 1] 100)
              (:nonprop-name-repeat gmap)]])))
        gmap (assoc gmap :nonprop-line-name-list gen-nonprop-line-name-list)

        gen-nonprop-mask-position
        (gen/tuple
          (igen/freq [
            [(get weights [:nonprop-mask-position :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:nonprop-mask-position :cat 0 :alt 1] 100)
              (gen/return "left")]
            [(get weights [:nonprop-mask-position :cat 0 :alt 2] 100)
              (gen/return "center")]
            [(get weights [:nonprop-mask-position :cat 0 :alt 3] 100)
              (gen/return "right")]])
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:nonprop-mask-position :cat 1 :opt :alt 0] 100)
                (:nonprop-length-percentage gmap)]
              [(get weights [:nonprop-mask-position :cat 1 :opt :alt 1] 100)
                (gen/return "top")]
              [(get weights [:nonprop-mask-position :cat 1 :opt :alt 2] 100)
                (gen/return "center")]
              [(get weights [:nonprop-mask-position :cat 1 :opt :alt 3] 100)
                (gen/return "bottom")]])]))
        gmap (assoc gmap :nonprop-mask-position gen-nonprop-mask-position)

        gen-func-counter
        (gen/tuple
          (gen/return "counter")
          (gen/return "(")
          (:nonprop-custom-ident gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:func-counter :cat 4 :opt :alt 0] 100)
                (:nonprop-counter-style gmap)]
              [(get weights [:func-counter :cat 4 :opt :alt 1] 100)
                (gen/return "none")]])])
          (gen/return ")"))
        gmap (assoc gmap :func-counter gen-func-counter)

        gen-prop-AT-viewport
        (gen/tuple
          (gen/return "@viewport")
          (gen/return "{")
          (:nonprop-group-rule-body gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-viewport gen-prop-AT-viewport)

        gen-nonprop-color-stop
        (igen/freq [
          [(get weights [:nonprop-color-stop :alt 0] 100)
            (:nonprop-color-stop-length gmap)]
          [(get weights [:nonprop-color-stop :alt 1] 100)
            (:nonprop-color-stop-angle gmap)]])
        gmap (assoc gmap :nonprop-color-stop gen-nonprop-color-stop)

        gen-nonprop-generic-name
        (igen/freq [
          [(get weights [:nonprop-generic-name :alt 0] 100)
            (gen/return "serif")]
          [(get weights [:nonprop-generic-name :alt 1] 100)
            (gen/return "sans-serif")]
          [(get weights [:nonprop-generic-name :alt 2] 100)
            (gen/return "cursive")]
          [(get weights [:nonprop-generic-name :alt 3] 100)
            (gen/return "fantasy")]
          [(get weights [:nonprop-generic-name :alt 4] 100)
            (gen/return "monospace")]])
        gmap (assoc gmap :nonprop-generic-name gen-nonprop-generic-name)

        gen-func-path
        (gen/return "STUB_func_path")
        gmap (assoc gmap :func-path gen-func-path)

        gen-prop-AT-counter-style
        (gen/tuple
          (gen/return "@counter-style")
          (:nonprop-counter-style-name gmap)
          (gen/return "{")
          (gen/such-that not-empty (gen/vector
            (igen/freq [
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 0] 100)
                (gen/tuple
                  (gen/return "system:")
                  (:nonprop-counter-system gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 1] 100)
                (gen/tuple
                  (gen/return "symbols:")
                  (:nonprop-counter-symbols gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 2] 100)
                (gen/tuple
                  (gen/return "additive-symbols:")
                  (:nonprop-additive-symbols gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 3] 100)
                (gen/tuple
                  (gen/return "negative:")
                  (:nonprop-negative-symbol gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 4] 100)
                (gen/tuple
                  (gen/return "prefix:")
                  (:nonprop-prefix gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 5] 100)
                (gen/tuple
                  (gen/return "suffix:")
                  (:nonprop-suffix gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 6] 100)
                (gen/tuple
                  (gen/return "range:")
                  (:nonprop-range gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 7] 100)
                (gen/tuple
                  (gen/return "pad:")
                  (:nonprop-padding gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 8] 100)
                (gen/tuple
                  (gen/return "speak-as:")
                  (:nonprop-speak-as gmap)
                  (gen/return ";"))]
              [(get weights [:prop-AT-counter-style :cat 3 :plus :alt 9] 100)
                (gen/tuple
                  (gen/return "fallback:")
                  (:nonprop-counter-style-name gmap)
                  (gen/return ";"))]])))
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-counter-style gen-prop-AT-counter-style)

        gen-css-assignment
        (gen/tuple
          (igen/freq [
            [(get weights [:css-assignment :cat 0 :ord 0] 101)
              (:css-known gmap)]
            [(get weights [:css-assignment :cat 0 :ord 1] 100)
              (:css-unknown gmap)]])
          (gen/one-of [
            (gen/return "")
            (gen/return "!important")]))
        gmap (assoc gmap :css-assignment gen-css-assignment)

        gen-nonprop-nth
        (igen/freq [
          [(get weights [:nonprop-nth :alt 0] 100)
            (:nonprop-an-plus-b gmap)]
          [(get weights [:nonprop-nth :alt 1] 100)
            (gen/return "even")]
          [(get weights [:nonprop-nth :alt 2] 100)
            (gen/return "odd")]])
        gmap (assoc gmap :nonprop-nth gen-nonprop-nth)

        gen-css-assignments
        (gen/tuple
          (:css-assignment gmap)
          (gen/vector
            (gen/tuple
              (gen/return ";")
              (:css-assignment gmap)))
          (gen/vector
            (gen/return ";")))
        gmap (assoc gmap :css-assignments gen-css-assignments)

        gen-nonprop-symbol
        (igen/freq [
          [(get weights [:nonprop-symbol :alt 0] 100)
            (:nonprop-string gmap)]
          [(get weights [:nonprop-symbol :alt 1] 100)
            (:nonprop-image gmap)]
          [(get weights [:nonprop-symbol :alt 2] 100)
            (:nonprop-custom-ident gmap)]])
        gmap (assoc gmap :nonprop-symbol gen-nonprop-symbol)

        gen-nonprop-mask-image
        (:prop-mask-image gmap)
        gmap (assoc gmap :nonprop-mask-image gen-nonprop-mask-image)

        gen-prop-AT-media
        (gen/tuple
          (gen/return "@media")
          (:nonprop-media-query-list gmap)
          (gen/return "{")
          (:nonprop-group-rule-body gmap)
          (gen/return "}"))
        gmap (assoc gmap :prop-AT-media gen-prop-AT-media)

        gen-non-negative-integer
        (chuck/string-from-regex #"[0-9]+")
        gmap (assoc gmap :non-negative-integer gen-non-negative-integer)

        gen-func-counters
        (gen/tuple
          (gen/return "counters")
          (gen/return "(")
          (:nonprop-custom-ident gmap)
          (gen/return ",")
          (:nonprop-string gmap)
          (gen/return ",")
          (gen/one-of [
            (gen/return "")
            (igen/freq [
              [(get weights [:func-counters :cat 6 :opt :alt 0] 100)
                (:nonprop-counter-style gmap)]
              [(get weights [:func-counters :cat 6 :opt :alt 1] 100)
                (gen/return "none")]])])
          (gen/return ")"))
        gmap (assoc gmap :func-counters gen-func-counters)]
    gmap))

(defn css3-generators [& [gmap weights]]
  (let [gmap (or gmap {})
        gmap (css3-generators-part-0 gmap weights)
        gmap (css3-generators-part-1 gmap weights)
        gmap (css3-generators-part-2 gmap weights)
        gmap (css3-generators-part-3 gmap weights)
        gmap (css3-generators-part-4 gmap weights)
        gmap (css3-generators-part-5 gmap weights)
        gmap (css3-generators-part-6 gmap weights)
        gmap (css3-generators-part-7 gmap weights)
        gmap (css3-generators-part-8 gmap weights)
        gmap (css3-generators-part-9 gmap weights)
        gmap (css3-generators-part-10 gmap weights)
        gmap (css3-generators-part-11 gmap weights)
        gmap (css3-generators-part-12 gmap weights)
        gmap (css3-generators-part-13 gmap weights)
        gmap (css3-generators-part-14 gmap weights)]
    gmap))