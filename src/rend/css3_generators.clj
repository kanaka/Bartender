(ns rend.css3-generators
   (:require [clojure.test.check.generators :as gen]
             [com.gfredericks.test.chuck.generators :as chuck]
             [mend.util :as util]
             [rend.misc-generators :as misc-gen]))

;; Generated by mend.css3

(def gen-nonprop-url
  (gen/return "url(http://STUB_DOMAIN.com/STUB_PATH/STUB_IMAGE=.png)"))

(def gen-prop--moz-binding
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-url
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-nonprop-single-animation-direction
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "reverse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "alternate")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "alternate-reverse")
        (gen/return " "))]]))

(def gen-nonprop-integer
  (gen/tuple
    (gen/one-of [
      (gen/return "")
      (gen/return "-")])
    (chuck/string-from-regex #"[0-9]+")))

(def gen-nonprop-number
  (gen/frequency [
    [100
      gen-nonprop-integer]
    [100
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          (gen/return "-")])
        (chuck/string-from-regex #"[0-9]+")
        (gen/return ".")
        (chuck/string-from-regex #"[0-9]+"))]]))

(def gen-nonprop-angle
  (gen/tuple
    gen-nonprop-number
    (gen/frequency [
      [100
        (gen/return "deg")]
      [100
        (gen/return "grad")]
      [100
        (gen/return "rad")]
      [100
        (gen/return "turn")]])))

(def gen-func-skew
  (gen/tuple
    (gen/return "skew(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-angle
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-length-unit
  (gen/frequency [
    [100
      (gen/return "em")]
    [100
      (gen/return "ex")]
    [100
      (gen/return "ch")]
    [100
      (gen/return "ic")]
    [100
      (gen/return "rem")]
    [100
      (gen/return "lh")]
    [100
      (gen/return "rlh")]
    [100
      (gen/return "vh")]
    [100
      (gen/return "vw")]
    [100
      (gen/return "vi")]
    [100
      (gen/return "vb")]
    [100
      (gen/return "vmin")]
    [100
      (gen/return "vmax")]
    [100
      (gen/return "px")]
    [100
      (gen/return "mm")]
    [100
      (gen/return "q")]
    [100
      (gen/return "cm")]
    [100
      (gen/return "in")]
    [100
      (gen/return "pt")]
    [100
      (gen/return "pc")]
    [100
      (gen/return "mozmm")]]))

(def gen-nonprop-length
  (gen/tuple
    gen-nonprop-number
    gen-nonprop-length-unit))

(def gen-nonprop-percentage
  (gen/tuple
    gen-nonprop-number
    (gen/return "%")))

(def gen-prop-padding-left
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-nonprop-padding-left
  gen-prop-padding-left)

(def gen-prop-padding-block-start
  (gen/tuple
    gen-nonprop-padding-left
    (gen/return " ")))

(def gen-prop-image-rendering
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "crisp-edges")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pixelated")
        (gen/return " "))]]))

(def gen-prop-right
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-bottom
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-bottom
  gen-prop-bottom)

(def gen-prop-left
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-top
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-left
  gen-prop-left)

(def gen-nonprop-top
  gen-prop-top)

(def gen-nonprop-right
  gen-prop-right)

(def gen-nonprop-shape
  (gen/tuple
    (gen/return "rect(")
    (gen/return " ")
    gen-nonprop-top
    (gen/return " ")
    (gen/return ", ")
    gen-nonprop-right
    (gen/return " ")
    (gen/return ", ")
    gen-nonprop-bottom
    (gen/return " ")
    (gen/return ", ")
    gen-nonprop-left
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-clip
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-shape
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-alpha-value
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-nonprop-hue
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-angle
        (gen/return " "))]]))

(def gen-func-hsl
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "hsl(")
        (gen/return " ")
        (gen/tuple
          gen-nonprop-hue
          (gen/return " ")
          gen-nonprop-percentage
          (gen/return " ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              gen-nonprop-alpha-value
              (gen/return " "))])
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-hue
          (gen/return " ")
          (gen/return ", ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/return ", ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/return ", ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-alpha-value])
          (gen/return " "))
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-deprecated-system-color
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "ActiveBorder")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ActiveCaption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "AppWorkspace")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Background")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ButtonFace")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ButtonHighlight")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ButtonShadow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ButtonText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "CaptionText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "GrayText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Highlight")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "HighlightText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "InactiveBorder")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "InactiveCaption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "InactiveCaptionText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "InfoBackground")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "InfoText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Menu")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "MenuText")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Scrollbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ThreeDDarkShadow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ThreeDFace")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ThreeDHighlight")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ThreeDLightShadow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ThreeDShadow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Window")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "WindowFrame")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "WindowText")
        (gen/return " "))]]))

(def gen-nonprop-hex-color6
  (gen/tuple
    (gen/return "#")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")))

(def gen-func-rgb
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "rgb(")
        (gen/return " ")
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-percentage
                  gen-nonprop-percentage
                  gen-nonprop-percentage)
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-number
                  gen-nonprop-number
                  gen-nonprop-number)
                (gen/return " "))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              gen-nonprop-alpha-value
              (gen/return " "))])
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-percentage
                  (gen/return ", ")
                  gen-nonprop-percentage
                  (gen/return ", ")
                  gen-nonprop-percentage)
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-number
                  (gen/return ", ")
                  gen-nonprop-number
                  (gen/return ", ")
                  gen-nonprop-number)
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-alpha-value])
          (gen/return " "))
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-named-color
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "transparent")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "aliceblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "antiquewhite")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "aqua")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "aquamarine")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "azure")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "beige")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bisque")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "black")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "blanchedalmond")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "blue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "blueviolet")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "brown")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "burlywood")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cadetblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "chartreuse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "chocolate")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "coral")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cornflowerblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cornsilk")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "crimson")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cyan")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkcyan")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkgoldenrod")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkgray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkgreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkgrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkkhaki")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkmagenta")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkolivegreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkorange")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkorchid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkred")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darksalmon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkseagreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkslateblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkslategray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkslategrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkturquoise")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darkviolet")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "deeppink")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "deepskyblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dimgray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dimgrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dodgerblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "firebrick")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "floralwhite")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "forestgreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fuchsia")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "gainsboro")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ghostwhite")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "gold")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "goldenrod")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "gray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "green")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "greenyellow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "grey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "honeydew")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hotpink")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "indianred")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "indigo")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ivory")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "khaki")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lavender")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lavenderblush")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lawngreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lemonchiffon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightcoral")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightcyan")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightgoldenrodyellow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightgray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightgreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightgrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightpink")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightsalmon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightseagreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightskyblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightslategray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightslategrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightsteelblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lightyellow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lime")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "limegreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "linen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "magenta")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "maroon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumaquamarine")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumorchid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumpurple")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumseagreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumslateblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumspringgreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumturquoise")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mediumvioletred")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "midnightblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mintcream")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mistyrose")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "moccasin")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "navajowhite")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "navy")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "oldlace")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "olive")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "olivedrab")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "orange")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "orangered")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "orchid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "palegoldenrod")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "palegreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "paleturquoise")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "palevioletred")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "papayawhip")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "peachpuff")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "peru")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pink")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "plum")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "powderblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "purple")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rebeccapurple")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "red")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rosybrown")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "royalblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "saddlebrown")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "salmon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sandybrown")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "seagreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "seashell")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sienna")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "silver")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "skyblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "slateblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "slategray")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "slategrey")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "snow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "springgreen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "steelblue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tan")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "teal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "thistle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tomato")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "turquoise")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "violet")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "wheat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "white")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "whitesmoke")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "yellow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "yellowgreen")
        (gen/return " "))]]))

(def gen-nonprop-hex-color3
  (gen/tuple
    (gen/return "#")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")
    (chuck/string-from-regex #"[0-9A-F]")))

(def gen-nonprop-hex-color
  (gen/frequency [
    [100
      gen-nonprop-hex-color3]
    [100
      gen-nonprop-hex-color6]]))

(def gen-func-hsla
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "hsla(")
        (gen/return " ")
        (gen/tuple
          gen-nonprop-hue
          (gen/return " ")
          gen-nonprop-percentage
          (gen/return " ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              gen-nonprop-alpha-value
              (gen/return " "))])
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-hue
          (gen/return " ")
          (gen/return ", ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/return ", ")
          gen-nonprop-percentage
          (gen/return " ")
          (gen/return ", ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-alpha-value])
          (gen/return " "))
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-func-rgba
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "rgba(")
        (gen/return " ")
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-percentage
                  gen-nonprop-percentage
                  gen-nonprop-percentage)
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-number
                  gen-nonprop-number
                  gen-nonprop-number)
                (gen/return " "))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              gen-nonprop-alpha-value
              (gen/return " "))])
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-percentage
                  (gen/return ", ")
                  gen-nonprop-percentage
                  (gen/return ", ")
                  gen-nonprop-percentage)
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/tuple
                  gen-nonprop-number
                  (gen/return ", ")
                  gen-nonprop-number
                  (gen/return ", ")
                  gen-nonprop-number)
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-alpha-value])
          (gen/return " "))
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-color
  (gen/frequency [
    [100
      (gen/tuple
        gen-func-rgb
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-rgba
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-hsl
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-hsla
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-hex-color
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-named-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "currentcolor")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-deprecated-system-color
        (gen/return " "))]]))

(def gen-nonprop-shadow
  (gen/tuple
    (gen/one-of [
      (gen/return "")
      (gen/return "inset")])
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          gen-nonprop-length)]
      [100
        (gen/tuple
          gen-nonprop-length
          gen-nonprop-length
          gen-nonprop-length)]
      [100
        (gen/tuple
          gen-nonprop-length
          gen-nonprop-length
          gen-nonprop-length
          gen-nonprop-length)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-color])
    (gen/return " ")))

(def gen-prop-box-shadow
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-shadow
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-shadow))
        (gen/return " "))]]))

(def gen-prop-flex-grow
  (gen/tuple
    gen-nonprop-number
    (gen/return " ")))

(def gen-prop-width
  (gen/frequency [
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-percentage
              (gen/return " "))]])
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "border-box")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "content-box")
                (gen/return " "))]])])
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "available")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-width
  gen-prop-width)

(def gen-prop-flex-basis
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "content")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-width
        (gen/return " "))]]))

(def gen-nonprop-flex-basis
  gen-prop-flex-basis)

(def gen-nonprop-length-percentage
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-flex-shrink
  (gen/tuple
    gen-nonprop-number
    (gen/return " ")))

(def gen-nonprop-flex-shrink
  gen-prop-flex-shrink)

(def gen-nonprop-flex-grow
  gen-prop-flex-grow)

(def gen-prop-flex
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-flex-grow
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    gen-nonprop-flex-shrink])
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-flex-basis
                  (gen/return " "))]]))))
        (gen/return " "))]]))

(def gen-nonprop-flex
  gen-prop-flex)

(def gen-nonprop-track-breadth
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-flex
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-fixed-breadth
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")))

(def gen-nonprop-inflexible-breadth
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-fixed-size
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-fixed-breadth
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "minmax(")
        (gen/return " ")
        gen-nonprop-fixed-breadth
        (gen/return " ")
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-track-breadth
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "minmax(")
        (gen/return " ")
        gen-nonprop-inflexible-breadth
        (gen/return " ")
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-fixed-breadth
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-custom-ident
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (chuck/string-from-regex #"[A-Za-z0-9_-]")]
      [100
        (chuck/string-from-regex #"\\[0-9A-F][0-9A-F]?[0-9A-F]?[0-9A-F]?[0-9A-F]?[0-9A-F]?")]]))))

(def gen-nonprop-positive-integer
  (chuck/string-from-regex #"[0-9]+"))

(def gen-nonprop-line-names
  (gen/tuple
    (gen/return "[")
    (gen/return " ")
    (gen/vector
      gen-nonprop-custom-ident)
    (gen/return " ")
    (gen/return "]")
    (gen/return " ")))

(def gen-nonprop-track-size
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-track-breadth
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "minmax(")
        (gen/return " ")
        gen-nonprop-inflexible-breadth
        (gen/return " ")
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-track-breadth
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content(")
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-percentage
              (gen/return " "))]])
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-track-repeat
  (gen/tuple
    (gen/return "repeat(")
    (gen/return " ")
    gen-nonprop-positive-integer
    (gen/return " ")
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        gen-nonprop-track-size
        (gen/return " "))))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-track-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-track-size
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-track-repeat
              (gen/return " "))]])
        (gen/return " "))))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")))

(def gen-nonprop-fixed-repeat
  (gen/tuple
    (gen/return "repeat(")
    (gen/return " ")
    gen-nonprop-positive-integer
    (gen/return " ")
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        gen-nonprop-fixed-size
        (gen/return " "))))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-auto-repeat
  (gen/tuple
    (gen/return "repeat(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "auto-fill")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "auto-fit")
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        gen-nonprop-fixed-size
        (gen/return " "))))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-auto-track-list
  (gen/tuple
    (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-fixed-size
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-fixed-repeat
              (gen/return " "))]])
        (gen/return " ")))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")
    gen-nonprop-auto-repeat
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-fixed-size
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-fixed-repeat
              (gen/return " "))]])
        (gen/return " ")))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")))

(def gen-prop-grid-template-columns
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-track-list
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-auto-track-list
        (gen/return " "))]]))

(def gen-nonprop-grid-template-columns
  gen-prop-grid-template-columns)

(def gen-prop-resize
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "both")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vertical")
        (gen/return " "))]]))

(def gen-prop-column-width
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-column-width
  gen-prop-column-width)

(def gen-prop-column-count
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-column-count
  gen-prop-column-count)

(def gen-prop-columns
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-column-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-column-count
          (gen/return " "))]]))))

(def gen-prop-list-style-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "inside")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "outside")
        (gen/return " "))]]))

(def gen-nonprop-list-style-position
  gen-prop-list-style-position)

(def gen-nonprop-display-outside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "block")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "run-in")
        (gen/return " "))]]))

(def gen-nonprop-display-listitem
  (gen/tuple
    (gen/return "list-item")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-display-outside])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            (gen/return "flow")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "flow-root")
            (gen/return " "))]])])
    (gen/return " ")))

(def gen-prop-text-decoration-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "solid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "double")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dotted")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dashed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "wavy")
        (gen/return " "))]]))

(def gen-prop-text-decoration-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-text-decoration-style
  gen-prop-text-decoration-style)

(def gen-prop-text-decoration-line
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "underline")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "overline")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "line-through")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "blink")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-nonprop-text-decoration-line
  gen-prop-text-decoration-line)

(def gen-nonprop-text-decoration-color
  gen-prop-text-decoration-color)

(def gen-prop-text-decoration
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-text-decoration-line
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-text-decoration-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-text-decoration-color
          (gen/return " "))]]))))

(def gen-nonprop-resolution
  (gen/tuple
    gen-nonprop-number
    (gen/frequency [
      [100
        (gen/return "dpi")]
      [100
        (gen/return "dpcm")]
      [100
        (gen/return "dppx")]])))

(def gen-nonprop-string
  (gen/tuple
    (gen/return "'")
    (chuck/string-from-regex #"[A-Za-z0-9 _\"-]")
    (gen/return "'")))

(def gen-nonprop-id-selector
  gen-nonprop-custom-ident)

(def gen-func-element
  (gen/tuple
    (gen/return "element(")
    (gen/return " ")
    gen-nonprop-id-selector
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-image
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-url
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-element
        (gen/return " "))]]))

(def gen-nonprop-image-set-option
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-image
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-string
          (gen/return " "))]])
    (gen/return " ")
    gen-nonprop-resolution
    (gen/return " ")))

(def gen-nonprop-br-width
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "thin")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "medium")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "thick")
        (gen/return " "))]]))

(def gen-nonprop-br-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dotted")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dashed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "solid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "double")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "groove")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ridge")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inset")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "outset")
        (gen/return " "))]]))

(def gen-prop-border
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-br-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-br-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-font-variant-caps
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "small-caps")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all-small-caps")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "petite-caps")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all-petite-caps")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "unicase")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "titling-caps")
        (gen/return " "))]]))

(def gen-nonprop-ident
  gen-nonprop-custom-ident)

(def gen-nonprop-any-value
  (gen/return "STUB_any_value"))

(def gen-nonprop-time
  (gen/tuple
    gen-nonprop-number
    (gen/frequency [
      [100
        (gen/return "s")]
      [100
        (gen/return "ms")]])))

(def gen-prop-transition-duration
  (gen/tuple
    gen-nonprop-time
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-time))
    (gen/return " ")))

(def gen-prop-offset-block-end
  (gen/tuple
    gen-nonprop-left
    (gen/return " ")))

(def gen-nonprop-ending-shape
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "circle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ellipse")
        (gen/return " "))]]))

(def gen-nonprop-position
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "top")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "bottom")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]])
          (gen/return " ")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "top")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "bottom")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  gen-nonprop-length-percentage])
                (gen/return " "))]])
          (gen/return " ")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  gen-nonprop-length-percentage])
                (gen/return " "))]])
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-size
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "closest-side")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "farthest-side")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "closest-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "farthest-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)
        (gen/return " "))]]))

(def gen-nonprop-color-stop
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-length-percentage])
    (gen/return " ")))

(def gen-nonprop-color-stop-list
  (gen/tuple
    (gen/tuple
      gen-nonprop-color-stop
      (gen/return ", ")
      gen-nonprop-color-stop)
    (gen/return " ")))

(def gen-func-repeating-radial-gradient
  (gen/tuple
    (gen/return "repeating-radial-gradient(")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/such-that not-empty (gen/vector
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-ending-shape
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-size
              (gen/return " "))]])))])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "at")
        (gen/return " ")
        gen-nonprop-position
        (gen/return " "))])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-color-stop-list
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-overflow-x
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scroll")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-angle-percentage
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-angle
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-nonprop-shape-radius
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "closest-side")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "farthest-side")
        (gen/return " "))]]))

(def gen-func-circle
  (gen/tuple
    (gen/return "circle(")
    (gen/return " ")
    gen-nonprop-shape-radius
    (gen/one-of [
      (gen/return "")
      (gen/return " ")])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "at")
        (gen/return " ")
        gen-nonprop-position
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop--moz-border-top-colors
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/vector
          (gen/return " "))
        (gen/return " ")
        gen-nonprop-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-vertical-align
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "baseline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sub")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "super")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "text-top")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "text-bottom")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "middle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "top")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bottom")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]]))

(def gen-prop-animation-delay
  (gen/tuple
    gen-nonprop-time
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-time))
    (gen/return " ")))

(def gen-nonprop-counter-style-name
  (gen/tuple
    gen-nonprop-custom-ident
    (gen/return " ")))

(def gen-nonprop-counter-style
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-counter-style-name
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "symbols()")
        (gen/return " "))]]))

(def gen-prop-list-style-type
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-counter-style
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-nonprop-list-style-type
  gen-prop-list-style-type)

(def gen-prop-scroll-snap-type-y
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mandatory")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "proximity")
        (gen/return " "))]]))

(def gen-prop-caption-side
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "top")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bottom")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "block-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "block-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-end")
        (gen/return " "))]]))

(def gen-prop-text-transform
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "capitalize")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "uppercase")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lowercase")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "full-width")
        (gen/return " "))]]))

(def gen-func-minmax
  (gen/tuple
    (gen/return "minmax(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-percentage
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-flex
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "min-content")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "max-content")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "auto")
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-percentage
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-flex
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "min-content")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "max-content")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "auto")
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-repeat-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "repeat-x")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "repeat-y")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return "repeat")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "space")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "round")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "no-repeat")
                  (gen/return " "))]])]
          [100
            (gen/tuple
              (gen/frequency [
                [100
                  (gen/tuple
                    (gen/return "repeat")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "space")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "round")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "no-repeat")
                    (gen/return " "))]])
              (gen/frequency [
                [100
                  (gen/tuple
                    (gen/return "repeat")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "space")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "round")
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "no-repeat")
                    (gen/return " "))]]))]])
        (gen/return " "))]]))

(def gen-prop-font-synthesis
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "weight")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "style")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-min-height
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-available")
        (gen/return " "))]]))

(def gen-prop--webkit-text-stroke-width
  (gen/tuple
    gen-nonprop-length
    (gen/return " ")))

(def gen-nonprop-keyframe-selector
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "from")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "to")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-grid-column-gap
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")))

(def gen-prop-border-right-style
  (gen/tuple
    gen-nonprop-br-style
    (gen/return " ")))

(def gen-prop-transform-origin
  (gen/frequency [
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "top")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "bottom")
              (gen/return " "))]])
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]])
          (gen/return " ")
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "top")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "bottom")
                (gen/return " "))]])
          (gen/return " "))
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          gen-nonprop-length])
        (gen/return " "))]]))

(def gen-prop-font-size-adjust
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]]))

(def gen-prop-grid-auto-rows
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      gen-nonprop-track-size))
    (gen/return " ")))

(def gen-nonprop-grid-auto-rows
  gen-prop-grid-auto-rows)

(def gen-prop-text-size-adjust
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-align-items
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "flex-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "baseline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stretch")
        (gen/return " "))]]))

(def gen-prop-border-right
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-br-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-br-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-all
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "initial")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inherit")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "unset")
        (gen/return " "))]]))

(def gen-nonprop-box
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "border-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "padding-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "content-box")
        (gen/return " "))]]))

(def gen-nonprop-shape-box
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-box
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "margin-box")
        (gen/return " "))]]))

(def gen-nonprop-geometry-box
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-shape-box
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stroke-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "view-box")
        (gen/return " "))]]))

(def gen-prop-column-fill
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "balance")
        (gen/return " "))]]))

(def gen-func-rotate
  (gen/tuple
    (gen/return "rotate(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-column-rule-style
  (gen/tuple
    gen-nonprop-br-style
    (gen/return " ")))

(def gen-prop-scroll-snap-type-x
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mandatory")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "proximity")
        (gen/return " "))]]))

(def gen-nonprop-single-transition-property
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "all")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-custom-ident
        (gen/return " "))]]))

(def gen-nonprop-side-or-corner
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "top")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "bottom")
                (gen/return " "))]])
          (gen/return " "))]]))))

(def gen-func-linear-gradient
  (gen/tuple
    (gen/return "linear-gradient(")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-angle
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "to")
            (gen/return " ")
            gen-nonprop-side-or-corner
            (gen/return " "))]])])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-color-stop-list
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-numeric-figure-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "lining-nums")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "oldstyle-nums")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-numeric-spacing-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "proportional-nums")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "tabular-nums")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-numeric-fraction-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "diagonal-fractions")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "stacked-fractions")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-font-variant-numeric
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-numeric-figure-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-numeric-spacing-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-numeric-fraction-values
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "ordinal")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "slashed-zero")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-text-emphasis-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "filled")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "open")
                      (gen/return " "))]])
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "dot")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "circle")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "double-circle")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "triangle")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "sesame")
                      (gen/return " "))]])
                (gen/return " "))]])))
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]]))

(def gen-nonprop-text-emphasis-style
  gen-prop-text-emphasis-style)

(def gen-func-leader
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "leader(")
        (gen/return " ")
        (gen/return "dotted")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "solid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-grid-line
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-custom-ident
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-integer
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-custom-ident])
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/return "span")
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  gen-nonprop-integer
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-custom-ident
                  (gen/return " "))]])))
          (gen/return " "))
        (gen/return " "))]]))

(def gen-prop-grid-row-end
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")))

(def gen-prop--webkit-mask-repeat-x
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "repeat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "no-repeat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "round")
        (gen/return " "))]]))

(def gen-prop-line-height
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-nonprop-line-height
  gen-prop-line-height)

(def gen-prop--moz-user-input
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "enabled")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "disabled")
        (gen/return " "))]]))

(def gen-prop-scroll-snap-destination
  (gen/tuple
    gen-nonprop-position
    (gen/return " ")))

(def gen-prop-clear
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "both")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-end")
        (gen/return " "))]]))

(def gen-nonprop-east-asian-variant-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "jis78")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "jis83")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "jis90")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "jis04")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "simplified")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "traditional")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-outline-offset
  (gen/tuple
    gen-nonprop-length
    (gen/return " ")))

(def gen-nonprop-ratio
  (gen/tuple
    gen-nonprop-positive-integer
    (gen/return "/")
    gen-nonprop-positive-integer))

(def gen-nonprop-viewport-length
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length-percentage
        (gen/return " "))]]))

(def gen-prop-column-rule-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-nonprop-column-rule-width
  gen-prop-column-rule-width)

(def gen-prop-column-rule-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-column-rule-color
  gen-prop-column-rule-color)

(def gen-nonprop-column-rule-style
  gen-prop-column-rule-style)

(def gen-prop-column-rule
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-column-rule-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-column-rule-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-column-rule-color
          (gen/return " "))]]))))

(def gen-nonprop-bg-image
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]]))

(def gen-func-skewY
  (gen/tuple
    (gen/return "skewY(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-border-style
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-br-style]
      [100
        (gen/tuple
          gen-nonprop-br-style
          gen-nonprop-br-style)]
      [100
        (gen/tuple
          gen-nonprop-br-style
          gen-nonprop-br-style
          gen-nonprop-br-style)]
      [100
        (gen/tuple
          gen-nonprop-br-style
          gen-nonprop-br-style
          gen-nonprop-br-style
          gen-nonprop-br-style)]])
    (gen/return " ")))

(def gen-nonprop-border-style
  gen-prop-border-style)

(def gen-prop--webkit-border-before-style
  (gen/tuple
    gen-nonprop-border-style
    (gen/return " ")))

(def gen-prop-orphans
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop-shape-image-threshold
  (gen/tuple
    gen-nonprop-number
    (gen/return " ")))

(def gen-func-scaleY
  (gen/tuple
    (gen/return "scaleY(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-discretionary-lig-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "discretionary-ligatures")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "no-discretionary-ligatures")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-border-block-start-style
  (gen/tuple
    gen-nonprop-border-style
    (gen/return " ")))

(def gen-nonprop-blend-mode
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "multiply")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "screen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "overlay")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "darken")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lighten")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "color-dodge")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "color-burn")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hard-light")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "soft-light")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "difference")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "exclusion")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hue")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "saturation")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "color")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "luminosity")
        (gen/return " "))]]))

(def gen-prop-background-blend-mode
  (gen/tuple
    gen-nonprop-blend-mode
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-blend-mode))
    (gen/return " ")))

(def gen-prop-overflow-clip-box
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "padding-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "content-box")
        (gen/return " "))]]))

(def gen-prop-box-lines
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "single")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "multiple")
        (gen/return " "))]]))

(def gen-prop-border-width
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-br-width]
      [100
        (gen/tuple
          gen-nonprop-br-width
          gen-nonprop-br-width)]
      [100
        (gen/tuple
          gen-nonprop-br-width
          gen-nonprop-br-width
          gen-nonprop-br-width)]
      [100
        (gen/tuple
          gen-nonprop-br-width
          gen-nonprop-br-width
          gen-nonprop-br-width
          gen-nonprop-br-width)]])
    (gen/return " ")))

(def gen-nonprop-border-width
  gen-prop-border-width)

(def gen-prop-border-inline-end-width
  (gen/tuple
    gen-nonprop-border-width
    (gen/return " ")))

(def gen-nonprop-custom-property-name
  (gen/return "STUB_custom_property"))

(def gen-nonprop-declaration-value
  (gen/return "STUB_declaration_value"))

(def gen-func-var
  (gen/tuple
    (gen/return "var(")
    (gen/return " ")
    gen-nonprop-custom-property-name
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-declaration-value
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-border-image-source
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]]))

(def gen-prop-font-language-override
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]]))

(def gen-prop-word-spacing
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length-percentage
        (gen/return " "))]]))

(def gen-prop-opacity
  (gen/tuple
    gen-nonprop-number
    (gen/return " ")))

(def gen-nonprop-attachment
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "scroll")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fixed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "local")
        (gen/return " "))]]))

(def gen-nonprop-single-animation-fill-mode
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "forwards")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "backwards")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "both")
        (gen/return " "))]]))

(def gen-prop-display-list
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "list-item")
        (gen/return " "))]]))

(def gen-prop-inline-size
  (gen/tuple
    gen-nonprop-width
    (gen/return " ")))

(def gen-prop-grid-row-gap
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")))

(def gen-prop-grid-template-rows
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-track-list
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-auto-track-list
        (gen/return " "))]]))

(def gen-nonprop-grid-template-rows
  gen-prop-grid-template-rows)

(def gen-nonprop-explicit-track-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [
          (gen/return "")
          gen-nonprop-line-names])
        (gen/return " ")
        gen-nonprop-track-size
        (gen/return " "))))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-line-names])
    (gen/return " ")))

(def gen-prop-grid-template
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-grid-template-rows
          (gen/return " ")
          (gen/return "/")
          (gen/return " ")
          gen-nonprop-grid-template-columns
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              gen-nonprop-line-names])
            (gen/return " ")
            gen-nonprop-string
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              gen-nonprop-track-size])
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              gen-nonprop-line-names])
            (gen/return " "))))
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-explicit-track-list
            (gen/return " "))])
        (gen/return " "))]]))

(def gen-prop-outline-color
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "invert")
        (gen/return " "))]]))

(def gen-nonprop-outline-color
  gen-prop-outline-color)

(def gen-prop-border-left-style
  (gen/tuple
    gen-nonprop-br-style
    (gen/return " ")))

(def gen-prop-widows
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop-break-inside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-page")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-region")
        (gen/return " "))]]))

(def gen-nonprop-keyframes-name
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-custom-ident
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]]))

(def gen-prop-animation-name
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "none")
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-keyframes-name
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-keyframes-name
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-padding-block-end
  (gen/tuple
    gen-nonprop-padding-left
    (gen/return " ")))

(def gen-func-target-counters
  (gen/tuple
    (gen/return "target-counters(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-string
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-url
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-custom-ident
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-string
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-counter-style
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-target-text
  (gen/tuple
    (gen/return "target-text(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-string
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-url
          (gen/return " "))]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "content")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "before")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "after")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "first-letter")
              (gen/return " "))]])
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-target-counter
  (gen/tuple
    (gen/return "target-counter(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-string
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-url
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-custom-ident
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-counter-style
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-target
  (gen/frequency [
    [100
      (gen/tuple
        gen-func-target-counter
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-target-counters
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-target-text
        (gen/return " "))]]))

(def gen-func-rotateY
  (gen/tuple
    (gen/return "rotateY(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-mask-clip
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-geometry-box
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "no-clip")
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-geometry-box
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "no-clip")
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-nonprop-mask-clip
  gen-prop-mask-clip)

(def gen-prop-flex-wrap
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "nowrap")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "wrap")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "wrap-reverse")
        (gen/return " "))]]))

(def gen-nonprop-flex-wrap
  gen-prop-flex-wrap)

(def gen-prop-outline-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-prop-grid-auto-columns
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      gen-nonprop-track-size))
    (gen/return " ")))

(def gen-nonprop-grid-template
  gen-prop-grid-template)

(def gen-nonprop-grid-auto-columns
  gen-prop-grid-auto-columns)

(def gen-prop-grid
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-grid-template
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-grid-template-rows
        (gen/return " ")
        (gen/return "/")
        (gen/return " ")
        (gen/tuple
          (gen/return "auto-flow")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "dense")])
          (gen/return " "))
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          gen-nonprop-grid-auto-columns])
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/return "auto-flow")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "dense")])
          (gen/return " "))
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          gen-nonprop-grid-auto-rows])
        (gen/return " ")
        (gen/return "/")
        (gen/return " ")
        gen-nonprop-grid-template-columns
        (gen/return " "))]]))

(def gen-prop-padding-inline-end
  (gen/tuple
    gen-nonprop-padding-left
    (gen/return " ")))

(def gen-prop-counter-reset
  (gen/frequency [
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/tuple
            gen-nonprop-custom-ident
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              gen-nonprop-integer])
            (gen/return " "))))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-text-align-last
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "justify")
        (gen/return " "))]]))

(def gen-nonprop-display-inside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "flow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flow-root")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "grid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "subgrid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby")
        (gen/return " "))]]))

(def gen-nonprop-mask-attachment
  (gen/return "STUB_mask_attachment"))

(def gen-nonprop-number-percentage
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-func-contrast
  (gen/tuple
    (gen/return "contrast(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-brightness
  (gen/tuple
    (gen/return "brightness(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-drop-shadow
  (gen/tuple
    (gen/return "drop-shadow(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          gen-nonprop-length)]
      [100
        (gen/tuple
          gen-nonprop-length
          gen-nonprop-length
          gen-nonprop-length)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-color])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-saturate
  (gen/tuple
    (gen/return "saturate(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-hue-rotate
  (gen/tuple
    (gen/return "hue-rotate(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-blur
  (gen/tuple
    (gen/return "blur(")
    (gen/return " ")
    gen-nonprop-length
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-opacity
  (gen/tuple
    (gen/return "opacity(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-grayscale
  (gen/tuple
    (gen/return "grayscale(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-sepia
  (gen/tuple
    (gen/return "sepia(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-invert
  (gen/tuple
    (gen/return "invert(")
    (gen/return " ")
    gen-nonprop-number-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-filter-function
  (gen/frequency [
    [100
      (gen/tuple
        gen-func-blur
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-brightness
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-contrast
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-drop-shadow
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-grayscale
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-hue-rotate
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-invert
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-opacity
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-sepia
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-saturate
        (gen/return " "))]]))

(def gen-nonprop-filter-function-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-filter-function
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-url
            (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-backdrop-filter
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-filter-function-list
        (gen/return " "))]]))

(def gen-prop-display-inside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "block")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "grid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby")
        (gen/return " "))]]))

(def gen-nonprop-attr-fallback
  (gen/return "STUB_attr_fallback"))

(def gen-nonprop-attr-name
  (gen/return "STUB_attr_name"))

(def gen-nonprop-type-or-unit
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "string")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "integer")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "color")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "url")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "integer")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "number")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "length")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "angle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "time")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "frequency")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "em")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ex")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "px")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vw")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vh")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vmin")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vmax")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mm")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "q")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cm")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "in")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pt")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pc")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "deg")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "grad")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rad")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ms")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "s")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "Hz")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "kHz")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "%")
        (gen/return " "))]]))

(def gen-func-attr
  (gen/tuple
    (gen/return "attr(")
    (gen/return " ")
    gen-nonprop-attr-name
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-type-or-unit])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-attr-fallback
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop--webkit-text-stroke-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-animation-duration
  (gen/tuple
    gen-nonprop-time
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-time))
    (gen/return " ")))

(def gen-prop-scroll-snap-points-y
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "repeat(")
        (gen/return " ")
        gen-nonprop-length-percentage
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-prop-user-select
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "text")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "contain")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all")
        (gen/return " "))]]))

(def gen-prop-border-block-start
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-border-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-border-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-nonprop-shadow-t
  (gen/tuple
    (gen/tuple
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-length
            gen-nonprop-length)]
        [100
          (gen/tuple
            gen-nonprop-length
            gen-nonprop-length
            gen-nonprop-length)]])
      (gen/return " ")
      (gen/one-of [
        (gen/return "")
        gen-nonprop-color])
      (gen/return " "))
    (gen/return " ")))

(def gen-prop-text-shadow
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-shadow-t
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-shadow-t))
        (gen/return " "))]]))

(def gen-nonprop-feature-value-name
  (gen/tuple
    gen-nonprop-custom-ident
    (gen/return " ")))

(def gen-prop--moz-window-shadow
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "default")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menu")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tooltip")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sheet")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop--webkit-text-stroke
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-border-left-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-direction
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "ltr")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rtl")
        (gen/return " "))]]))

(def gen-prop-min-width
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-available")
        (gen/return " "))]]))

(def gen-nonprop-min-width
  gen-prop-min-width)

(def gen-prop-min-block-size
  (gen/tuple
    gen-nonprop-min-width
    (gen/return " ")))

(def gen-nonprop-single-transition-timing-function
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "ease")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "linear")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ease-in")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ease-out")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ease-in-out")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "step-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "step-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "steps(")
        (gen/return " ")
        gen-nonprop-integer
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return "start")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "end")
                  (gen/return " "))]])
            (gen/return " "))])
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cubic-bezier(")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " ")
        (gen/return ", ")
        gen-nonprop-number
        (gen/return " ")
        (gen/return ", ")
        gen-nonprop-number
        (gen/return " ")
        (gen/return ", ")
        gen-nonprop-number
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-nonprop-single-transition
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "none")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-single-transition-property
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-time
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-transition-timing-function
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-time
          (gen/return " "))]]))))

(def gen-prop-marker-offset
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-image-resolution
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            (gen/return "from-image")
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-resolution
            (gen/return " "))]])))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/return "snap")])
    (gen/return " ")))

(def gen-prop-offset-inline-start
  (gen/tuple
    gen-nonprop-left
    (gen/return " ")))

(def gen-nonprop-mask-source
  (gen/tuple
    gen-nonprop-url
    (gen/return " ")))

(def gen-nonprop-mask-reference
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-mask-source
        (gen/return " "))]]))

(def gen-prop-mask-image
  (gen/tuple
    gen-nonprop-mask-reference
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-mask-reference))
    (gen/return " ")))

(def gen-nonprop-mask-image
  gen-prop-mask-image)

(def gen-prop--webkit-mask-image
  (gen/tuple
    gen-nonprop-mask-image
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-mask-image
        (gen/return " ")))
    (gen/return " ")))

(def gen-prop-border-top-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-border-right-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-page-margin-box-type
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "@top-left-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@top-left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@top-center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@top-right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@top-right-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@bottom-left-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@bottom-left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@bottom-center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@bottom-right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@bottom-right-corner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@left-top")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@left-middle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@left-bottom")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@right-top")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@right-middle")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@right-bottom")
        (gen/return " "))]]))

(def gen-nonprop-declaration-list
  (gen/return "STUB_declaration_list"))

(def gen-nonprop-page-margin-box
  (gen/tuple
    gen-nonprop-page-margin-box-type
    (gen/return " ")
    (gen/return "{")
    gen-nonprop-declaration-list
    (gen/return " ")
    (gen/return "}")
    (gen/return " ")))

(def gen-func-translateY
  (gen/tuple
    (gen/return "translateY(")
    (gen/return " ")
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-scale
  (gen/tuple
    (gen/return "scale(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-rotateZ
  (gen/tuple
    (gen/return "rotateZ(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-rotate3d
  (gen/tuple
    (gen/return "rotate3d(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-skewX
  (gen/tuple
    (gen/return "skewX(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-matrix3d
  (gen/tuple
    (gen/return "matrix3d(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return ",")
          (gen/return " ")
          gen-nonprop-number
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " ")))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " ")))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " ")))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " "))
          (gen/tuple
            (gen/return ",")
            (gen/return " ")
            gen-nonprop-number
            (gen/return " ")))]])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-translate
  (gen/tuple
    (gen/return "translate(")
    (gen/return " ")
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-length-percentage
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-scaleZ
  (gen/tuple
    (gen/return "scaleZ(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-scale3d
  (gen/tuple
    (gen/return "scale3d(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-rotateX
  (gen/tuple
    (gen/return "rotateX(")
    (gen/return " ")
    gen-nonprop-angle
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-scaleX
  (gen/tuple
    (gen/return "scaleX(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-matrix
  (gen/tuple
    (gen/return "matrix(")
    (gen/return " ")
    gen-nonprop-number
    (gen/return " ")
    (gen/tuple
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " "))
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " "))
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " "))
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " "))
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-number
        (gen/return " ")))
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-perspective
  (gen/tuple
    (gen/return "perspective(")
    (gen/return " ")
    gen-nonprop-length
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-translate3d
  (gen/tuple
    (gen/return "translate3d(")
    (gen/return " ")
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-length
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-translateX
  (gen/tuple
    (gen/return "translateX(")
    (gen/return " ")
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-translateZ
  (gen/tuple
    (gen/return "translateZ(")
    (gen/return " ")
    gen-nonprop-length
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-transform-function
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/such-that not-empty (gen/vector
        (gen/frequency [
          [100
            (gen/tuple
              gen-func-matrix
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-translate
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-translateX
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-translateY
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-scale
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-scaleX
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-scaleY
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-rotate
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-skew
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-skewX
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-skewY
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-matrix3d
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-translate3d
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-translateZ
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-scale3d
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-scaleZ
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-rotate3d
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-rotateX
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-rotateY
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-rotateZ
              (gen/return " "))]
          [100
            (gen/tuple
              gen-func-perspective
              (gen/return " "))]])))))
    (gen/return " ")))

(def gen-nonprop-transform-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      gen-nonprop-transform-function))
    (gen/return " ")))

(def gen-prop-transform
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-transform-list
        (gen/return " "))]]))

(def gen-func-repeating-linear-gradient
  (gen/tuple
    (gen/return "repeating-linear-gradient(")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-angle
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "to")
            (gen/return " ")
            gen-nonprop-side-or-corner
            (gen/return " "))]])])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-color-stop-list
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-radial-gradient
  (gen/tuple
    (gen/return "radial-gradient(")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/such-that not-empty (gen/vector
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-ending-shape
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-size
              (gen/return " "))]])))])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "at")
        (gen/return " ")
        gen-nonprop-position
        (gen/return " "))])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    gen-nonprop-color-stop-list
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-gradient
  (gen/frequency [
    [100
      (gen/tuple
        gen-func-linear-gradient
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-repeating-linear-gradient
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-radial-gradient
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-repeating-radial-gradient
        (gen/return " "))]]))

(def gen-prop-border-inline-start
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-border-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-border-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-border-right-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-nonprop-east-asian-width-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "full-width")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "proportional-width")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-display-legacy
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "inline-block")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-list-item")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-table")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-flex")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-grid")
        (gen/return " "))]]))

(def gen-nonprop-feature-tag-value
  (gen/tuple
    gen-nonprop-string
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-integer
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "on")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "off")
            (gen/return " "))]])])
    (gen/return " ")))

(def gen-prop-margin-bottom
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-shape-margin
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")))

(def gen-prop-text-emphasis-position
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "over")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "under")
          (gen/return " "))]])
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "right")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "left")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-display-internal
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "table-row-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-header-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-footer-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-row")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-cell")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-column-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-caption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-base")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-text")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-base-container")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-text-container")
        (gen/return " "))]]))

(def gen-prop-ime-mode
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "active")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inactive")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "disabled")
        (gen/return " "))]]))

(def gen-nonprop-frequency
  (gen/tuple
    gen-nonprop-number
    (gen/frequency [
      [100
        (gen/return "Hz")]
      [100
        (gen/return "kHz")]])))

(def gen-nonprop-frequency-percentage
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-frequency
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-border-inline-start-width
  (gen/tuple
    gen-nonprop-border-width
    (gen/return " ")))

(def gen-nonprop-an-plus-b
  (gen/return "STUB_an_plus_b"))

(def gen-prop-outline-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-br-style
        (gen/return " "))]]))

(def gen-nonprop-outline-style
  gen-prop-outline-style)

(def gen-prop-border-inline-end-style
  (gen/tuple
    gen-nonprop-border-style
    (gen/return " ")))

(def gen-prop-backface-visibility
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]]))

(def gen-prop-border-block-end
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-border-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-border-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-background-position
  (gen/tuple
    gen-nonprop-position
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-position))
    (gen/return " ")))

(def gen-prop-margin-left
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-border-inline-start-style
  (gen/tuple
    gen-nonprop-border-style
    (gen/return " ")))

(def gen-prop-border-bottom-style
  (gen/tuple
    gen-nonprop-br-style
    (gen/return " ")))

(def gen-prop-max-width
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-available")
        (gen/return " "))]]))

(def gen-nonprop-max-width
  gen-prop-max-width)

(def gen-prop-max-inline-size
  (gen/tuple
    gen-nonprop-max-width
    (gen/return " ")))

(def gen-prop-scroll-snap-points-x
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "repeat(")
        (gen/return " ")
        gen-nonprop-length-percentage
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-prop-transition-delay
  (gen/tuple
    gen-nonprop-time
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-time))
    (gen/return " ")))

(def gen-prop--moz-user-modify
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "read-only")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "read-write")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "write-only")
        (gen/return " "))]]))

(def gen-nonprop-animateable-feature
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "scroll-position")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "contents")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-custom-ident
        (gen/return " "))]]))

(def gen-prop-will-change
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-animateable-feature
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-animateable-feature))
        (gen/return " "))]]))

(def gen-prop-overflow
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scroll")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-grid-row-gap
  gen-prop-grid-row-gap)

(def gen-nonprop-grid-column-gap
  gen-prop-grid-column-gap)

(def gen-prop-grid-gap
  (gen/tuple
    gen-nonprop-grid-row-gap
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-grid-column-gap])
    (gen/return " ")))

(def gen-nonprop-x
  (gen/return "11"))

(def gen-prop-visibility
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "collapse")
        (gen/return " "))]]))

(def gen-prop-ruby-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "over")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "under")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inter-character")
        (gen/return " "))]]))

(def gen-prop-text-orientation
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "mixed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "upright")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sideways")
        (gen/return " "))]]))

(def gen-nonprop-margin-left
  gen-prop-margin-left)

(def gen-prop-margin-block-end
  (gen/tuple
    gen-nonprop-margin-left
    (gen/return " ")))

(def gen-prop-background-image
  (gen/tuple
    gen-nonprop-bg-image
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-bg-image))
    (gen/return " ")))

(def gen-prop-border-spacing
  (gen/tuple
    gen-nonprop-length
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-length])
    (gen/return " ")))

(def gen-prop-border-top-style
  (gen/tuple
    gen-nonprop-br-style
    (gen/return " ")))

(def gen-nonprop-outline-radius
  (gen/return "STUB_outline_radius"))

(def gen-prop-grid-area
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/return "\n")]
      [100
        (gen/tuple
          (gen/return "/")
          (gen/return " ")
          gen-nonprop-grid-line
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-grid-line
            (gen/return " "))
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-grid-line
            (gen/return " ")))]
      [100
        (gen/tuple
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-grid-line
            (gen/return " "))
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-grid-line
            (gen/return " "))
          (gen/tuple
            (gen/return "/")
            (gen/return " ")
            gen-nonprop-grid-line
            (gen/return " ")))]])
    (gen/return " ")))

(def gen-nonprop-family-name
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          gen-nonprop-custom-ident))
        (gen/return " "))]]))

(def gen-nonprop-generic-family
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "serif")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sans-serif")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cursive")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fantasy")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "monospace")
        (gen/return " "))]]))

(def gen-prop-font-family
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-family-name
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-generic-family
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-family-name
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-generic-family
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-func-ellipse
  (gen/tuple
    (gen/return "ellipse(")
    (gen/return " ")
    (gen/tuple
      gen-nonprop-shape-radius
      gen-nonprop-shape-radius)
    (gen/one-of [
      (gen/return "")
      (gen/return " ")])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "at")
        (gen/return " ")
        gen-nonprop-position
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-border-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        (gen/frequency [
          [100
            gen-nonprop-length-percentage]
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage)]
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage)]
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage
              gen-nonprop-length-percentage)]])
        (gen/return " "))])
    (gen/return " ")))

(def gen-nonprop-border-radius
  gen-prop-border-radius)

(def gen-nonprop-fill-rule
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "nonzero")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "evenodd")
        (gen/return " "))]]))

(def gen-func-polygon
  (gen/tuple
    (gen/return "polygon(")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-fill-rule])
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/tuple
      gen-nonprop-length-percentage
      (gen/return " ")
      gen-nonprop-length-percentage
      (gen/return " "))
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/tuple
          gen-nonprop-length-percentage
          (gen/return " ")
          gen-nonprop-length-percentage
          (gen/return " "))))
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-func-path
  (gen/return "STUB_func_path"))

(def gen-func-inset
  (gen/tuple
    (gen/return "inset(")
    (gen/return " ")
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "round")
        (gen/return " ")
        gen-nonprop-border-radius
        (gen/return " "))])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-basic-shape
  (gen/frequency [
    [100
      (gen/tuple
        gen-func-inset
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-circle
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-ellipse
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-polygon
        (gen/return " "))]]))

(def gen-prop-offset-path
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ray(")
        (gen/return " ")
        (gen/tuple
          gen-nonprop-angle
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-size])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "contain")])
          (gen/return " "))
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-func-path
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-url
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-basic-shape
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-geometry-box
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-offset-inline-end
  (gen/tuple
    gen-nonprop-left
    (gen/return " ")))

(def gen-nonprop-single-animation-play-state
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "running")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "paused")
        (gen/return " "))]]))

(def gen-prop-animation-play-state
  (gen/tuple
    gen-nonprop-single-animation-play-state
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-animation-play-state))
    (gen/return " ")))

(def gen-nonprop-feature-type
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "@stylistic")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@historical-forms")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@styleset")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@character-variant")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@swash")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@ornaments")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "@annotation")
        (gen/return " "))]]))

(def gen-prop--moz-outline-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-outline-radius]
      [100
        (gen/tuple
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius)]
      [100
        (gen/tuple
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius)]
      [100
        (gen/tuple
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius
          gen-nonprop-outline-radius)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        (gen/frequency [
          [100
            gen-nonprop-outline-radius]
          [100
            (gen/tuple
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius)]
          [100
            (gen/tuple
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius)]
          [100
            (gen/tuple
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius
              gen-nonprop-outline-radius)]])
        (gen/return " "))])
    (gen/return " ")))

(def gen-prop-tab-size
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-integer
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]]))

(def gen-prop-column-gap
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]]))

(def gen-prop-grid-row
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        gen-nonprop-grid-line
        (gen/return " "))])
    (gen/return " ")))

(def gen-prop-white-space
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pre")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "nowrap")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pre-wrap")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "pre-line")
        (gen/return " "))]]))

(def gen-nonprop-font-family
  gen-prop-font-family)

(def gen-nonprop-common-lig-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "common-ligatures")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "no-common-ligatures")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-historical-lig-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "historical-ligatures")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "no-historical-ligatures")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-contextual-alt-values
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "contextual")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "no-contextual")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-font-variant-ligatures
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-common-lig-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-discretionary-lig-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-historical-lig-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-contextual-alt-values
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop--webkit-touch-callout
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "default")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-appearance
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-transform-box
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "border-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "view-box")
        (gen/return " "))]]))

(def gen-prop-scroll-behavior
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "smooth")
        (gen/return " "))]]))

(def gen-prop-ruby-merge
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "separate")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "collapse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-grid-template-areas
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          gen-nonprop-string))
        (gen/return " "))]]))

(def gen-prop-filter
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-filter-function-list
        (gen/return " "))]]))

(def gen-prop-flex-direction
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "row")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "row-reverse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "column-reverse")
        (gen/return " "))]]))

(def gen-nonprop-flex-direction
  gen-prop-flex-direction)

(def gen-prop-flex-flow
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-flex-direction
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-flex-wrap
          (gen/return " "))]]))))

(def gen-prop-background-repeat
  (gen/tuple
    gen-nonprop-repeat-style
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-repeat-style))
    (gen/return " ")))

(def gen-nonprop-absolute-size
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "xx-small")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "x-small")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "small")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "medium")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "large")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "x-large")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "xx-large")
        (gen/return " "))]]))

(def gen-nonprop-relative-size
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "larger")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "smaller")
        (gen/return " "))]]))

(def gen-prop-font-size
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-absolute-size
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-relative-size
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length-percentage
        (gen/return " "))]]))

(def gen-prop-border-inline-end
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-border-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-border-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-nonprop-feature-value-declaration
  (gen/tuple
    gen-nonprop-custom-ident
    (gen/return " ")
    (gen/return ":")
    (gen/return " ")
    (gen/such-that not-empty (gen/vector
      gen-nonprop-integer))
    (gen/return " ")
    (gen/return ";")
    (gen/return " ")))

(def gen-nonprop-feature-value-declaration-list
  (gen/tuple
    gen-nonprop-feature-value-declaration
    (gen/return " ")))

(def gen-nonprop-bg-size
  (gen/frequency [
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/frequency [
              [100
                (gen/tuple
                  gen-nonprop-length-percentage
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "auto")
                  (gen/return " "))]])]
          [100
            (gen/tuple
              (gen/frequency [
                [100
                  (gen/tuple
                    gen-nonprop-length-percentage
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "auto")
                    (gen/return " "))]])
              (gen/frequency [
                [100
                  (gen/tuple
                    gen-nonprop-length-percentage
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "auto")
                    (gen/return " "))]]))]])
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cover")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "contain")
        (gen/return " "))]]))

(def gen-prop-mask-size
  (gen/tuple
    gen-nonprop-bg-size
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-bg-size))
    (gen/return " ")))

(def gen-prop-float
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-end")
        (gen/return " "))]]))

(def gen-nonprop-keyframe-block
  (gen/tuple
    gen-nonprop-keyframe-selector
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-keyframe-selector))
    (gen/return " ")
    (gen/return "{")
    gen-nonprop-declaration-list
    (gen/return " ")
    (gen/return "}")
    (gen/return " ")))

(def gen-nonprop-keyframe-block-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      gen-nonprop-keyframe-block))
    (gen/return " ")))

(def gen-prop-initial-letter-align
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "auto")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "alphabetic")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "hanging")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "ideographic")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-display-outside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "block-level")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-level")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "run-in")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "contents")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-row-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-header-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-footer-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-row")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-cell")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-column-group")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "table-caption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-base")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-text")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-base-container")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ruby-text-container")
        (gen/return " "))]]))

(def gen-nonprop-masking-mode
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "alpha")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "luminance")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "match-source")
        (gen/return " "))]]))

(def gen-prop-mask-mode
  (gen/tuple
    gen-nonprop-masking-mode
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-masking-mode))
    (gen/return " ")))

(def gen-prop-box-pack
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "justify")
        (gen/return " "))]]))

(def gen-nonprop-quote
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "open-quote")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "close-quote")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "no-open-quote")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "no-close-quote")
        (gen/return " "))]]))

(def gen-prop--moz-stack-sizing
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "ignore")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stretch-to-fit")
        (gen/return " "))]]))

(def gen-prop-letter-spacing
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]]))

(def gen-nonprop-clip-style
  (gen/return "STUB_clip_style"))

(def gen-prop-border-top
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-br-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-br-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-text-combine-upright
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/return "digits")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-integer])
          (gen/return " "))
        (gen/return " "))]]))

(def gen-prop-border-bottom-right-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")))

(def gen-prop-align-self
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "baseline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stretch")
        (gen/return " "))]]))

(def gen-prop-page-break-after
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "always")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]]))

(def gen-nonprop-feature-value-block
  (gen/tuple
    gen-nonprop-feature-type
    (gen/return " ")
    (gen/return "{")
    gen-nonprop-feature-value-declaration-list
    (gen/return " ")
    (gen/return "}")
    (gen/return " ")))

(def gen-nonprop-feature-value-block-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      gen-nonprop-feature-value-block))
    (gen/return " ")))

(def gen-prop-border-image-slice
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-number-percentage]
      [100
        (gen/tuple
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage)]
      [100
        (gen/tuple
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage)]
      [100
        (gen/tuple
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage
          gen-nonprop-number-percentage)]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/return "fill")])
    (gen/return " ")))

(def gen-nonprop-border-image-slice
  gen-prop-border-image-slice)

(def gen-prop-border-inline-start-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-mask-position
  (gen/tuple
    gen-nonprop-position
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-position))
    (gen/return " ")))

(def gen-prop-hyphens
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "manual")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-transition
  (gen/tuple
    gen-nonprop-single-transition
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-transition))
    (gen/return " ")))

(def gen-prop-caret-color
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/return " "))]]))

(def gen-prop-pointer-events
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "visiblePainted")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "visibleFill")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "visibleStroke")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "painted")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stroke")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inherit")
        (gen/return " "))]]))

(def gen-prop-animation-fill-mode
  (gen/tuple
    gen-nonprop-single-animation-fill-mode
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-animation-fill-mode))
    (gen/return " ")))

(def gen-prop-margin-top
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-touch-action
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "pan-x")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "pan-left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "pan-right")
                      (gen/return " "))]])
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "pan-y")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "pan-up")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "pan-down")
                      (gen/return " "))]])
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "pinch-zoom")
                (gen/return " "))]])))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "manipulation")
        (gen/return " "))]]))

(def gen-prop-text-underline-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "under")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]])
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop--moz-float-edge
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "border-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "content-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "margin-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "padding-box")
        (gen/return " "))]]))

(def gen-prop-offset-anchor
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-position
        (gen/return " "))]]))

(def gen-nonprop-offset-anchor
  gen-prop-offset-anchor)

(def gen-prop-line-break
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "loose")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "strict")
        (gen/return " "))]]))

(def gen-nonprop-pseudo-page
  (gen/tuple
    (gen/return ":")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "left")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "right")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "first")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "blank")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-nonprop-page-selector
  (gen/frequency [
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          gen-nonprop-pseudo-page))
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-ident
        (gen/return " ")
        (gen/vector
          gen-nonprop-pseudo-page)
        (gen/return " "))]]))

(def gen-nonprop-page-selector-list
  (gen/tuple
    gen-nonprop-page-selector
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-page-selector))
    (gen/one-of [
      (gen/return "")
      (gen/return " ")])
    (gen/return " ")))

(def gen-prop--webkit-text-fill-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop--webkit-mask-repeat
  (gen/tuple
    gen-nonprop-repeat-style
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-repeat-style
        (gen/return " ")))
    (gen/return " ")))

(def gen-nonprop-dimension
  (gen/return "STUB_dimension"))

(def gen-nonprop-mf-value
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-dimension
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-ident
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-ratio
        (gen/return " "))]]))

(def gen-nonprop-mf-name
  (gen/tuple
    gen-nonprop-ident
    (gen/return " ")))

(def gen-nonprop-mf-range
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-mf-name
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "<")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return ">")
                (gen/return " "))]])])
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-value
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "<")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return ">")
                (gen/return " "))]])])
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-name
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/return " ")
        (gen/return "<")
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-name
        (gen/return " ")
        (gen/return "<")
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-value
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/return " ")
        (gen/return ">")
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-name
        (gen/return " ")
        (gen/return ">")
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/return "=")])
        (gen/return " ")
        gen-nonprop-mf-value
        (gen/return " "))]]))

(def gen-prop--webkit-box-reflect
  (gen/tuple
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            (gen/return "above")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "below")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "right")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "left")
            (gen/return " "))]])])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-length])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-image])
    (gen/return " ")))

(def gen-nonprop-mf-plain
  (gen/tuple
    gen-nonprop-mf-name
    (gen/return " ")
    (gen/return ":")
    (gen/return " ")
    gen-nonprop-mf-value
    (gen/return " ")))

(def gen-func-fit-content
  (gen/tuple
    (gen/return "fit-content(")
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-percentage
          (gen/return " "))]])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop--ms-overflow-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-ms-autohiding-scrollbar")
        (gen/return " "))]]))

(def gen-prop-padding-top
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-nonprop-clip-source
  (gen/tuple
    gen-nonprop-url
    (gen/return " ")))

(def gen-prop-shape-outside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/such-that not-empty (gen/vector
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-shape-box
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-basic-shape
              (gen/return " "))]])))]
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]]))

(def gen-prop-block-size
  (gen/tuple
    gen-nonprop-width
    (gen/return " ")))

(def gen-prop-clip-path
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-clip-source
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-basic-shape
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-geometry-box
                (gen/return " "))]])))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-nonprop-y
  (gen/return "11"))

(def gen-nonprop-mask-position
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "left")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "center")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "right")
          (gen/return " "))]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-length-percentage
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "top")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "center")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "bottom")
            (gen/return " "))]])])
    (gen/return " ")))

(def gen-prop--webkit-mask-position
  (gen/tuple
    gen-nonprop-mask-position
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-mask-position))
    (gen/return " ")))

(def gen-prop-word-break
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "break-all")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "keep-all")
        (gen/return " "))]]))

(def gen-prop-transition-property
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-single-transition-property
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-single-transition-property))
        (gen/return " "))]]))

(def gen-prop-list-style-image
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-url
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-border-bottom-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-list-style-image
  gen-prop-list-style-image)

(def gen-prop-list-style
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-list-style-type
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-list-style-position
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-list-style-image
          (gen/return " "))]]))))

(def gen-nonprop-offset-path
  gen-prop-offset-path)

(def gen-prop-border-collapse
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "collapse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "separate")
        (gen/return " "))]]))

(def gen-nonprop-namespace-prefix
  (gen/tuple
    gen-nonprop-ident
    (gen/return " ")))

(def gen-prop-offset-rotate
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "reverse")
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-angle
          (gen/return " "))]]))))

(def gen-nonprop-offset-rotate
  gen-prop-offset-rotate)

(def gen-prop-break-before
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-page")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "page")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "recto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "verso")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-region")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "region")
        (gen/return " "))]]))

(def gen-prop-background-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-transition-timing-function
  (gen/tuple
    gen-nonprop-single-transition-timing-function
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-transition-timing-function))
    (gen/return " ")))

(def gen-nonprop-single-timing-function
  (gen/tuple
    gen-nonprop-single-transition-timing-function
    (gen/return " ")))

(def gen-prop-background-clip
  (gen/tuple
    gen-nonprop-box
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-box))
    (gen/return " ")))

(def gen-prop--moz-border-left-colors
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/vector
          (gen/return " "))
        (gen/return " ")
        gen-nonprop-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-word-wrap
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "break-word")
        (gen/return " "))]]))

(def gen-prop--webkit-mask-attachment
  (gen/tuple
    gen-nonprop-attachment
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-attachment
        (gen/return " ")))
    (gen/return " ")))

(def gen-prop-font-variant-alternates
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/return "stylistic(")
          (gen/return " ")
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "historical-forms")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "styleset(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              gen-nonprop-feature-value-name))
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "character-variant(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              gen-nonprop-feature-value-name))
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "swash(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "ornaments(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "annotation(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        (gen/return " "))]]))

(def gen-prop-box-direction
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "reverse")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inherit")
        (gen/return " "))]]))

(def gen-prop-scroll-snap-coordinate
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-position
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-position))
        (gen/return " "))]]))

(def gen-nonprop-cf-mixing-image
  (gen/tuple
    (gen/one-of [
      (gen/return "")
      gen-nonprop-percentage])
    (gen/return " ")
    gen-nonprop-image
    (gen/return " ")))

(def gen-nonprop-cf-final-image
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/return " "))]]))

(def gen-func-cross-fade
  (gen/tuple
    (gen/return "cross-fade(")
    (gen/return " ")
    gen-nonprop-cf-mixing-image
    (gen/return " ")
    (gen/return ",")
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      gen-nonprop-cf-final-image])
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-nonprop-function-token
  (gen/return "STUB_flex_function_token"))

(def gen-prop-azimuth
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-angle
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "left-side")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "far-left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "center-left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "center-right")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "far-right")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "right-side")
                      (gen/return " "))]])
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "behind")
                (gen/return " "))]])))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "leftwards")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "rightwards")
        (gen/return " "))]]))

(def gen-prop-image-orientation
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "from-image")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-angle
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            gen-nonprop-angle])
          (gen/return " ")
          (gen/return "flip")
          (gen/return " "))
        (gen/return " "))]]))

(def gen-prop-initial-letter
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-number
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-integer])
          (gen/return " "))
        (gen/return " "))]]))

(def gen-prop-grid-column
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        gen-nonprop-grid-line
        (gen/return " "))])
    (gen/return " ")))

(def gen-prop--moz-outline-radius-bottomright
  (gen/tuple
    gen-nonprop-outline-radius
    (gen/return " ")))

(def gen-prop-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "static")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "relative")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "absolute")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sticky")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fixed")
        (gen/return " "))]]))

(def gen-prop-grid-row-start
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")))

(def gen-prop-border-top-left-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")))

(def gen-prop-margin-inline-end
  (gen/tuple
    gen-nonprop-margin-left
    (gen/return " ")))

(def gen-prop--webkit-tap-highlight-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-composite-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "clear")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "copy")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "source-over")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "source-in")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "source-out")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "source-atop")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "destination-over")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "destination-in")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "destination-out")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "destination-atop")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "xor")
        (gen/return " "))]]))

(def gen-prop--webkit-mask-composite
  (gen/tuple
    gen-nonprop-composite-style
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-composite-style
        (gen/return " ")))
    (gen/return " ")))

(def gen-prop--webkit-mask-clip
  (gen/tuple
    gen-nonprop-clip-style
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        gen-nonprop-clip-style
        (gen/return " ")))
    (gen/return " ")))

(def gen-prop--moz-border-bottom-colors
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/vector
          (gen/return " "))
        (gen/return " ")
        gen-nonprop-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-background-attachment
  (gen/tuple
    gen-nonprop-attachment
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-attachment))
    (gen/return " ")))

(def gen-func-image-set
  (gen/tuple
    (gen/return "image-set(")
    (gen/return " ")
    gen-nonprop-image-set-option
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-image-set-option))
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-table-layout
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fixed")
        (gen/return " "))]]))

(def gen-prop-border-left-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-prop-font-weight
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bold")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bolder")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "lighter")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "100")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "200")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "300")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "400")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "500")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "600")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "700")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "800")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "900")
        (gen/return " "))]]))

(def gen-prop--webkit-mask-repeat-y
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "repeat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "no-repeat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "round")
        (gen/return " "))]]))

(def gen-prop-text-decoration-skip
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "objects")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "spaces")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "ink")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "edges")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "box-decoration")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-max-block-size
  (gen/tuple
    gen-nonprop-max-width
    (gen/return " ")))

(def gen-prop--moz-user-focus
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "ignore")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "select-after")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "select-before")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "select-menu")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "select-same")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "select-all")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-border-top-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-prop-animation-timing-function
  (gen/tuple
    gen-nonprop-single-timing-function
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-timing-function))
    (gen/return " ")))

(def gen-prop--webkit-border-before
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-border-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-border-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-page-break-before
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "always")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]]))

(def gen-nonprop-single-animation-iteration-count
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "infinite")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/return " "))]]))

(def gen-nonprop-single-animation
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-time
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-timing-function
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-time
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-animation-iteration-count
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-animation-direction
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-animation-fill-mode
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-single-animation-play-state
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "none")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-keyframes-name
                (gen/return " "))]])
          (gen/return " "))]]))))

(def gen-prop-grid-column-start
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")))

(def gen-prop-align-content
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "flex-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-between")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-around")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-evenly")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stretch")
        (gen/return " "))]]))

(def gen-prop-border-color
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-color]
      [100
        (gen/tuple
          gen-nonprop-color
          gen-nonprop-color)]
      [100
        (gen/tuple
          gen-nonprop-color
          gen-nonprop-color
          gen-nonprop-color)]
      [100
        (gen/tuple
          gen-nonprop-color
          gen-nonprop-color
          gen-nonprop-color
          gen-nonprop-color)]])
    (gen/return " ")))

(def gen-nonprop-bg-layer
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-bg-image
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-position
            (gen/return " "))]])))
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (gen/return "/")
                (gen/return " ")
                gen-nonprop-bg-size
                (gen/return " "))])
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-repeat-style
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-attachment
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/frequency [
              [100
                gen-nonprop-box]
              [100
                (gen/tuple
                  gen-nonprop-box
                  gen-nonprop-box)]])
            (gen/return " "))]])))))

(def gen-prop-font-variant-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sub")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "super")
        (gen/return " "))]]))

(def gen-prop-grid-column-end
  (gen/tuple
    gen-nonprop-grid-line
    (gen/return " ")))

(def gen-prop-text-emphasis-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-background-size
  (gen/tuple
    gen-nonprop-bg-size
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-bg-size))
    (gen/return " ")))

(def gen-prop-font-variant-east-asian
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-east-asian-variant-values
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-east-asian-width-values
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "ruby")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-perspective-origin
  (gen/tuple
    gen-nonprop-position
    (gen/return " ")))

(def gen-prop-animation
  (gen/tuple
    gen-nonprop-single-animation
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-animation))
    (gen/return " ")))

(def gen-prop-offset-position
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-position
        (gen/return " "))]]))

(def gen-prop-mask-origin
  (gen/tuple
    gen-nonprop-geometry-box
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-geometry-box))
    (gen/return " ")))

(def gen-nonprop-mask-origin
  gen-prop-mask-origin)

(def gen-prop-margin-block-start
  (gen/tuple
    gen-nonprop-margin-left
    (gen/return " ")))

(def gen-prop--moz-text-blink
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "blink")
        (gen/return " "))]]))

(def gen-prop--moz-outline-radius-topleft
  (gen/tuple
    gen-nonprop-outline-radius
    (gen/return " ")))

(def gen-prop-transform-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "flat")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "preserve-3d")
        (gen/return " "))]]))

(def gen-prop-animation-direction
  (gen/tuple
    gen-nonprop-single-animation-direction
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-animation-direction))
    (gen/return " ")))

(def gen-prop-border-image-outset
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-number
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-prop-margin-inline-start
  (gen/tuple
    gen-nonprop-margin-left
    (gen/return " ")))

(def gen-prop--webkit-mask-origin
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "padding")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "border")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "content")
          (gen/return " "))]])
    (gen/return " ")
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/return " ")
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "border")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "padding")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "content")
              (gen/return " "))]])
        (gen/return " ")))
    (gen/return " ")))

(def gen-prop-scroll-snap-type
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "mandatory")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "proximity")
        (gen/return " "))]]))

(def gen-prop-max-height
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fill-available")
        (gen/return " "))]]))

(def gen-prop-offset-distance
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")))

(def gen-prop-ruby-align
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-between")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-around")
        (gen/return " "))]]))

(def gen-prop-border-image-repeat
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "stretch")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "repeat")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "round")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "space")
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "stretch")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "repeat")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "round")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "space")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "stretch")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "repeat")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "round")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "space")
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-nonprop-border-image-repeat
  gen-prop-border-image-repeat)

(def gen-prop-border-image-width
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-number
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-number
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-nonprop-border-image-width
  gen-prop-border-image-width)

(def gen-nonprop-border-image-outset
  gen-prop-border-image-outset)

(def gen-nonprop-border-image-source
  gen-prop-border-image-source)

(def gen-prop-border-image
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-border-image-source
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-border-image-slice
            (gen/return " "))]])))
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (gen/frequency [
                [100
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    gen-nonprop-border-image-width
                    (gen/return " "))]
                [100
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (gen/one-of [
                      (gen/return "")
                      gen-nonprop-border-image-width])
                    (gen/return " ")
                    (gen/return "/")
                    (gen/return " ")
                    gen-nonprop-border-image-outset
                    (gen/return " "))]])])
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-border-image-repeat
            (gen/return " "))]])))))

(def gen-nonprop-font-weight
  gen-prop-font-weight)

(def gen-prop-margin
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-percentage
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-prop--moz-appearance
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-arrow-down")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-arrow-next")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-arrow-previous")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-arrow-up")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-bevel")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "button-focus")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "caret")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "checkbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "checkbox-container")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "checkbox-label")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "checkmenuitem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "dualbutton")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "groupbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "listbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "listitem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuarrow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menubar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menucheckbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuimage")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuitem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuitemtext")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menulist")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menulist-button")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menulist-text")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menulist-textfield")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menupopup")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuradio")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menuseparator")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "meterbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "meterchunk")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "progressbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "progressbar-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "progresschunk")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "progresschunk-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "radio")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "radio-container")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "radio-label")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "radiomenuitem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "range")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "range-thumb")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "resizer")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "resizerpanel")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scale-horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scalethumbend")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scalethumb-horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scalethumbstart")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scalethumbtick")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scalethumb-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scale-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarbutton-down")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarbutton-left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarbutton-right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarbutton-up")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarthumb-horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbarthumb-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbartrack-horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scrollbartrack-vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "searchfield")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "separator")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sheet")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "spinner")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "spinner-downbutton")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "spinner-textfield")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "spinner-upbutton")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "splitter")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "statusbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "statusbarpanel")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tab")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tabpanel")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tabpanels")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tab-scroll-arrow-back")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tab-scroll-arrow-forward")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "textfield")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "textfield-multiline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "toolbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "toolbarbutton")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "toolbarbutton-dropdown")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "toolbargripper")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "toolbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "tooltip")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeheader")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeheadercell")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeheadersortarrow")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeitem")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treetwisty")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treetwistyopen")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "treeview")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-mac-unified-toolbar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-borderless-glass")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-browsertabbar-toolbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-communicationstext")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-communications-toolbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-exclude-glass")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-glass")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-mediatext")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-win-media-toolbox")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-box-maximized")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-close")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-maximize")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-minimize")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-button-restore")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-frame-bottom")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-frame-left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-frame-right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-titlebar")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "-moz-window-titlebar-maximized")
        (gen/return " "))]]))

(def gen-prop-box-align
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "baseline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "stretch")
        (gen/return " "))]]))

(def gen-nonprop-compositing-operator
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "add")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "subtract")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "intersect")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "exclude")
        (gen/return " "))]]))

(def gen-nonprop-mask-layer
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-mask-reference
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-position
            (gen/return " "))]])))
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (gen/return "/")
                (gen/return " ")
                gen-nonprop-bg-size
                (gen/return " "))])
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-repeat-style
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-geometry-box
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/frequency [
              [100
                (gen/tuple
                  gen-nonprop-geometry-box
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "no-clip")
                  (gen/return " "))]])
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-compositing-operator
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-masking-mode
            (gen/return " "))]])))))

(def gen-prop-mask-repeat
  (gen/tuple
    gen-nonprop-repeat-style
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-repeat-style))
    (gen/return " ")))

(def gen-prop-overflow-wrap
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "break-word")
        (gen/return " "))]]))

(def gen-prop-border-inline-end-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-font-kerning
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-text-overflow
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "clip")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "ellipsis")
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-string
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "clip")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "ellipsis")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-string
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "clip")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "ellipsis")
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-string
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-prop-order
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop--webkit-border-before-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-nonprop-text-emphasis-color
  gen-prop-text-emphasis-color)

(def gen-nonprop-mask-repeat
  gen-prop-mask-repeat)

(def gen-prop-object-position
  (gen/tuple
    gen-nonprop-position
    (gen/return " ")))

(def gen-prop-writing-mode
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "horizontal-tb")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vertical-rl")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vertical-lr")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sideways-rl")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sideways-lr")
        (gen/return " "))]]))

(def gen-prop-overflow-y
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "visible")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hidden")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scroll")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-border-block-end-style
  (gen/tuple
    gen-nonprop-border-style
    (gen/return " ")))

(def gen-prop-border-bottom-width
  (gen/tuple
    gen-nonprop-br-width
    (gen/return " ")))

(def gen-prop-border-block-end-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-border-bottom
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-br-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-br-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop--moz-border-right-colors
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-color
        (gen/vector
          (gen/return " "))
        (gen/return " ")
        gen-nonprop-color
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-nonprop-mf-boolean
  (gen/tuple
    gen-nonprop-mf-name
    (gen/return " ")))

(def gen-prop--webkit-mask-position-y
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "top")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "center")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "bottom")
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "top")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "bottom")
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-page-break-inside
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]]))

(def gen-nonprop-offset-position
  gen-prop-offset-position)

(def gen-prop-font-stretch
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ultra-condensed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "extra-condensed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "condensed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "semi-condensed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "semi-expanded")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "expanded")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "extra-expanded")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "ultra-expanded")
        (gen/return " "))]]))

(def gen-nonprop-font-stretch
  gen-prop-font-stretch)

(def gen-prop-text-indent
  (gen/tuple
    gen-nonprop-length-percentage
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/return "hanging")])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/return "each-line")])
    (gen/return " ")))

(def gen-prop-min-inline-size
  (gen/tuple
    gen-nonprop-min-width
    (gen/return " ")))

(def gen-prop-padding-inline-start
  (gen/tuple
    gen-nonprop-padding-left
    (gen/return " ")))

(def gen-prop-font-style
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "italic")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "oblique")
        (gen/return " "))]]))

(def gen-prop--moz-force-broken-image-icon
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop--webkit-mask-position-x
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "left")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "center")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "right")
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length-percentage
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop--moz-orient
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "inline")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "block")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vertical")
        (gen/return " "))]]))

(def gen-prop-padding
  (gen/tuple
    (gen/frequency [
      [100
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-percentage
              (gen/return " "))]])]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]]))]
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]])
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-length
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-percentage
                (gen/return " "))]]))]])
    (gen/return " ")))

(def gen-prop-padding-bottom
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-cursor
  (gen/tuple
    (gen/tuple
      (gen/vector
        (gen/tuple
          gen-nonprop-url
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              gen-nonprop-x
              (gen/return " ")
              gen-nonprop-y
              (gen/return " "))])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")))
      (gen/return " ")
      (gen/frequency [
        [100
          (gen/tuple
            (gen/return "auto")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "default")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "none")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "context-menu")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "help")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "pointer")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "progress")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "wait")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "cell")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "crosshair")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "text")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "vertical-text")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "alias")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "copy")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "move")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "no-drop")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "not-allowed")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "e-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "n-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "ne-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "nw-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "s-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "se-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "sw-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "w-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "ew-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "ns-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "nesw-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "nwse-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "col-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "row-resize")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "all-scroll")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "zoom-in")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "zoom-out")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "grab")
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "grabbing")
            (gen/return " "))]])
      (gen/return " "))
    (gen/return " ")))

(def gen-prop-animation-iteration-count
  (gen/tuple
    gen-nonprop-single-animation-iteration-count
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-single-animation-iteration-count))
    (gen/return " ")))

(def gen-prop-font-feature-settings
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-feature-tag-value
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            gen-nonprop-feature-tag-value))
        (gen/return " "))]]))

(def gen-prop-perspective
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]]))

(def gen-nonprop-time-percentage
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-time
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-border-top-right-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")))

(def gen-nonprop-font-size
  gen-prop-font-size)

(def gen-nonprop-background-color
  gen-prop-background-color)

(def gen-nonprop-final-bg-layer
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-bg-image
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-position
            (gen/return " "))]])))
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (gen/return "/")
                (gen/return " ")
                gen-nonprop-bg-size
                (gen/return " "))])
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-repeat-style
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-attachment
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-box
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-box
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-background-color
            (gen/return " "))]])))))

(def gen-prop-box-orient
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "horizontal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "vertical")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inline-axis")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "block-axis")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "inherit")
        (gen/return " "))]]))

(def gen-prop-margin-right
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-nonprop-outline-width
  gen-prop-outline-width)

(def gen-prop-outline
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-outline-color
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-outline-style
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-outline-width
            (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-text-rendering
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "optimizeSpeed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "optimizeLegibility")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "geometricPrecision")
        (gen/return " "))]]))

(def gen-nonprop-offset-distance
  gen-prop-offset-distance)

(def gen-prop--webkit-mask
  (gen/tuple
    gen-nonprop-mask-image
    (gen/return " ")
    (gen/vector
      (gen/such-that not-empty (gen/vector
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-mask-repeat
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-mask-attachment
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-mask-position
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-mask-origin
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-mask-clip
              (gen/return " "))]]))))
    (gen/return " ")))

(def gen-prop-border-block-start-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-mask
  (gen/tuple
    gen-nonprop-mask-layer
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-mask-layer))
    (gen/return " ")))

(def gen-nonprop-name-repeat
  (gen/return "STUB_name_repeat"))

(def gen-func-image
  (gen/tuple
    (gen/return "image(")
    (gen/return " ")
    (gen/tuple
      (gen/one-of [
        (gen/return "")
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-image
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-string
              (gen/return " "))]])])
      (gen/return " ")
      (gen/return ",")
      (gen/return " ")
      (gen/one-of [
        (gen/return "")
        gen-nonprop-color])
      (gen/return " "))
    (gen/return " ")
    (gen/return ")")
    (gen/return " ")))

(def gen-prop-offset-block-start
  (gen/tuple
    gen-nonprop-left
    (gen/return " ")))

(def gen-prop-mix-blend-mode
  (gen/tuple
    gen-nonprop-blend-mode
    (gen/return " ")))

(def gen-prop-background-origin
  (gen/tuple
    gen-nonprop-box
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-box))
    (gen/return " ")))

(def gen-nonprop-general-enclosed
  (gen/frequency [
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-function-token
          (gen/return " ")
          gen-nonprop-any-value
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "(")
        (gen/return " ")
        gen-nonprop-ident
        (gen/return " ")
        gen-nonprop-any-value
        (gen/return " ")
        (gen/return ")")
        (gen/return " "))]]))

(def gen-prop-border-block-start-width
  (gen/tuple
    gen-nonprop-border-width
    (gen/return " ")))

(def gen-nonprop-font-style
  gen-prop-font-style)

(def gen-prop--moz-outline-radius-bottomleft
  (gen/tuple
    gen-nonprop-outline-radius
    (gen/return " ")))

(def gen-nonprop-display-box
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "contents")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-display
  (gen/frequency [
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                gen-nonprop-display-outside
                (gen/return " "))]
            [100
              (gen/tuple
                gen-nonprop-display-inside
                (gen/return " "))]])))
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-display-listitem
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-display-internal
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-display-box
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-display-legacy
        (gen/return " "))]]))

(def gen-prop-isolation
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "isolate")
        (gen/return " "))]]))

(def gen-nonprop-content-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-string
            (gen/return " "))]
        [100
          (gen/tuple
            (gen/return "contents")
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-url
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-quote
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-target
            (gen/return " "))]
        [100
          (gen/tuple
            gen-func-leader
            (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-content
  (gen/tuple
    (gen/vector
      (gen/tuple
        gen-nonprop-image
        (gen/return " ")
        (gen/return ",")
        (gen/return " ")))
    (gen/return " ")
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "normal")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "none")
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-content-list
          (gen/return " "))]])
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        gen-nonprop-string
        (gen/return " "))])
    (gen/return " ")))

(def gen-prop-text-align
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "justify")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "match-parent")
        (gen/return " "))]]))

(def gen-prop-mask-type
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "luminance")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "alpha")
        (gen/return " "))]]))

(def gen-prop-counter-increment
  (gen/frequency [
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/tuple
            gen-nonprop-custom-ident
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              gen-nonprop-integer])
            (gen/return " "))))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-nonprop-line-name-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/frequency [
        [100
          (gen/tuple
            gen-nonprop-line-names
            (gen/return " "))]
        [100
          (gen/tuple
            gen-nonprop-name-repeat
            (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-box-suppress
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "show")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "discard")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hide")
        (gen/return " "))]]))

(def gen-prop-contain
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "strict")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "size")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "layout")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "style")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "paint")
                (gen/return " "))]])))
        (gen/return " "))]]))

(def gen-prop-color
  (gen/tuple
    gen-nonprop-color
    (gen/return " ")))

(def gen-prop-box-flex-group
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop--moz-image-region
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-shape
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-font-variation-settings
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-string
          (gen/return " ")
          gen-nonprop-number
          (gen/return " "))
        (gen/vector
          (gen/tuple
            (gen/return ", ")
            (gen/tuple
              gen-nonprop-string
              (gen/return " ")
              gen-nonprop-number
              (gen/return " "))))
        (gen/return " "))]]))

(def gen-prop-quotes
  (gen/frequency [
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/tuple
            gen-nonprop-string
            (gen/return " ")
            gen-nonprop-string
            (gen/return " "))))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]]))

(def gen-prop-unicode-bidi
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "embed")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "isolate")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "bidi-override")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "isolate-override")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "plaintext")
        (gen/return " "))]]))

(def gen-prop-grid-auto-flow
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "row")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "column")
                (gen/return " "))]])
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "dense")
          (gen/return " "))]]))))

(def gen-prop-box-flex
  (gen/tuple
    gen-nonprop-number
    (gen/return " ")))

(def gen-prop-border-bottom-left-radius
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/tuple
          gen-nonprop-length-percentage
          gen-nonprop-length-percentage)]])
    (gen/return " ")))

(def gen-prop-border-block-end-width
  (gen/tuple
    gen-nonprop-border-width
    (gen/return " ")))

(def gen-nonprop-generic-name
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "serif")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "sans-serif")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cursive")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fantasy")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "monospace")
        (gen/return " "))]]))

(def gen-prop-background
  (gen/tuple
    (gen/vector
      (gen/tuple
        gen-nonprop-bg-layer
        (gen/return " ")
        (gen/return ",")
        (gen/return " ")))
    (gen/return " ")
    gen-nonprop-final-bg-layer
    (gen/return " ")))

(def gen-prop-z-index
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-integer
        (gen/return " "))]]))

(def gen-prop-height
  (gen/frequency [
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/tuple
              gen-nonprop-length
              (gen/return " "))]
          [100
            (gen/tuple
              gen-nonprop-percentage
              (gen/return " "))]])
        (gen/return " ")
        (gen/one-of [
          (gen/return "")
          (gen/frequency [
            [100
              (gen/tuple
                (gen/return "border-box")
                (gen/return " "))]
            [100
              (gen/tuple
                (gen/return "content-box")
                (gen/return " "))]])])
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "available")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "min-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "max-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "fit-content")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]]))

(def gen-prop-background-position-y
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "center")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return "top")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "bottom")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "y-start")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "y-end")
                  (gen/return " "))]])])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-length-percentage])
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "y-start")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "y-end")
                      (gen/return " "))]])])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                gen-nonprop-length-percentage])
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-font-variant
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "normal")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  gen-nonprop-common-lig-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-discretionary-lig-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-historical-lig-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-contextual-alt-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "stylistic(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "historical-forms")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "styleset(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              gen-nonprop-feature-value-name))
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "character-variant(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              gen-nonprop-feature-value-name))
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "swash(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "ornaments(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "annotation(")
                  (gen/return " "))]])))
          gen-nonprop-feature-value-name
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return ")")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/frequency [
                    [100
                      (gen/tuple
                        (gen/return "small-caps")
                        (gen/return " "))]
                    [100
                      (gen/tuple
                        (gen/return "all-small-caps")
                        (gen/return " "))]
                    [100
                      (gen/tuple
                        (gen/return "petite-caps")
                        (gen/return " "))]
                    [100
                      (gen/tuple
                        (gen/return "all-petite-caps")
                        (gen/return " "))]
                    [100
                      (gen/tuple
                        (gen/return "unicase")
                        (gen/return " "))]
                    [100
                      (gen/tuple
                        (gen/return "titling-caps")
                        (gen/return " "))]])
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-numeric-figure-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-numeric-spacing-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-numeric-fraction-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "ordinal")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "slashed-zero")
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-east-asian-variant-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  gen-nonprop-east-asian-width-values
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "ruby")
                  (gen/return " "))]]))))
        (gen/return " "))]]))

(def gen-prop-mask-composite
  (gen/tuple
    gen-nonprop-compositing-operator
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        gen-nonprop-compositing-operator))
    (gen/return " ")))

(def gen-prop-justify-content
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "flex-start")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "flex-end")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "center")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-between")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-around")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "space-evenly")
        (gen/return " "))]]))

(def gen-nonprop-font-variant-css21
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "normal")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/return "small-caps")
          (gen/return " "))]])
    (gen/return " ")))

(def gen-prop-font
  (gen/frequency [
    [100
      (gen/tuple
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [100
                  (gen/tuple
                    gen-nonprop-font-style
                    (gen/return " "))]
                [100
                  (gen/tuple
                    gen-nonprop-font-variant-css21
                    (gen/return " "))]
                [100
                  (gen/tuple
                    gen-nonprop-font-weight
                    (gen/return " "))]
                [100
                  (gen/tuple
                    gen-nonprop-font-stretch
                    (gen/return " "))]])))])
          (gen/return " ")
          gen-nonprop-font-size
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              gen-nonprop-line-height
              (gen/return " "))])
          (gen/return " ")
          gen-nonprop-font-family
          (gen/return " "))
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "caption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "icon")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "menu")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "message-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "small-caption")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "status-bar")
        (gen/return " "))]]))

(def gen-prop-box-ordinal-group
  (gen/tuple
    gen-nonprop-integer
    (gen/return " ")))

(def gen-prop--webkit-border-before-width
  (gen/tuple
    gen-nonprop-border-width
    (gen/return " ")))

(def gen-prop-empty-cells
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "show")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "hide")
        (gen/return " "))]]))

(def gen-prop-box-decoration-break
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "slice")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "clone")
        (gen/return " "))]]))

(def gen-prop-offset
  (gen/tuple
    (gen/tuple
      (gen/one-of [
        (gen/return "")
        gen-nonprop-offset-position])
      (gen/return " ")
      (gen/one-of [
        (gen/return "")
        (gen/tuple
          gen-nonprop-offset-path
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [100
                  (gen/tuple
                    gen-nonprop-offset-distance
                    (gen/return " "))]
                [100
                  (gen/tuple
                    gen-nonprop-offset-rotate
                    (gen/return " "))]])))])
          (gen/return " "))])
      (gen/return " "))
    (gen/return " ")
    (gen/one-of [
      (gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/return " ")
        gen-nonprop-offset-anchor
        (gen/return " "))])
    (gen/return " ")))

(def gen-prop-column-span
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "all")
        (gen/return " "))]]))

(def gen-prop--moz-outline-radius-topright
  (gen/tuple
    gen-nonprop-outline-radius
    (gen/return " ")))

(def gen-prop-background-position-x
  (gen/tuple
    (gen/frequency [
      [100
        (gen/tuple
          (gen/return "center")
          (gen/return " "))]
      [100
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [100
                (gen/tuple
                  (gen/return "left")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "right")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "x-start")
                  (gen/return " "))]
              [100
                (gen/tuple
                  (gen/return "x-end")
                  (gen/return " "))]])])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            gen-nonprop-length-percentage])
          (gen/return " "))]])
    (gen/vector
      (gen/tuple
        (gen/return ", ")
        (gen/frequency [
          [100
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [100
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [100
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "x-start")
                      (gen/return " "))]
                  [100
                    (gen/tuple
                      (gen/return "x-end")
                      (gen/return " "))]])])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                gen-nonprop-length-percentage])
              (gen/return " "))]])))
    (gen/return " ")))

(def gen-prop-padding-right
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-length
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-percentage
        (gen/return " "))]]))

(def gen-prop-break-after
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "auto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-page")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "page")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "left")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "right")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "recto")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "verso")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "column")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "avoid-region")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "region")
        (gen/return " "))]]))

(def gen-prop-text-emphasis
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-text-emphasis-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-text-emphasis-color
          (gen/return " "))]]))))

(def gen-prop-box-sizing
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "content-box")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "border-box")
        (gen/return " "))]]))

(def gen-prop-border-left
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/tuple
          gen-nonprop-br-width
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-br-style
          (gen/return " "))]
      [100
        (gen/tuple
          gen-nonprop-color
          (gen/return " "))]]))))

(def gen-prop-object-fit
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "fill")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "contain")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "cover")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "none")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "scale-down")
        (gen/return " "))]]))

(def gen-css-assignment
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "margin-block-end: ")
        gen-prop-margin-block-end)]
    [100
      (gen/tuple
        (gen/return "-webkit-text-stroke-width: ")
        gen-prop--webkit-text-stroke-width)]
    [100
      (gen/tuple
        (gen/return "transition-property: ")
        gen-prop-transition-property)]
    [100
      (gen/tuple
        (gen/return "word-break: ")
        gen-prop-word-break)]
    [100
      (gen/tuple
        (gen/return "background-origin: ")
        gen-prop-background-origin)]
    [100
      (gen/tuple
        (gen/return "border-bottom-color: ")
        gen-prop-border-bottom-color)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-attachment: ")
        gen-prop--webkit-mask-attachment)]
    [100
      (gen/tuple
        (gen/return "-moz-user-focus: ")
        gen-prop--moz-user-focus)]
    [100
      (gen/tuple
        (gen/return "margin-block-start: ")
        gen-prop-margin-block-start)]
    [100
      (gen/tuple
        (gen/return "initial-letter: ")
        gen-prop-initial-letter)]
    [100
      (gen/tuple
        (gen/return "border-block-end: ")
        gen-prop-border-block-end)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask: ")
        gen-prop--webkit-mask)]
    [100
      (gen/tuple
        (gen/return "outline-color: ")
        gen-prop-outline-color)]
    [100
      (gen/tuple
        (gen/return "border-block-start: ")
        gen-prop-border-block-start)]
    [100
      (gen/tuple
        (gen/return "ruby-position: ")
        gen-prop-ruby-position)]
    [100
      (gen/tuple
        (gen/return "border-block-start-width: ")
        gen-prop-border-block-start-width)]
    [100
      (gen/tuple
        (gen/return "background: ")
        gen-prop-background)]
    [100
      (gen/tuple
        (gen/return "box-orient: ")
        gen-prop-box-orient)]
    [100
      (gen/tuple
        (gen/return "padding-top: ")
        gen-prop-padding-top)]
    [100
      (gen/tuple
        (gen/return "align-items: ")
        gen-prop-align-items)]
    [100
      (gen/tuple
        (gen/return "text-shadow: ")
        gen-prop-text-shadow)]
    [100
      (gen/tuple
        (gen/return "box-lines: ")
        gen-prop-box-lines)]
    [100
      (gen/tuple
        (gen/return "list-style-image: ")
        gen-prop-list-style-image)]
    [100
      (gen/tuple
        (gen/return "page-break-inside: ")
        gen-prop-page-break-inside)]
    [100
      (gen/tuple
        (gen/return "columns: ")
        gen-prop-columns)]
    [100
      (gen/tuple
        (gen/return "text-emphasis-position: ")
        gen-prop-text-emphasis-position)]
    [100
      (gen/tuple
        (gen/return "text-align-last: ")
        gen-prop-text-align-last)]
    [100
      (gen/tuple
        (gen/return "border-inline-end-style: ")
        gen-prop-border-inline-end-style)]
    [100
      (gen/tuple
        (gen/return "box-pack: ")
        gen-prop-box-pack)]
    [100
      (gen/tuple
        (gen/return "min-height: ")
        gen-prop-min-height)]
    [100
      (gen/tuple
        (gen/return "scroll-behavior: ")
        gen-prop-scroll-behavior)]
    [100
      (gen/tuple
        (gen/return "-moz-outline-radius-topright: ")
        gen-prop--moz-outline-radius-topright)]
    [100
      (gen/tuple
        (gen/return "box-flex-group: ")
        gen-prop-box-flex-group)]
    [100
      (gen/tuple
        (gen/return "grid-row-end: ")
        gen-prop-grid-row-end)]
    [100
      (gen/tuple
        (gen/return "-moz-border-left-colors: ")
        gen-prop--moz-border-left-colors)]
    [100
      (gen/tuple
        (gen/return "border-radius: ")
        gen-prop-border-radius)]
    [100
      (gen/tuple
        (gen/return "background-position: ")
        gen-prop-background-position)]
    [100
      (gen/tuple
        (gen/return "-webkit-text-fill-color: ")
        gen-prop--webkit-text-fill-color)]
    [100
      (gen/tuple
        (gen/return "transition-timing-function: ")
        gen-prop-transition-timing-function)]
    [100
      (gen/tuple
        (gen/return "animation-iteration-count: ")
        gen-prop-animation-iteration-count)]
    [100
      (gen/tuple
        (gen/return "box-direction: ")
        gen-prop-box-direction)]
    [100
      (gen/tuple
        (gen/return "box-sizing: ")
        gen-prop-box-sizing)]
    [100
      (gen/tuple
        (gen/return "padding-bottom: ")
        gen-prop-padding-bottom)]
    [100
      (gen/tuple
        (gen/return "border-inline-start-width: ")
        gen-prop-border-inline-start-width)]
    [100
      (gen/tuple
        (gen/return "border-right-width: ")
        gen-prop-border-right-width)]
    [100
      (gen/tuple
        (gen/return "border-bottom-width: ")
        gen-prop-border-bottom-width)]
    [100
      (gen/tuple
        (gen/return "-webkit-tap-highlight-color: ")
        gen-prop--webkit-tap-highlight-color)]
    [100
      (gen/tuple
        (gen/return "padding-left: ")
        gen-prop-padding-left)]
    [100
      (gen/tuple
        (gen/return "grid-row: ")
        gen-prop-grid-row)]
    [100
      (gen/tuple
        (gen/return "text-decoration: ")
        gen-prop-text-decoration)]
    [100
      (gen/tuple
        (gen/return "word-spacing: ")
        gen-prop-word-spacing)]
    [100
      (gen/tuple
        (gen/return "border-inline-start-style: ")
        gen-prop-border-inline-start-style)]
    [100
      (gen/tuple
        (gen/return "marker-offset: ")
        gen-prop-marker-offset)]
    [100
      (gen/tuple
        (gen/return "-moz-force-broken-image-icon: ")
        gen-prop--moz-force-broken-image-icon)]
    [100
      (gen/tuple
        (gen/return "display-list: ")
        gen-prop-display-list)]
    [100
      (gen/tuple
        (gen/return "backface-visibility: ")
        gen-prop-backface-visibility)]
    [100
      (gen/tuple
        (gen/return "padding: ")
        gen-prop-padding)]
    [100
      (gen/tuple
        (gen/return "-webkit-touch-callout: ")
        gen-prop--webkit-touch-callout)]
    [100
      (gen/tuple
        (gen/return "offset-anchor: ")
        gen-prop-offset-anchor)]
    [100
      (gen/tuple
        (gen/return "font-stretch: ")
        gen-prop-font-stretch)]
    [100
      (gen/tuple
        (gen/return "grid-auto-flow: ")
        gen-prop-grid-auto-flow)]
    [100
      (gen/tuple
        (gen/return "border-left-style: ")
        gen-prop-border-left-style)]
    [100
      (gen/tuple
        (gen/return "-moz-stack-sizing: ")
        gen-prop--moz-stack-sizing)]
    [100
      (gen/tuple
        (gen/return "margin-inline-start: ")
        gen-prop-margin-inline-start)]
    [100
      (gen/tuple
        (gen/return "-webkit-border-before-style: ")
        gen-prop--webkit-border-before-style)]
    [100
      (gen/tuple
        (gen/return "list-style-type: ")
        gen-prop-list-style-type)]
    [100
      (gen/tuple
        (gen/return "break-after: ")
        gen-prop-break-after)]
    [100
      (gen/tuple
        (gen/return "backdrop-filter: ")
        gen-prop-backdrop-filter)]
    [100
      (gen/tuple
        (gen/return "order: ")
        gen-prop-order)]
    [100
      (gen/tuple
        (gen/return "border-bottom: ")
        gen-prop-border-bottom)]
    [100
      (gen/tuple
        (gen/return "border-inline-end-color: ")
        gen-prop-border-inline-end-color)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-composite: ")
        gen-prop--webkit-mask-composite)]
    [100
      (gen/tuple
        (gen/return "azimuth: ")
        gen-prop-azimuth)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-type-x: ")
        gen-prop-scroll-snap-type-x)]
    [100
      (gen/tuple
        (gen/return "column-span: ")
        gen-prop-column-span)]
    [100
      (gen/tuple
        (gen/return "box-flex: ")
        gen-prop-box-flex)]
    [100
      (gen/tuple
        (gen/return "transform-style: ")
        gen-prop-transform-style)]
    [100
      (gen/tuple
        (gen/return "font-family: ")
        gen-prop-font-family)]
    [100
      (gen/tuple
        (gen/return "column-rule: ")
        gen-prop-column-rule)]
    [100
      (gen/tuple
        (gen/return "animation-duration: ")
        gen-prop-animation-duration)]
    [100
      (gen/tuple
        (gen/return "border-block-end-color: ")
        gen-prop-border-block-end-color)]
    [100
      (gen/tuple
        (gen/return "justify-content: ")
        gen-prop-justify-content)]
    [100
      (gen/tuple
        (gen/return "text-decoration-line: ")
        gen-prop-text-decoration-line)]
    [100
      (gen/tuple
        (gen/return "border-style: ")
        gen-prop-border-style)]
    [100
      (gen/tuple
        (gen/return "resize: ")
        gen-prop-resize)]
    [100
      (gen/tuple
        (gen/return "block-size: ")
        gen-prop-block-size)]
    [100
      (gen/tuple
        (gen/return "text-transform: ")
        gen-prop-text-transform)]
    [100
      (gen/tuple
        (gen/return "font-style: ")
        gen-prop-font-style)]
    [100
      (gen/tuple
        (gen/return "-moz-appearance: ")
        gen-prop--moz-appearance)]
    [100
      (gen/tuple
        (gen/return "mask-composite: ")
        gen-prop-mask-composite)]
    [100
      (gen/tuple
        (gen/return "-moz-binding: ")
        gen-prop--moz-binding)]
    [100
      (gen/tuple
        (gen/return "grid-gap: ")
        gen-prop-grid-gap)]
    [100
      (gen/tuple
        (gen/return "perspective: ")
        gen-prop-perspective)]
    [100
      (gen/tuple
        (gen/return "-moz-text-blink: ")
        gen-prop--moz-text-blink)]
    [100
      (gen/tuple
        (gen/return "border-image-source: ")
        gen-prop-border-image-source)]
    [100
      (gen/tuple
        (gen/return "-moz-float-edge: ")
        gen-prop--moz-float-edge)]
    [100
      (gen/tuple
        (gen/return "line-height: ")
        gen-prop-line-height)]
    [100
      (gen/tuple
        (gen/return "-moz-window-shadow: ")
        gen-prop--moz-window-shadow)]
    [100
      (gen/tuple
        (gen/return "filter: ")
        gen-prop-filter)]
    [100
      (gen/tuple
        (gen/return "box-shadow: ")
        gen-prop-box-shadow)]
    [100
      (gen/tuple
        (gen/return "grid-template-areas: ")
        gen-prop-grid-template-areas)]
    [100
      (gen/tuple
        (gen/return "border-left-width: ")
        gen-prop-border-left-width)]
    [100
      (gen/tuple
        (gen/return "column-rule-color: ")
        gen-prop-column-rule-color)]
    [100
      (gen/tuple
        (gen/return "grid-auto-rows: ")
        gen-prop-grid-auto-rows)]
    [100
      (gen/tuple
        (gen/return "opacity: ")
        gen-prop-opacity)]
    [100
      (gen/tuple
        (gen/return "counter-increment: ")
        gen-prop-counter-increment)]
    [100
      (gen/tuple
        (gen/return "-moz-user-modify: ")
        gen-prop--moz-user-modify)]
    [100
      (gen/tuple
        (gen/return "initial-letter-align: ")
        gen-prop-initial-letter-align)]
    [100
      (gen/tuple
        (gen/return "min-block-size: ")
        gen-prop-min-block-size)]
    [100
      (gen/tuple
        (gen/return "border-top-width: ")
        gen-prop-border-top-width)]
    [100
      (gen/tuple
        (gen/return "image-orientation: ")
        gen-prop-image-orientation)]
    [100
      (gen/tuple
        (gen/return "mask-size: ")
        gen-prop-mask-size)]
    [100
      (gen/tuple
        (gen/return "border-image-repeat: ")
        gen-prop-border-image-repeat)]
    [100
      (gen/tuple
        (gen/return "float: ")
        gen-prop-float)]
    [100
      (gen/tuple
        (gen/return "font-language-override: ")
        gen-prop-font-language-override)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-destination: ")
        gen-prop-scroll-snap-destination)]
    [100
      (gen/tuple
        (gen/return "grid-row-gap: ")
        gen-prop-grid-row-gap)]
    [100
      (gen/tuple
        (gen/return "unicode-bidi: ")
        gen-prop-unicode-bidi)]
    [100
      (gen/tuple
        (gen/return "transition: ")
        gen-prop-transition)]
    [100
      (gen/tuple
        (gen/return "column-rule-width: ")
        gen-prop-column-rule-width)]
    [100
      (gen/tuple
        (gen/return "offset-block-start: ")
        gen-prop-offset-block-start)]
    [100
      (gen/tuple
        (gen/return "offset-distance: ")
        gen-prop-offset-distance)]
    [100
      (gen/tuple
        (gen/return "mask-clip: ")
        gen-prop-mask-clip)]
    [100
      (gen/tuple
        (gen/return "animation-direction: ")
        gen-prop-animation-direction)]
    [100
      (gen/tuple
        (gen/return "offset-block-end: ")
        gen-prop-offset-block-end)]
    [100
      (gen/tuple
        (gen/return "border-image-outset: ")
        gen-prop-border-image-outset)]
    [100
      (gen/tuple
        (gen/return "font-variation-settings: ")
        gen-prop-font-variation-settings)]
    [100
      (gen/tuple
        (gen/return "min-inline-size: ")
        gen-prop-min-inline-size)]
    [100
      (gen/tuple
        (gen/return "caption-side: ")
        gen-prop-caption-side)]
    [100
      (gen/tuple
        (gen/return "orphans: ")
        gen-prop-orphans)]
    [100
      (gen/tuple
        (gen/return "margin-inline-end: ")
        gen-prop-margin-inline-end)]
    [100
      (gen/tuple
        (gen/return "border-bottom-style: ")
        gen-prop-border-bottom-style)]
    [100
      (gen/tuple
        (gen/return "grid-row-start: ")
        gen-prop-grid-row-start)]
    [100
      (gen/tuple
        (gen/return "ime-mode: ")
        gen-prop-ime-mode)]
    [100
      (gen/tuple
        (gen/return "top: ")
        gen-prop-top)]
    [100
      (gen/tuple
        (gen/return "image-rendering: ")
        gen-prop-image-rendering)]
    [100
      (gen/tuple
        (gen/return "shape-image-threshold: ")
        gen-prop-shape-image-threshold)]
    [100
      (gen/tuple
        (gen/return "animation-name: ")
        gen-prop-animation-name)]
    [100
      (gen/tuple
        (gen/return "right: ")
        gen-prop-right)]
    [100
      (gen/tuple
        (gen/return "z-index: ")
        gen-prop-z-index)]
    [100
      (gen/tuple
        (gen/return "background-blend-mode: ")
        gen-prop-background-blend-mode)]
    [100
      (gen/tuple
        (gen/return "letter-spacing: ")
        gen-prop-letter-spacing)]
    [100
      (gen/tuple
        (gen/return "list-style: ")
        gen-prop-list-style)]
    [100
      (gen/tuple
        (gen/return "left: ")
        gen-prop-left)]
    [100
      (gen/tuple
        (gen/return "width: ")
        gen-prop-width)]
    [100
      (gen/tuple
        (gen/return "will-change: ")
        gen-prop-will-change)]
    [100
      (gen/tuple
        (gen/return "font-synthesis: ")
        gen-prop-font-synthesis)]
    [100
      (gen/tuple
        (gen/return "flex-flow: ")
        gen-prop-flex-flow)]
    [100
      (gen/tuple
        (gen/return "background-size: ")
        gen-prop-background-size)]
    [100
      (gen/tuple
        (gen/return "box-suppress: ")
        gen-prop-box-suppress)]
    [100
      (gen/tuple
        (gen/return "background-clip: ")
        gen-prop-background-clip)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-points-x: ")
        gen-prop-scroll-snap-points-x)]
    [100
      (gen/tuple
        (gen/return "animation: ")
        gen-prop-animation)]
    [100
      (gen/tuple
        (gen/return "overflow: ")
        gen-prop-overflow)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-clip: ")
        gen-prop--webkit-mask-clip)]
    [100
      (gen/tuple
        (gen/return "font-size-adjust: ")
        gen-prop-font-size-adjust)]
    [100
      (gen/tuple
        (gen/return "-moz-image-region: ")
        gen-prop--moz-image-region)]
    [100
      (gen/tuple
        (gen/return "padding-inline-end: ")
        gen-prop-padding-inline-end)]
    [100
      (gen/tuple
        (gen/return "counter-reset: ")
        gen-prop-counter-reset)]
    [100
      (gen/tuple
        (gen/return "column-gap: ")
        gen-prop-column-gap)]
    [100
      (gen/tuple
        (gen/return "border-color: ")
        gen-prop-border-color)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-position-x: ")
        gen-prop--webkit-mask-position-x)]
    [100
      (gen/tuple
        (gen/return "vertical-align: ")
        gen-prop-vertical-align)]
    [100
      (gen/tuple
        (gen/return "display-inside: ")
        gen-prop-display-inside)]
    [100
      (gen/tuple
        (gen/return "border-width: ")
        gen-prop-border-width)]
    [100
      (gen/tuple
        (gen/return "quotes: ")
        gen-prop-quotes)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-points-y: ")
        gen-prop-scroll-snap-points-y)]
    [100
      (gen/tuple
        (gen/return "grid-area: ")
        gen-prop-grid-area)]
    [100
      (gen/tuple
        (gen/return "border-spacing: ")
        gen-prop-border-spacing)]
    [100
      (gen/tuple
        (gen/return "border-top-style: ")
        gen-prop-border-top-style)]
    [100
      (gen/tuple
        (gen/return "text-underline-position: ")
        gen-prop-text-underline-position)]
    [100
      (gen/tuple
        (gen/return "grid-template-rows: ")
        gen-prop-grid-template-rows)]
    [100
      (gen/tuple
        (gen/return "object-position: ")
        gen-prop-object-position)]
    [100
      (gen/tuple
        (gen/return "border-block-start-style: ")
        gen-prop-border-block-start-style)]
    [100
      (gen/tuple
        (gen/return "-moz-outline-radius: ")
        gen-prop--moz-outline-radius)]
    [100
      (gen/tuple
        (gen/return "border-block-end-style: ")
        gen-prop-border-block-end-style)]
    [100
      (gen/tuple
        (gen/return "padding-block-start: ")
        gen-prop-padding-block-start)]
    [100
      (gen/tuple
        (gen/return "animation-delay: ")
        gen-prop-animation-delay)]
    [100
      (gen/tuple
        (gen/return "-webkit-box-reflect: ")
        gen-prop--webkit-box-reflect)]
    [100
      (gen/tuple
        (gen/return "-moz-orient: ")
        gen-prop--moz-orient)]
    [100
      (gen/tuple
        (gen/return "border-inline-start: ")
        gen-prop-border-inline-start)]
    [100
      (gen/tuple
        (gen/return "border-collapse: ")
        gen-prop-border-collapse)]
    [100
      (gen/tuple
        (gen/return "border-image-slice: ")
        gen-prop-border-image-slice)]
    [100
      (gen/tuple
        (gen/return "flex-direction: ")
        gen-prop-flex-direction)]
    [100
      (gen/tuple
        (gen/return "color: ")
        gen-prop-color)]
    [100
      (gen/tuple
        (gen/return "offset-position: ")
        gen-prop-offset-position)]
    [100
      (gen/tuple
        (gen/return "background-image: ")
        gen-prop-background-image)]
    [100
      (gen/tuple
        (gen/return "font-variant-caps: ")
        gen-prop-font-variant-caps)]
    [100
      (gen/tuple
        (gen/return "-webkit-text-stroke: ")
        gen-prop--webkit-text-stroke)]
    [100
      (gen/tuple
        (gen/return "border-top-right-radius: ")
        gen-prop-border-top-right-radius)]
    [100
      (gen/tuple
        (gen/return "border-inline-end-width: ")
        gen-prop-border-inline-end-width)]
    [100
      (gen/tuple
        (gen/return "text-emphasis-color: ")
        gen-prop-text-emphasis-color)]
    [100
      (gen/tuple
        (gen/return "text-indent: ")
        gen-prop-text-indent)]
    [100
      (gen/tuple
        (gen/return "mix-blend-mode: ")
        gen-prop-mix-blend-mode)]
    [100
      (gen/tuple
        (gen/return "max-height: ")
        gen-prop-max-height)]
    [100
      (gen/tuple
        (gen/return "mask-repeat: ")
        gen-prop-mask-repeat)]
    [100
      (gen/tuple
        (gen/return "offset: ")
        gen-prop-offset)]
    [100
      (gen/tuple
        (gen/return "touch-action: ")
        gen-prop-touch-action)]
    [100
      (gen/tuple
        (gen/return "word-wrap: ")
        gen-prop-word-wrap)]
    [100
      (gen/tuple
        (gen/return "isolation: ")
        gen-prop-isolation)]
    [100
      (gen/tuple
        (gen/return "transition-duration: ")
        gen-prop-transition-duration)]
    [100
      (gen/tuple
        (gen/return "-moz-user-input: ")
        gen-prop--moz-user-input)]
    [100
      (gen/tuple
        (gen/return "grid-auto-columns: ")
        gen-prop-grid-auto-columns)]
    [100
      (gen/tuple
        (gen/return "grid-column-end: ")
        gen-prop-grid-column-end)]
    [100
      (gen/tuple
        (gen/return "align-content: ")
        gen-prop-align-content)]
    [100
      (gen/tuple
        (gen/return "border-bottom-right-radius: ")
        gen-prop-border-bottom-right-radius)]
    [100
      (gen/tuple
        (gen/return "grid-template: ")
        gen-prop-grid-template)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-image: ")
        gen-prop--webkit-mask-image)]
    [100
      (gen/tuple
        (gen/return "widows: ")
        gen-prop-widows)]
    [100
      (gen/tuple
        (gen/return "background-position-y: ")
        gen-prop-background-position-y)]
    [100
      (gen/tuple
        (gen/return "font-size: ")
        gen-prop-font-size)]
    [100
      (gen/tuple
        (gen/return "border-right-style: ")
        gen-prop-border-right-style)]
    [100
      (gen/tuple
        (gen/return "animation-timing-function: ")
        gen-prop-animation-timing-function)]
    [100
      (gen/tuple
        (gen/return "inline-size: ")
        gen-prop-inline-size)]
    [100
      (gen/tuple
        (gen/return "offset-inline-end: ")
        gen-prop-offset-inline-end)]
    [100
      (gen/tuple
        (gen/return "font-variant-position: ")
        gen-prop-font-variant-position)]
    [100
      (gen/tuple
        (gen/return "line-break: ")
        gen-prop-line-break)]
    [100
      (gen/tuple
        (gen/return "overflow-y: ")
        gen-prop-overflow-y)]
    [100
      (gen/tuple
        (gen/return "-webkit-border-before-color: ")
        gen-prop--webkit-border-before-color)]
    [100
      (gen/tuple
        (gen/return "border-block-start-color: ")
        gen-prop-border-block-start-color)]
    [100
      (gen/tuple
        (gen/return "clip: ")
        gen-prop-clip)]
    [100
      (gen/tuple
        (gen/return "align-self: ")
        gen-prop-align-self)]
    [100
      (gen/tuple
        (gen/return "border-top-color: ")
        gen-prop-border-top-color)]
    [100
      (gen/tuple
        (gen/return "overflow-wrap: ")
        gen-prop-overflow-wrap)]
    [100
      (gen/tuple
        (gen/return "flex: ")
        gen-prop-flex)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-position-y: ")
        gen-prop--webkit-mask-position-y)]
    [100
      (gen/tuple
        (gen/return "flex-basis: ")
        gen-prop-flex-basis)]
    [100
      (gen/tuple
        (gen/return "font-variant-numeric: ")
        gen-prop-font-variant-numeric)]
    [100
      (gen/tuple
        (gen/return "ruby-align: ")
        gen-prop-ruby-align)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-repeat-y: ")
        gen-prop--webkit-mask-repeat-y)]
    [100
      (gen/tuple
        (gen/return "position: ")
        gen-prop-position)]
    [100
      (gen/tuple
        (gen/return "border-left-color: ")
        gen-prop-border-left-color)]
    [100
      (gen/tuple
        (gen/return "-moz-border-bottom-colors: ")
        gen-prop--moz-border-bottom-colors)]
    [100
      (gen/tuple
        (gen/return "margin-top: ")
        gen-prop-margin-top)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-type: ")
        gen-prop-scroll-snap-type)]
    [100
      (gen/tuple
        (gen/return "-moz-border-right-colors: ")
        gen-prop--moz-border-right-colors)]
    [100
      (gen/tuple
        (gen/return "display: ")
        gen-prop-display)]
    [100
      (gen/tuple
        (gen/return "shape-outside: ")
        gen-prop-shape-outside)]
    [100
      (gen/tuple
        (gen/return "padding-block-end: ")
        gen-prop-padding-block-end)]
    [100
      (gen/tuple
        (gen/return "shape-margin: ")
        gen-prop-shape-margin)]
    [100
      (gen/tuple
        (gen/return "box-ordinal-group: ")
        gen-prop-box-ordinal-group)]
    [100
      (gen/tuple
        (gen/return "border-image-width: ")
        gen-prop-border-image-width)]
    [100
      (gen/tuple
        (gen/return "padding-right: ")
        gen-prop-padding-right)]
    [100
      (gen/tuple
        (gen/return "all: ")
        gen-prop-all)]
    [100
      (gen/tuple
        (gen/return "font-feature-settings: ")
        gen-prop-font-feature-settings)]
    [100
      (gen/tuple
        (gen/return "border-block-end-width: ")
        gen-prop-border-block-end-width)]
    [100
      (gen/tuple
        (gen/return "border-right-color: ")
        gen-prop-border-right-color)]
    [100
      (gen/tuple
        (gen/return "perspective-origin: ")
        gen-prop-perspective-origin)]
    [100
      (gen/tuple
        (gen/return "font: ")
        gen-prop-font)]
    [100
      (gen/tuple
        (gen/return "table-layout: ")
        gen-prop-table-layout)]
    [100
      (gen/tuple
        (gen/return "bottom: ")
        gen-prop-bottom)]
    [100
      (gen/tuple
        (gen/return "text-decoration-color: ")
        gen-prop-text-decoration-color)]
    [100
      (gen/tuple
        (gen/return "grid: ")
        gen-prop-grid)]
    [100
      (gen/tuple
        (gen/return "text-size-adjust: ")
        gen-prop-text-size-adjust)]
    [100
      (gen/tuple
        (gen/return "overflow-x: ")
        gen-prop-overflow-x)]
    [100
      (gen/tuple
        (gen/return "mask-type: ")
        gen-prop-mask-type)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-origin: ")
        gen-prop--webkit-mask-origin)]
    [100
      (gen/tuple
        (gen/return "-ms-overflow-style: ")
        gen-prop--ms-overflow-style)]
    [100
      (gen/tuple
        (gen/return "empty-cells: ")
        gen-prop-empty-cells)]
    [100
      (gen/tuple
        (gen/return "outline-width: ")
        gen-prop-outline-width)]
    [100
      (gen/tuple
        (gen/return "transition-delay: ")
        gen-prop-transition-delay)]
    [100
      (gen/tuple
        (gen/return "hyphens: ")
        gen-prop-hyphens)]
    [100
      (gen/tuple
        (gen/return "offset-rotate: ")
        gen-prop-offset-rotate)]
    [100
      (gen/tuple
        (gen/return "writing-mode: ")
        gen-prop-writing-mode)]
    [100
      (gen/tuple
        (gen/return "display-outside: ")
        gen-prop-display-outside)]
    [100
      (gen/tuple
        (gen/return "font-variant-east-asian: ")
        gen-prop-font-variant-east-asian)]
    [100
      (gen/tuple
        (gen/return "text-decoration-style: ")
        gen-prop-text-decoration-style)]
    [100
      (gen/tuple
        (gen/return "mask: ")
        gen-prop-mask)]
    [100
      (gen/tuple
        (gen/return "contain: ")
        gen-prop-contain)]
    [100
      (gen/tuple
        (gen/return "clear: ")
        gen-prop-clear)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-type-y: ")
        gen-prop-scroll-snap-type-y)]
    [100
      (gen/tuple
        (gen/return "cursor: ")
        gen-prop-cursor)]
    [100
      (gen/tuple
        (gen/return "break-inside: ")
        gen-prop-break-inside)]
    [100
      (gen/tuple
        (gen/return "transform: ")
        gen-prop-transform)]
    [100
      (gen/tuple
        (gen/return "-webkit-border-before-width: ")
        gen-prop--webkit-border-before-width)]
    [100
      (gen/tuple
        (gen/return "font-variant: ")
        gen-prop-font-variant)]
    [100
      (gen/tuple
        (gen/return "flex-shrink: ")
        gen-prop-flex-shrink)]
    [100
      (gen/tuple
        (gen/return "background-color: ")
        gen-prop-background-color)]
    [100
      (gen/tuple
        (gen/return "margin-left: ")
        gen-prop-margin-left)]
    [100
      (gen/tuple
        (gen/return "text-emphasis-style: ")
        gen-prop-text-emphasis-style)]
    [100
      (gen/tuple
        (gen/return "box-align: ")
        gen-prop-box-align)]
    [100
      (gen/tuple
        (gen/return "outline-offset: ")
        gen-prop-outline-offset)]
    [100
      (gen/tuple
        (gen/return "font-kerning: ")
        gen-prop-font-kerning)]
    [100
      (gen/tuple
        (gen/return "flex-wrap: ")
        gen-prop-flex-wrap)]
    [100
      (gen/tuple
        (gen/return "grid-column-gap: ")
        gen-prop-grid-column-gap)]
    [100
      (gen/tuple
        (gen/return "max-block-size: ")
        gen-prop-max-block-size)]
    [100
      (gen/tuple
        (gen/return "border-inline-start-color: ")
        gen-prop-border-inline-start-color)]
    [100
      (gen/tuple
        (gen/return "-webkit-text-stroke-color: ")
        gen-prop--webkit-text-stroke-color)]
    [100
      (gen/tuple
        (gen/return "height: ")
        gen-prop-height)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-repeat-x: ")
        gen-prop--webkit-mask-repeat-x)]
    [100
      (gen/tuple
        (gen/return "ruby-merge: ")
        gen-prop-ruby-merge)]
    [100
      (gen/tuple
        (gen/return "grid-template-columns: ")
        gen-prop-grid-template-columns)]
    [100
      (gen/tuple
        (gen/return "grid-column-start: ")
        gen-prop-grid-column-start)]
    [100
      (gen/tuple
        (gen/return "object-fit: ")
        gen-prop-object-fit)]
    [100
      (gen/tuple
        (gen/return "border-bottom-left-radius: ")
        gen-prop-border-bottom-left-radius)]
    [100
      (gen/tuple
        (gen/return "mask-image: ")
        gen-prop-mask-image)]
    [100
      (gen/tuple
        (gen/return "list-style-position: ")
        gen-prop-list-style-position)]
    [100
      (gen/tuple
        (gen/return "break-before: ")
        gen-prop-break-before)]
    [100
      (gen/tuple
        (gen/return "page-break-after: ")
        gen-prop-page-break-after)]
    [100
      (gen/tuple
        (gen/return "margin: ")
        gen-prop-margin)]
    [100
      (gen/tuple
        (gen/return "font-variant-alternates: ")
        gen-prop-font-variant-alternates)]
    [100
      (gen/tuple
        (gen/return "margin-right: ")
        gen-prop-margin-right)]
    [100
      (gen/tuple
        (gen/return "outline: ")
        gen-prop-outline)]
    [100
      (gen/tuple
        (gen/return "border-inline-end: ")
        gen-prop-border-inline-end)]
    [100
      (gen/tuple
        (gen/return "max-width: ")
        gen-prop-max-width)]
    [100
      (gen/tuple
        (gen/return "border: ")
        gen-prop-border)]
    [100
      (gen/tuple
        (gen/return "-webkit-border-before: ")
        gen-prop--webkit-border-before)]
    [100
      (gen/tuple
        (gen/return "offset-inline-start: ")
        gen-prop-offset-inline-start)]
    [100
      (gen/tuple
        (gen/return "column-width: ")
        gen-prop-column-width)]
    [100
      (gen/tuple
        (gen/return "content: ")
        gen-prop-content)]
    [100
      (gen/tuple
        (gen/return "mask-origin: ")
        gen-prop-mask-origin)]
    [100
      (gen/tuple
        (gen/return "column-fill: ")
        gen-prop-column-fill)]
    [100
      (gen/tuple
        (gen/return "pointer-events: ")
        gen-prop-pointer-events)]
    [100
      (gen/tuple
        (gen/return "grid-column: ")
        gen-prop-grid-column)]
    [100
      (gen/tuple
        (gen/return "outline-style: ")
        gen-prop-outline-style)]
    [100
      (gen/tuple
        (gen/return "text-combine-upright: ")
        gen-prop-text-combine-upright)]
    [100
      (gen/tuple
        (gen/return "scroll-snap-coordinate: ")
        gen-prop-scroll-snap-coordinate)]
    [100
      (gen/tuple
        (gen/return "column-rule-style: ")
        gen-prop-column-rule-style)]
    [100
      (gen/tuple
        (gen/return "column-count: ")
        gen-prop-column-count)]
    [100
      (gen/tuple
        (gen/return "offset-path: ")
        gen-prop-offset-path)]
    [100
      (gen/tuple
        (gen/return "animation-play-state: ")
        gen-prop-animation-play-state)]
    [100
      (gen/tuple
        (gen/return "text-orientation: ")
        gen-prop-text-orientation)]
    [100
      (gen/tuple
        (gen/return "page-break-before: ")
        gen-prop-page-break-before)]
    [100
      (gen/tuple
        (gen/return "-moz-outline-radius-topleft: ")
        gen-prop--moz-outline-radius-topleft)]
    [100
      (gen/tuple
        (gen/return "margin-bottom: ")
        gen-prop-margin-bottom)]
    [100
      (gen/tuple
        (gen/return "appearance: ")
        gen-prop-appearance)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-position: ")
        gen-prop--webkit-mask-position)]
    [100
      (gen/tuple
        (gen/return "white-space: ")
        gen-prop-white-space)]
    [100
      (gen/tuple
        (gen/return "text-emphasis: ")
        gen-prop-text-emphasis)]
    [100
      (gen/tuple
        (gen/return "direction: ")
        gen-prop-direction)]
    [100
      (gen/tuple
        (gen/return "text-align: ")
        gen-prop-text-align)]
    [100
      (gen/tuple
        (gen/return "overflow-clip-box: ")
        gen-prop-overflow-clip-box)]
    [100
      (gen/tuple
        (gen/return "mask-position: ")
        gen-prop-mask-position)]
    [100
      (gen/tuple
        (gen/return "text-decoration-skip: ")
        gen-prop-text-decoration-skip)]
    [100
      (gen/tuple
        (gen/return "flex-grow: ")
        gen-prop-flex-grow)]
    [100
      (gen/tuple
        (gen/return "background-repeat: ")
        gen-prop-background-repeat)]
    [100
      (gen/tuple
        (gen/return "font-weight: ")
        gen-prop-font-weight)]
    [100
      (gen/tuple
        (gen/return "animation-fill-mode: ")
        gen-prop-animation-fill-mode)]
    [100
      (gen/tuple
        (gen/return "border-image: ")
        gen-prop-border-image)]
    [100
      (gen/tuple
        (gen/return "max-inline-size: ")
        gen-prop-max-inline-size)]
    [100
      (gen/tuple
        (gen/return "background-position-x: ")
        gen-prop-background-position-x)]
    [100
      (gen/tuple
        (gen/return "border-right: ")
        gen-prop-border-right)]
    [100
      (gen/tuple
        (gen/return "-moz-border-top-colors: ")
        gen-prop--moz-border-top-colors)]
    [100
      (gen/tuple
        (gen/return "transform-origin: ")
        gen-prop-transform-origin)]
    [100
      (gen/tuple
        (gen/return "background-attachment: ")
        gen-prop-background-attachment)]
    [100
      (gen/tuple
        (gen/return "tab-size: ")
        gen-prop-tab-size)]
    [100
      (gen/tuple
        (gen/return "font-variant-ligatures: ")
        gen-prop-font-variant-ligatures)]
    [100
      (gen/tuple
        (gen/return "border-left: ")
        gen-prop-border-left)]
    [100
      (gen/tuple
        (gen/return "caret-color: ")
        gen-prop-caret-color)]
    [100
      (gen/tuple
        (gen/return "padding-inline-start: ")
        gen-prop-padding-inline-start)]
    [100
      (gen/tuple
        (gen/return "box-decoration-break: ")
        gen-prop-box-decoration-break)]
    [100
      (gen/tuple
        (gen/return "-webkit-mask-repeat: ")
        gen-prop--webkit-mask-repeat)]
    [100
      (gen/tuple
        (gen/return "border-top: ")
        gen-prop-border-top)]
    [100
      (gen/tuple
        (gen/return "-moz-outline-radius-bottomleft: ")
        gen-prop--moz-outline-radius-bottomleft)]
    [100
      (gen/tuple
        (gen/return "mask-mode: ")
        gen-prop-mask-mode)]
    [100
      (gen/tuple
        (gen/return "min-width: ")
        gen-prop-min-width)]
    [100
      (gen/tuple
        (gen/return "user-select: ")
        gen-prop-user-select)]
    [100
      (gen/tuple
        (gen/return "visibility: ")
        gen-prop-visibility)]
    [100
      (gen/tuple
        (gen/return "border-top-left-radius: ")
        gen-prop-border-top-left-radius)]
    [100
      (gen/tuple
        (gen/return "-moz-outline-radius-bottomright: ")
        gen-prop--moz-outline-radius-bottomright)]
    [100
      (gen/tuple
        (gen/return "text-overflow: ")
        gen-prop-text-overflow)]
    [100
      (gen/tuple
        (gen/return "image-resolution: ")
        gen-prop-image-resolution)]
    [100
      (gen/tuple
        (gen/return "clip-path: ")
        gen-prop-clip-path)]
    [100
      (gen/tuple
        (gen/return "transform-box: ")
        gen-prop-transform-box)]
    [100
      (gen/tuple
        (gen/return "text-rendering: ")
        gen-prop-text-rendering)]]))

(def gen-nonprop-nth
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-an-plus-b
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "even")
        (gen/return " "))]
    [100
      (gen/tuple
        (gen/return "odd")
        (gen/return " "))]]))

(def gen-css-assignments
  (gen/fmap util/flatten-text
    (gen/tuple
      gen-css-assignment
      (gen/vector
        (gen/tuple
          (gen/return "; ")
          gen-css-assignment)))))

(def gen-nonprop-symbol
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-image
        (gen/return " "))]
    [100
      (gen/tuple
        gen-nonprop-ident
        (gen/return " "))]]))
