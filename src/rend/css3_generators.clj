(ns rend.css3-generators
   (:require [mend.util :as util]
             [clojure.test.check.generators :as gen]
             [rend.misc-generators :as misc-gen]))

;; Generated by mend.css3

;; Some base generators/types that are assumed

(def gen-nonprop-integer gen/int)

(def gen-nonprop-positive-integer gen/pos-int)

(def gen-nonprop-number (gen/frequency [[100 gen/int]
                                        [100 gen/double]]))

;; https://developer.mozilla.org/en-US/docs/Web/CSS/length
(def gen-length-unit (gen/frequency [;; font-relative
                                     [100 (gen/return "em")]
                                     [100 (gen/return "ex")]
                                     [100 (gen/return "ch")]
                                     [100 (gen/return "rem")]
                                     ;; viewport-percentage units
                                     [100 (gen/return "vh")]
                                     [100 (gen/return "vw")]
                                     [100 (gen/return "vmin")]
                                     [100 (gen/return "vmax")]
                                     ;; absolute length units
                                     [100 (gen/return "px")]
                                     [100 (gen/return "mm")]
                                     [100 (gen/return "q")]
                                     [100 (gen/return "cm")]
                                     [100 (gen/return "in")]
                                     [100 (gen/return "pt")]
                                     [100 (gen/return "pc")]]))

(def gen-nonprop-length (gen/fmap (fn [[i l]] (str i l))
                                  (gen/tuple gen/pos-int gen-length-unit)))

(def gen-nonprop-dimension (gen/return "STUB_dimension"))
(def gen-nonprop-ratio (gen/return "STUB_ratio"))

(def gen-nonprop-hex-color3 misc-gen/hex-color3)
(def gen-nonprop-hex-color6 misc-gen/hex-color6)

(def gen-nonprop-hex-color (gen/frequency [[100 gen-nonprop-hex-color3]
                                           [100 gen-nonprop-hex-color6]]))

(def gen-nonprop-percentage misc-gen/percentage)

(def gen-nonprop-id-selector
  (->> (gen/tuple gen/char-alpha (gen/vector gen/char-alphanumeric))
       (gen/fmap (fn [[c cs]] (apply str (cons c cs))))))

;; TODO:
(def gen-nonprop-url (gen/return "http://blah.com/path/to/somehting"))
(def gen-nonprop-string
  (->> (gen/tuple gen/char-alpha (gen/vector gen/char-alphanumeric))
       (gen/fmap (fn [[c cs]] (apply str (cons c cs))))))
(def gen-nonprop-custom-ident (gen/return "STUB_custom_ident"))
(def gen-nonprop-custom-property-name (gen/return "STUB_custom_property"))
(def gen-nonprop-ident (gen/return "STUB_ident"))
(def gen-nonprop-angle (gen/return "90"))
(def gen-nonprop-padding-left (gen/return "10"))
(def gen-nonprop-width (gen/return "10"))
(def gen-nonprop-max-width (gen/return "10"))
(def gen-nonprop-border-radius (gen/return "STUB_border_radius"))
(def gen-nonprop-border-image-source (gen/return "border_image_source"))
(def gen-nonprop-border-image-slice (gen/return "border_image_slice"))
(def gen-nonprop-border-image-width (gen/return "20"))
(def gen-nonprop-border-image-outset (gen/return "30"))
(def gen-nonprop-border-image-repeat (gen/return "40"))
(def gen-nonprop-flex (gen/return "STUB_flex"))
(def gen-nonprop-flex-direction (gen/return "STUB_flex_direction"))
(def gen-nonprop-flex-wrap (gen/return "STUB_flex_wrap"))
(def gen-nonprop-text-emphasis-style (gen/return "STUB_text_emphasis_style"))
(def gen-nonprop-text-emphasis-color (gen/return "STUB_text_emphasis_color"))
(def gen-nonprop-left (gen/return "STUB_left"))
(def gen-nonprop-top (gen/return "STUB_top"))
(def gen-nonprop-right (gen/return "STUB_right"))
(def gen-nonprop-bottom (gen/return "STUB_bottom"))
(def gen-nonprop-border-width (gen/return "20"))
(def gen-nonprop-border-style (gen/return "STUB_border_style"))
(def gen-nonprop-outline-radius (gen/return "STUB_outline_radius"))
(def gen-nonprop-outline-color (gen/return "STUB_outline_color"))
(def gen-nonprop-outline-style (gen/return "STUB_outline_style"))
(def gen-nonprop-outline-width (gen/return "50"))
(def gen-nonprop-x (gen/return "11"))
(def gen-nonprop-y (gen/return "11"))
(def gen-nonprop-time (gen/return "STUB_time"))
(def gen-nonprop-grid-template (gen/return "STUB_grid_template"))
(def gen-nonprop-grid-template-rows (gen/return "STUB_grid_template_rows"))
(def gen-nonprop-grid-template-columns (gen/return "STUB_grid_template_columns"))
(def gen-nonprop-grid-auto-rows (gen/return "STUB_grid_auto_rows"))
(def gen-nonprop-grid-auto-columns (gen/return "STUB_grid_auto_columns"))
(def gen-nonprop-grid-row-gap (gen/return "STUB_grid_row_gap"))
(def gen-nonprop-grid-column-gap (gen/return "STUB_grid_column_gap"))
(def gen-nonprop-column-width (gen/return "STUB_column_width"))
(def gen-nonprop-column-count (gen/return "STUB_column_count"))
(def gen-nonprop-column-rule-width (gen/return "STUB_column_rule_width"))
(def gen-nonprop-column-rule-style (gen/return "STUB_column_rule_style"))
(def gen-nonprop-column-rule-color (gen/return "STUB_column_rule_color"))
(def gen-nonprop-font-style (gen/return "STUB_font_style"))
(def gen-nonprop-font-weight (gen/return "STUB_font_weight"))
(def gen-nonprop-font-stretch (gen/return "STUB_font_stretch"))
(def gen-nonprop-font-size (gen/return "STUB_font_size"))
(def gen-nonprop-line-height (gen/return "STUB_line_height"))
(def gen-nonprop-font-family (gen/return "STUB_font_family"))
(def gen-nonprop-list-style-type (gen/return "STUB_list_style_type"))
(def gen-nonprop-list-style-position (gen/return "STUB_list_style_position"))
(def gen-nonprop-list-style-image (gen/return "STUB_list_style_image"))
(def gen-nonprop-resolution (gen/return "STUB_resolution"))
(def gen-nonprop-margin-left (gen/return "STUB_margin_left"))
(def gen-nonprop-min-width (gen/return "STUB_min_width"))
(def gen-nonprop-text-decoration-line (gen/return "STUB_text-decoration-line"))
(def gen-nonprop-text-decoration-style (gen/return "STUB_text-decoration-style"))
(def gen-nonprop-text-decoration-color (gen/return "STUB_text-decoration-color"))
(def gen-nonprop-background-color (gen/return "STUB_background-color"))
(def gen-nonprop-declaration-list (gen/return "STUB_declaration_list"))
(def gen-nonprop-declaration-value (gen/return "STUB_declaration_value"))
(def gen-nonprop-name-repeat (gen/return "STUB_name_repeat"))
(def gen-nonprop-flex-grow (gen/return "STUB_flex_grow"))
(def gen-nonprop-flex-shrink (gen/return "STUB_flex_shrink"))
(def gen-nonprop-flex-basis (gen/return "STUB_flex_basis"))
(def gen-nonprop-function-token (gen/return "STUB_flex_function_token"))
(def gen-nonprop-any-value (gen/return "STUB_any_value"))
(def gen-nonprop-offset-position (gen/return "STUB_offset_position"))
(def gen-nonprop-offset-path (gen/return "STUB_offset_path"))
(def gen-nonprop-offset-distance (gen/return "STUB_offset_distance"))
(def gen-nonprop-offset-rotate (gen/return "STUB_offset_rotate"))
(def gen-nonprop-offset-anchor (gen/return "STUB_offset_anchor"))
(def gen-nonprop-attr-name (gen/return "STUB_attr_name"))
(def gen-nonprop-attr-fallback (gen/return "STUB_attr_fallback"))
(def gen-nonprop-clip-style (gen/return "STUB_clip_style"))
(def gen-nonprop-frequency (gen/return "STUB_frequency"))
(def gen-nonprop-an-plus-b  (gen/return "STUB_an_plus_b"))

(def gen-nonprop-mask-image (gen/return "STUB_mask_image"))
(def gen-nonprop-mask-repeat (gen/return "STUB_mask_repeat"))
(def gen-nonprop-mask-attachment (gen/return "STUB_mask_attachment"))
(def gen-nonprop-mask-origin (gen/return "STUB_mask_origin"))
(def gen-nonprop-mask-clip (gen/return "STUB_mask_clip"))

(def gen-func-path (gen/return "STUB_func_path"))

;; Generated generators

(def gen-nonprop-alpha-value
  (gen/frequency [
    [100
      gen-nonprop-number]
    [100
      gen-nonprop-percentage]]))

(def gen-func-rgb
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "rgb(")
        (gen/tuple
          (gen/frequency [
            [100
              (gen/vector 
                gen-nonprop-percentage
                3)]
            [100
              (gen/vector 
                gen-nonprop-number
                3)]])
          (gen/one-of [(gen/return "")
            (gen/tuple
              (gen/return "/")
              gen-nonprop-alpha-value)])))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/frequency [
            [100
              (gen/fmap #(interpose " , " %)
                (gen/vector 
                  gen-nonprop-percentage
                  3))]
            [100
              (gen/fmap #(interpose " , " %)
                (gen/vector 
                  gen-nonprop-number
                  3))]])
          (gen/return ",")
          (gen/one-of [(gen/return "")
            gen-nonprop-alpha-value]))
        (gen/return ")"))]]))

(def gen-nonprop-deprecated-system-color
  (gen/frequency [
    [100
      (gen/return "ActiveBorder")]
    [100
      (gen/return "ActiveCaption")]
    [100
      (gen/return "AppWorkspace")]
    [100
      (gen/return "Background")]
    [100
      (gen/return "ButtonFace")]
    [100
      (gen/return "ButtonHighlight")]
    [100
      (gen/return "ButtonShadow")]
    [100
      (gen/return "ButtonText")]
    [100
      (gen/return "CaptionText")]
    [100
      (gen/return "GrayText")]
    [100
      (gen/return "Highlight")]
    [100
      (gen/return "HighlightText")]
    [100
      (gen/return "InactiveBorder")]
    [100
      (gen/return "InactiveCaption")]
    [100
      (gen/return "InactiveCaptionText")]
    [100
      (gen/return "InfoBackground")]
    [100
      (gen/return "InfoText")]
    [100
      (gen/return "Menu")]
    [100
      (gen/return "MenuText")]
    [100
      (gen/return "Scrollbar")]
    [100
      (gen/return "ThreeDDarkShadow")]
    [100
      (gen/return "ThreeDFace")]
    [100
      (gen/return "ThreeDHighlight")]
    [100
      (gen/return "ThreeDLightShadow")]
    [100
      (gen/return "ThreeDShadow")]
    [100
      (gen/return "Window")]
    [100
      (gen/return "WindowFrame")]
    [100
      (gen/return "WindowText")]]))

(def gen-nonprop-hue
  (gen/frequency [
    [100
      gen-nonprop-number]
    [100
      gen-nonprop-angle]]))

(def gen-func-hsla
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "hsla(")
        (gen/tuple
          gen-nonprop-hue
          gen-nonprop-percentage
          gen-nonprop-percentage
          (gen/one-of [(gen/return "")
            (gen/tuple
              (gen/return "/")
              gen-nonprop-alpha-value)])))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-hue
          (gen/return ",")
          gen-nonprop-percentage
          (gen/return ",")
          gen-nonprop-percentage
          (gen/return ",")
          (gen/one-of [(gen/return "")
            gen-nonprop-alpha-value]))
        (gen/return ")"))]]))

(def gen-func-hsl
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "hsl(")
        (gen/tuple
          gen-nonprop-hue
          gen-nonprop-percentage
          gen-nonprop-percentage
          (gen/one-of [(gen/return "")
            (gen/tuple
              (gen/return "/")
              gen-nonprop-alpha-value)])))]
    [100
      (gen/tuple
        (gen/tuple
          gen-nonprop-hue
          (gen/return ",")
          gen-nonprop-percentage
          (gen/return ",")
          gen-nonprop-percentage
          (gen/return ",")
          (gen/one-of [(gen/return "")
            gen-nonprop-alpha-value]))
        (gen/return ")"))]]))

(def gen-nonprop-named-color
  (gen/frequency [
    [100
      (gen/return "transparent")]
    [100
      (gen/return "aliceblue")]
    [100
      (gen/return "antiquewhite")]
    [100
      (gen/return "aqua")]
    [100
      (gen/return "aquamarine")]
    [100
      (gen/return "azure")]
    [100
      (gen/return "beige")]
    [100
      (gen/return "bisque")]
    [100
      (gen/return "black")]
    [100
      (gen/return "blanchedalmond")]
    [100
      (gen/return "blue")]
    [100
      (gen/return "blueviolet")]
    [100
      (gen/return "brown")]
    [100
      (gen/return "burlywood")]
    [100
      (gen/return "cadetblue")]
    [100
      (gen/return "chartreuse")]
    [100
      (gen/return "chocolate")]
    [100
      (gen/return "coral")]
    [100
      (gen/return "cornflowerblue")]
    [100
      (gen/return "cornsilk")]
    [100
      (gen/return "crimson")]
    [100
      (gen/return "cyan")]
    [100
      (gen/return "darkblue")]
    [100
      (gen/return "darkcyan")]
    [100
      (gen/return "darkgoldenrod")]
    [100
      (gen/return "darkgray")]
    [100
      (gen/return "darkgreen")]
    [100
      (gen/return "darkgrey")]
    [100
      (gen/return "darkkhaki")]
    [100
      (gen/return "darkmagenta")]
    [100
      (gen/return "darkolivegreen")]
    [100
      (gen/return "darkorange")]
    [100
      (gen/return "darkorchid")]
    [100
      (gen/return "darkred")]
    [100
      (gen/return "darksalmon")]
    [100
      (gen/return "darkseagreen")]
    [100
      (gen/return "darkslateblue")]
    [100
      (gen/return "darkslategray")]
    [100
      (gen/return "darkslategrey")]
    [100
      (gen/return "darkturquoise")]
    [100
      (gen/return "darkviolet")]
    [100
      (gen/return "deeppink")]
    [100
      (gen/return "deepskyblue")]
    [100
      (gen/return "dimgray")]
    [100
      (gen/return "dimgrey")]
    [100
      (gen/return "dodgerblue")]
    [100
      (gen/return "firebrick")]
    [100
      (gen/return "floralwhite")]
    [100
      (gen/return "forestgreen")]
    [100
      (gen/return "fuchsia")]
    [100
      (gen/return "gainsboro")]
    [100
      (gen/return "ghostwhite")]
    [100
      (gen/return "gold")]
    [100
      (gen/return "goldenrod")]
    [100
      (gen/return "gray")]
    [100
      (gen/return "green")]
    [100
      (gen/return "greenyellow")]
    [100
      (gen/return "grey")]
    [100
      (gen/return "honeydew")]
    [100
      (gen/return "hotpink")]
    [100
      (gen/return "indianred")]
    [100
      (gen/return "indigo")]
    [100
      (gen/return "ivory")]
    [100
      (gen/return "khaki")]
    [100
      (gen/return "lavender")]
    [100
      (gen/return "lavenderblush")]
    [100
      (gen/return "lawngreen")]
    [100
      (gen/return "lemonchiffon")]
    [100
      (gen/return "lightblue")]
    [100
      (gen/return "lightcoral")]
    [100
      (gen/return "lightcyan")]
    [100
      (gen/return "lightgoldenrodyellow")]
    [100
      (gen/return "lightgray")]
    [100
      (gen/return "lightgreen")]
    [100
      (gen/return "lightgrey")]
    [100
      (gen/return "lightpink")]
    [100
      (gen/return "lightsalmon")]
    [100
      (gen/return "lightseagreen")]
    [100
      (gen/return "lightskyblue")]
    [100
      (gen/return "lightslategray")]
    [100
      (gen/return "lightslategrey")]
    [100
      (gen/return "lightsteelblue")]
    [100
      (gen/return "lightyellow")]
    [100
      (gen/return "lime")]
    [100
      (gen/return "limegreen")]
    [100
      (gen/return "linen")]
    [100
      (gen/return "magenta")]
    [100
      (gen/return "maroon")]
    [100
      (gen/return "mediumaquamarine")]
    [100
      (gen/return "mediumblue")]
    [100
      (gen/return "mediumorchid")]
    [100
      (gen/return "mediumpurple")]
    [100
      (gen/return "mediumseagreen")]
    [100
      (gen/return "mediumslateblue")]
    [100
      (gen/return "mediumspringgreen")]
    [100
      (gen/return "mediumturquoise")]
    [100
      (gen/return "mediumvioletred")]
    [100
      (gen/return "midnightblue")]
    [100
      (gen/return "mintcream")]
    [100
      (gen/return "mistyrose")]
    [100
      (gen/return "moccasin")]
    [100
      (gen/return "navajowhite")]
    [100
      (gen/return "navy")]
    [100
      (gen/return "oldlace")]
    [100
      (gen/return "olive")]
    [100
      (gen/return "olivedrab")]
    [100
      (gen/return "orange")]
    [100
      (gen/return "orangered")]
    [100
      (gen/return "orchid")]
    [100
      (gen/return "palegoldenrod")]
    [100
      (gen/return "palegreen")]
    [100
      (gen/return "paleturquoise")]
    [100
      (gen/return "palevioletred")]
    [100
      (gen/return "papayawhip")]
    [100
      (gen/return "peachpuff")]
    [100
      (gen/return "peru")]
    [100
      (gen/return "pink")]
    [100
      (gen/return "plum")]
    [100
      (gen/return "powderblue")]
    [100
      (gen/return "purple")]
    [100
      (gen/return "rebeccapurple")]
    [100
      (gen/return "red")]
    [100
      (gen/return "rosybrown")]
    [100
      (gen/return "royalblue")]
    [100
      (gen/return "saddlebrown")]
    [100
      (gen/return "salmon")]
    [100
      (gen/return "sandybrown")]
    [100
      (gen/return "seagreen")]
    [100
      (gen/return "seashell")]
    [100
      (gen/return "sienna")]
    [100
      (gen/return "silver")]
    [100
      (gen/return "skyblue")]
    [100
      (gen/return "slateblue")]
    [100
      (gen/return "slategray")]
    [100
      (gen/return "slategrey")]
    [100
      (gen/return "snow")]
    [100
      (gen/return "springgreen")]
    [100
      (gen/return "steelblue")]
    [100
      (gen/return "tan")]
    [100
      (gen/return "teal")]
    [100
      (gen/return "thistle")]
    [100
      (gen/return "tomato")]
    [100
      (gen/return "turquoise")]
    [100
      (gen/return "violet")]
    [100
      (gen/return "wheat")]
    [100
      (gen/return "white")]
    [100
      (gen/return "whitesmoke")]
    [100
      (gen/return "yellow")]
    [100
      (gen/return "yellowgreen")]]))

(def gen-func-rgba
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "rgba(")
        (gen/tuple
          (gen/frequency [
            [100
              (gen/vector 
                gen-nonprop-percentage
                3)]
            [100
              (gen/vector 
                gen-nonprop-number
                3)]])
          (gen/one-of [(gen/return "")
            (gen/tuple
              (gen/return "/")
              gen-nonprop-alpha-value)])))]
    [100
      (gen/tuple
        (gen/tuple
          (gen/frequency [
            [100
              (gen/fmap #(interpose " , " %)
                (gen/vector 
                  gen-nonprop-percentage
                  3))]
            [100
              (gen/fmap #(interpose " , " %)
                (gen/vector 
                  gen-nonprop-number
                  3))]])
          (gen/return ",")
          (gen/one-of [(gen/return "")
            gen-nonprop-alpha-value]))
        (gen/return ")"))]]))

(def gen-nonprop-color
  (gen/frequency [
    [100
      gen-func-rgb]
    [100
      gen-func-rgba]
    [100
      gen-func-hsl]
    [100
      gen-func-hsla]
    [100
      gen-nonprop-hex-color]
    [100
      gen-nonprop-named-color]
    [100
      (gen/return "currentcolor")]
    [100
      gen-nonprop-deprecated-system-color]]))

(def gen-func-element
  (gen/tuple
    (gen/return "element(")
    gen-nonprop-id-selector
    (gen/return ")")))

(def gen-nonprop-image
  (gen/frequency [
    [100
      gen-nonprop-url]
    [100
      gen-func-element]]))

(def gen-nonprop-cf-final-image
  (gen/frequency [
    [100
      gen-nonprop-image]
    [100
      gen-nonprop-color]]))

(def gen-prop-text-rendering
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "optimizeSpeed")]
    [100
      (gen/return "optimizeLegibility")]
    [100
      (gen/return "geometricPrecision")]]))

(def gen-prop-transform-box
  (gen/frequency [
    [100
      (gen/return "border-box")]
    [100
      (gen/return "fill-box")]
    [100
      (gen/return "view-box")]]))

(def gen-nonprop-feature-value-declaration
  (gen/tuple
    gen-nonprop-custom-ident
    (gen/return ":")
    (gen/such-that not-empty (gen/vector
      gen-nonprop-integer))
    (gen/return ";")))

(def gen-nonprop-feature-value-declaration-list
  gen-nonprop-feature-value-declaration)

(def gen-nonprop-feature-type
  (gen/frequency [
    [100
      (gen/return "@stylistic")]
    [100
      (gen/return "@historical-forms")]
    [100
      (gen/return "@styleset")]
    [100
      (gen/return "@character-variant")]
    [100
      (gen/return "@swash")]
    [100
      (gen/return "@ornaments")]
    [100
      (gen/return "@annotation")]]))

(def gen-nonprop-feature-value-block
  (gen/tuple
    gen-nonprop-feature-type
    (gen/tuple
      (gen/return "{")
      gen-nonprop-feature-value-declaration-list
      (gen/return "}"))))

(def gen-nonprop-pseudo-page
  (gen/tuple
    (gen/return ":")
    (gen/frequency [
      [100
        (gen/return "left")]
      [100
        (gen/return "right")]
      [100
        (gen/return "first")]
      [100
        (gen/return "blank")]])))

(def gen-nonprop-page-selector
  (gen/frequency [
    [100
      (gen/such-that not-empty (gen/vector
        gen-nonprop-pseudo-page))]
    [100
      (gen/tuple
        gen-nonprop-ident
        (gen/vector
          gen-nonprop-pseudo-page))]]))

(def gen-nonprop-length-percentage
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-func-inset
  (gen/tuple
    (gen/return "inset(")
    (gen/vector 
      gen-nonprop-length-percentage
      1 4)
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "round")
        gen-nonprop-border-radius)])
    (gen/return ")")))

(def gen-nonprop-fill-rule
  (gen/frequency [
    [100
      (gen/return "nonzero")]
    [100
      (gen/return "evenodd")]]))

(def gen-func-polygon
  (gen/tuple
    (gen/return "polygon(")
    (gen/one-of [(gen/return "")
      gen-nonprop-fill-rule])
    (gen/return ",")
    (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
      (gen/tuple
        gen-nonprop-length-percentage
        gen-nonprop-length-percentage))))
    (gen/return ")")))

(def gen-nonprop-clip-source
  gen-nonprop-url)

(def gen-nonprop-box
  (gen/frequency [
    [100
      (gen/return "border-box")]
    [100
      (gen/return "padding-box")]
    [100
      (gen/return "content-box")]]))

(def gen-nonprop-shape-box
  (gen/frequency [
    [100
      gen-nonprop-box]
    [100
      (gen/return "margin-box")]]))

(def gen-nonprop-position
  (gen/frequency [
    [100
      (gen/frequency [
        [100
          (gen/return "left")]
        [100
          (gen/return "center")]
        [100
          (gen/return "right")]
        [100
          (gen/return "top")]
        [100
          (gen/return "bottom")]
        [100
          gen-nonprop-length-percentage]])]
    [100
      (gen/tuple
        (gen/frequency [
          [100
            (gen/return "left")]
          [100
            (gen/return "center")]
          [100
            (gen/return "right")]
          [100
            gen-nonprop-length-percentage]])
        (gen/frequency [
          [100
            (gen/return "top")]
          [100
            (gen/return "center")]
          [100
            (gen/return "bottom")]
          [100
            gen-nonprop-length-percentage]]))]
    [100
      (gen/let [lst (gen/tuple 
                      (gen/frequency [
                        [100
                          (gen/return "center")]
                        [100
                          (gen/tuple
                            (gen/frequency [
                              [100
                                (gen/return "left")]
                              [100
                                (gen/return "right")]])
                            (gen/one-of [(gen/return "")
                              gen-nonprop-length-percentage]))]])
                      (gen/frequency [
                        [100
                          (gen/return "center")]
                        [100
                          (gen/tuple
                            (gen/frequency [
                              [100
                                (gen/return "top")]
                              [100
                                (gen/return "bottom")]])
                            (gen/one-of [(gen/return "")
                              gen-nonprop-length-percentage]))]]))]
        (shuffle lst))]]))

(def gen-nonprop-shape-radius
  (gen/frequency [
    [100
      gen-nonprop-length-percentage]
    [100
      (gen/return "closest-side")]
    [100
      (gen/return "farthest-side")]]))

(def gen-func-ellipse
  (gen/tuple
    (gen/return "ellipse(")
    (gen/one-of [(gen/return "")
      (gen/vector 
        gen-nonprop-shape-radius
        2)])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "at")
        gen-nonprop-position)])
    (gen/return ")")))

(def gen-func-circle
  (gen/tuple
    (gen/return "circle(")
    (gen/one-of [(gen/return "")
      gen-nonprop-shape-radius])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "at")
        gen-nonprop-position)])
    (gen/return ")")))

(def gen-nonprop-geometry-box
  (gen/frequency [
    [100
      gen-nonprop-shape-box]
    [100
      (gen/return "fill-box")]
    [100
      (gen/return "stroke-box")]
    [100
      (gen/return "view-box")]]))

(def gen-nonprop-basic-shape
  (gen/frequency [
    [100
      gen-func-inset]
    [100
      gen-func-circle]
    [100
      gen-func-ellipse]
    [100
      gen-func-polygon]]))

(def gen-prop-clip-path
  (gen/frequency [
    [100
      gen-nonprop-clip-source]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-basic-shape
                      gen-nonprop-geometry-box)]
        (take cnt (shuffle lst)))]
    [100
      (gen/return "none")]]))

(def gen-prop-image-resolution
  (gen/let [lst (gen/tuple 
                  (gen/let [cnt (gen/choose 1 2)
                            lst (gen/tuple 
                                  (gen/return "from-image")
                                  gen-nonprop-resolution)]
                    (take cnt (shuffle lst)))
                  (gen/one-of [(gen/return "")
                    (gen/return "snap")]))]
    (shuffle lst)))

(def gen-prop-text-overflow
  (gen/vector 
    (gen/frequency [
      [100
        (gen/return "clip")]
      [100
        (gen/return "ellipsis")]
      [100
        gen-nonprop-string]])
    1 2))

(def gen-prop--moz-outline-radius-bottomright
  gen-nonprop-outline-radius)

(def gen-prop-border-top-left-radius
  (gen/vector 
    gen-nonprop-length-percentage
    1 2))

(def gen-prop-visibility
  (gen/frequency [
    [100
      (gen/return "visible")]
    [100
      (gen/return "hidden")]
    [100
      (gen/return "collapse")]]))

(def gen-nonprop-numeric-spacing-values
  (gen/frequency [
    [100
      (gen/return "proportional-nums")]
    [100
      (gen/return "tabular-nums")]]))

(def gen-prop-user-select
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "text")]
    [100
      (gen/return "none")]
    [100
      (gen/return "contain")]
    [100
      (gen/return "all")]]))

(def gen-prop-min-width
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "fill-available")]]))

(def gen-nonprop-masking-mode
  (gen/frequency [
    [100
      (gen/return "alpha")]
    [100
      (gen/return "luminance")]
    [100
      (gen/return "match-source")]]))

(def gen-prop-mask-mode
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-masking-mode))))

(def gen-prop--moz-outline-radius-bottomleft
  gen-nonprop-outline-radius)

(def gen-nonprop-display-legacy
  (gen/frequency [
    [100
      (gen/return "inline-block")]
    [100
      (gen/return "inline-list-item")]
    [100
      (gen/return "inline-table")]
    [100
      (gen/return "inline-flex")]
    [100
      (gen/return "inline-grid")]]))

(def gen-nonprop-br-width
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      (gen/return "thin")]
    [100
      (gen/return "medium")]
    [100
      (gen/return "thick")]]))

(def gen-nonprop-br-style
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "hidden")]
    [100
      (gen/return "dotted")]
    [100
      (gen/return "dashed")]
    [100
      (gen/return "solid")]
    [100
      (gen/return "double")]
    [100
      (gen/return "groove")]
    [100
      (gen/return "ridge")]
    [100
      (gen/return "inset")]
    [100
      (gen/return "outset")]]))

(def gen-prop-border-top
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-br-width
                  gen-nonprop-br-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-nonprop-repeat-style
  (gen/frequency [
    [100
      (gen/return "repeat-x")]
    [100
      (gen/return "repeat-y")]
    [100
      (gen/vector 
        (gen/frequency [
          [100
            (gen/return "repeat")]
          [100
            (gen/return "space")]
          [100
            (gen/return "round")]
          [100
            (gen/return "no-repeat")]])
        1 2)]]))

(def gen-prop--webkit-mask-repeat
  (gen/tuple
    gen-nonprop-repeat-style
    (gen/vector
      (gen/tuple
        (gen/return ",")
        gen-nonprop-repeat-style))))

(def gen-nonprop-keyframes-name
  (gen/frequency [
    [100
      gen-nonprop-custom-ident]
    [100
      gen-nonprop-string]]))

(def gen-func-skewX
  (gen/tuple
    (gen/return "skewX(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-prop-box-decoration-break
  (gen/frequency [
    [100
      (gen/return "slice")]
    [100
      (gen/return "clone")]]))

(def gen-prop-padding-inline-start
  gen-nonprop-padding-left)

(def gen-prop-caret-color
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-color]]))

(def gen-prop-border-left
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-br-width
                  gen-nonprop-br-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-nonprop-historical-lig-values
  (gen/frequency [
    [100
      (gen/return "historical-ligatures")]
    [100
      (gen/return "no-historical-ligatures")]]))

(def gen-nonprop-contextual-alt-values
  (gen/frequency [
    [100
      (gen/return "contextual")]
    [100
      (gen/return "no-contextual")]]))

(def gen-nonprop-discretionary-lig-values
  (gen/frequency [
    [100
      (gen/return "discretionary-ligatures")]
    [100
      (gen/return "no-discretionary-ligatures")]]))

(def gen-nonprop-common-lig-values
  (gen/frequency [
    [100
      (gen/return "common-ligatures")]
    [100
      (gen/return "no-common-ligatures")]]))

(def gen-prop-font-variant-ligatures
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 4)
                lst (gen/tuple 
                      gen-nonprop-common-lig-values
                      gen-nonprop-discretionary-lig-values
                      gen-nonprop-historical-lig-values
                      gen-nonprop-contextual-alt-values)]
        (take cnt (shuffle lst)))]]))

(def gen-prop-tab-size
  (gen/frequency [
    [100
      gen-nonprop-integer]
    [100
      gen-nonprop-length]]))

(def gen-nonprop-attachment
  (gen/frequency [
    [100
      (gen/return "scroll")]
    [100
      (gen/return "fixed")]
    [100
      (gen/return "local")]]))

(def gen-prop-background-attachment
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-attachment))))

(def gen-prop-transform-origin
  (gen/frequency [
    [100
      (gen/frequency [
        [100
          gen-nonprop-length-percentage]
        [100
          (gen/return "left")]
        [100
          (gen/return "center")]
        [100
          (gen/return "right")]
        [100
          (gen/return "top")]
        [100
          (gen/return "bottom")]])]
    [100
      (gen/tuple
        (gen/let [lst (gen/tuple 
                        (gen/frequency [
                          [100
                            gen-nonprop-length-percentage]
                          [100
                            (gen/return "left")]
                          [100
                            (gen/return "center")]
                          [100
                            (gen/return "right")]])
                        (gen/frequency [
                          [100
                            gen-nonprop-length-percentage]
                          [100
                            (gen/return "top")]
                          [100
                            (gen/return "center")]
                          [100
                            (gen/return "bottom")]]))]
          (shuffle lst))
        (gen/one-of [(gen/return "")
          gen-nonprop-length]))]]))

(def gen-nonprop-font-variant-css21
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "small-caps")]]))

(def gen-prop--moz-border-top-colors
  (gen/frequency [
    [100
      (gen/tuple
        (gen/vector
          gen-nonprop-color)
        gen-nonprop-color)]
    [100
      (gen/return "none")]]))

(def gen-prop-border-right
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-br-width
                  gen-nonprop-br-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-background-position-x
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/return "center")]
      [100
        (gen/tuple
          (gen/one-of [(gen/return "")
            (gen/frequency [
              [100
                (gen/return "left")]
              [100
                (gen/return "right")]
              [100
                (gen/return "x-start")]
              [100
                (gen/return "x-end")]])])
          (gen/one-of [(gen/return "")
            gen-nonprop-length-percentage]))]])))))

(def gen-prop-max-inline-size
  gen-nonprop-max-width)

(def gen-nonprop-inflexible-breadth
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "auto")]]))

(def gen-nonprop-generic-name
  (gen/frequency [
    [100
      (gen/return "serif")]
    [100
      (gen/return "sans-serif")]
    [100
      (gen/return "cursive")]
    [100
      (gen/return "fantasy")]
    [100
      (gen/return "monospace")]]))

(def gen-prop-border-image
  (gen/tuple
    (gen/let [cnt (gen/choose 1 2)
              lst (gen/tuple 
                    gen-nonprop-border-image-source
                    gen-nonprop-border-image-slice)]
      (take cnt (shuffle lst)))
    (gen/let [cnt (gen/choose 1 2)
              lst (gen/tuple 
                    (gen/one-of [(gen/return "")
                      (gen/frequency [
                        [100
                          (gen/tuple
                            (gen/return "/")
                            gen-nonprop-border-image-width)]
                        [100
                          (gen/tuple
                            (gen/return "/")
                            (gen/one-of [(gen/return "")
                              gen-nonprop-border-image-width])
                            (gen/return "/")
                            gen-nonprop-border-image-outset)]])])
                    gen-nonprop-border-image-repeat)]
      (take cnt (shuffle lst)))))

(def gen-nonprop-display-box
  (gen/frequency [
    [100
      (gen/return "contents")]
    [100
      (gen/return "none")]]))

(def gen-nonprop-single-animation-fill-mode
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "forwards")]
    [100
      (gen/return "backwards")]
    [100
      (gen/return "both")]]))

(def gen-prop-animation-fill-mode
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-animation-fill-mode))))

(def gen-prop-font-weight
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "bold")]
    [100
      (gen/return "bolder")]
    [100
      (gen/return "lighter")]
    [100
      (gen/return "100")]
    [100
      (gen/return "200")]
    [100
      (gen/return "300")]
    [100
      (gen/return "400")]
    [100
      (gen/return "500")]
    [100
      (gen/return "600")]
    [100
      (gen/return "700")]
    [100
      (gen/return "800")]
    [100
      (gen/return "900")]]))

(def gen-nonprop-side-or-corner
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  (gen/frequency [
                    [100
                      (gen/return "left")]
                    [100
                      (gen/return "right")]])
                  (gen/frequency [
                    [100
                      (gen/return "top")]
                    [100
                      (gen/return "bottom")]]))]
    (take cnt (shuffle lst))))

(def gen-prop-background-repeat
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-repeat-style))))

(def gen-prop-flex-grow
  gen-nonprop-number)

(def gen-prop-text-decoration-skip
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 5)
                lst (gen/tuple 
                      (gen/return "objects")
                      (gen/return "spaces")
                      (gen/return "ink")
                      (gen/return "edges")
                      (gen/return "box-decoration"))]
        (take cnt (shuffle lst)))]]))

(def gen-prop-mask-position
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-position))))

(def gen-prop-overflow-clip-box
  (gen/frequency [
    [100
      (gen/return "padding-box")]
    [100
      (gen/return "content-box")]]))

(def gen-prop-text-align
  (gen/frequency [
    [100
      (gen/return "start")]
    [100
      (gen/return "end")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "center")]
    [100
      (gen/return "justify")]
    [100
      (gen/return "match-parent")]]))

(def gen-nonprop-fixed-breadth
  gen-nonprop-length-percentage)

(def gen-nonprop-track-breadth
  (gen/frequency [
    [100
      gen-nonprop-length-percentage]
    [100
      gen-nonprop-flex]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "auto")]]))

(def gen-nonprop-fixed-size
  (gen/frequency [
    [100
      gen-nonprop-fixed-breadth]
    [100
      (gen/tuple
        (gen/return "minmax(")
        gen-nonprop-fixed-breadth
        (gen/return ",")
        gen-nonprop-track-breadth
        (gen/return ")"))]
    [100
      (gen/tuple
        (gen/return "minmax(")
        gen-nonprop-inflexible-breadth
        (gen/return ",")
        gen-nonprop-fixed-breadth
        (gen/return ")"))]]))

(def gen-nonprop-line-names
  (gen/tuple
    (gen/return "[")
    (gen/vector
      gen-nonprop-custom-ident)
    (gen/return "]")))

(def gen-nonprop-fixed-repeat
  (gen/tuple
    (gen/return "repeat(")
    gen-nonprop-positive-integer
    (gen/return ",")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        gen-nonprop-fixed-size)))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])
    (gen/return ")")))

(def gen-nonprop-auto-repeat
  (gen/tuple
    (gen/return "repeat(")
    (gen/frequency [
      [100
        (gen/return "auto-fill")]
      [100
        (gen/return "auto-fit")]])
    (gen/return ",")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        gen-nonprop-fixed-size)))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])
    (gen/return ")")))

(def gen-nonprop-auto-track-list
  (gen/tuple
    (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        (gen/frequency [
          [100
            gen-nonprop-fixed-size]
          [100
            gen-nonprop-fixed-repeat]])))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])
    gen-nonprop-auto-repeat
    (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        (gen/frequency [
          [100
            gen-nonprop-fixed-size]
          [100
            gen-nonprop-fixed-repeat]])))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])))

(def gen-prop-direction
  (gen/frequency [
    [100
      (gen/return "ltr")]
    [100
      (gen/return "rtl")]]))

(def gen-prop-text-emphasis
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  gen-nonprop-text-emphasis-style
                  gen-nonprop-text-emphasis-color)]
    (take cnt (shuffle lst))))

(def gen-prop-white-space
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "pre")]
    [100
      (gen/return "nowrap")]
    [100
      (gen/return "pre-wrap")]
    [100
      (gen/return "pre-line")]]))

(def gen-nonprop-mask-position
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/return "left")]
      [100
        (gen/return "center")]
      [100
        (gen/return "right")]])
    (gen/one-of [(gen/return "")
      (gen/frequency [
        [100
          gen-nonprop-length-percentage]
        [100
          (gen/return "top")]
        [100
          (gen/return "center")]
        [100
          (gen/return "bottom")]])])))

(def gen-prop--webkit-mask-position
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-mask-position))))

(def gen-prop-appearance
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "none")]]))

(def gen-prop-margin-bottom
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-prop--moz-outline-radius-topleft
  gen-nonprop-outline-radius)

(def gen-prop-page-break-before
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "always")]
    [100
      (gen/return "avoid")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]]))

(def gen-prop-text-orientation
  (gen/frequency [
    [100
      (gen/return "mixed")]
    [100
      (gen/return "upright")]
    [100
      (gen/return "sideways")]]))

(def gen-nonprop-single-animation-play-state
  (gen/frequency [
    [100
      (gen/return "running")]
    [100
      (gen/return "paused")]]))

(def gen-prop-animation-play-state
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-animation-play-state))))

(def gen-nonprop-size
  (gen/frequency [
    [100
      (gen/return "closest-side")]
    [100
      (gen/return "farthest-side")]
    [100
      (gen/return "closest-corner")]
    [100
      (gen/return "farthest-corner")]
    [100
      gen-nonprop-length]
    [100
      (gen/vector 
        gen-nonprop-length-percentage
        2)]]))

(def gen-prop-offset-path
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        (gen/return "ray(")
        (gen/let [lst (gen/tuple 
                        gen-nonprop-angle
                        (gen/one-of [(gen/return "")
                          gen-nonprop-size])
                        (gen/one-of [(gen/return "")
                          (gen/return "contain")]))]
          (shuffle lst))
        (gen/return ")"))]
    [100
      gen-func-path]
    [100
      gen-nonprop-url]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-basic-shape
                      gen-nonprop-geometry-box)]
        (take cnt (shuffle lst)))]]))

(def gen-prop-column-count
  (gen/frequency [
    [100
      gen-nonprop-number]
    [100
      (gen/return "auto")]]))

(def gen-prop-column-rule-style
  gen-nonprop-br-style)

(def gen-prop-scroll-snap-coordinate
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-position)))]]))

(def gen-prop-text-combine-upright
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "all")]
    [100
      (gen/tuple
        (gen/return "digits")
        (gen/one-of [(gen/return "")
          gen-nonprop-integer]))]]))

(def gen-func-scaleZ
  (gen/tuple
    (gen/return "scaleZ(")
    gen-nonprop-number
    (gen/return ")")))

(def gen-nonprop-number-percentage
  (gen/frequency [
    [100
      gen-nonprop-number]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-outline-style
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-br-style]]))

(def gen-nonprop-grid-line
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-custom-ident]
    [100
      (gen/let [lst (gen/tuple 
                      gen-nonprop-integer
                      (gen/one-of [(gen/return "")
                        gen-nonprop-custom-ident]))]
        (shuffle lst))]
    [100
      (gen/let [lst (gen/tuple 
                      (gen/return "span")
                      (gen/let [cnt (gen/choose 1 2)
                                lst (gen/tuple 
                                      gen-nonprop-integer
                                      gen-nonprop-custom-ident)]
                        (take cnt (shuffle lst))))]
        (shuffle lst))]]))

(def gen-prop-grid-column
  (gen/tuple
    gen-nonprop-grid-line
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        gen-nonprop-grid-line)])))

(def gen-prop-pointer-events
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "none")]
    [100
      (gen/return "visiblePainted")]
    [100
      (gen/return "visibleFill")]
    [100
      (gen/return "visibleStroke")]
    [100
      (gen/return "visible")]
    [100
      (gen/return "painted")]
    [100
      (gen/return "fill")]
    [100
      (gen/return "stroke")]
    [100
      (gen/return "all")]
    [100
      (gen/return "inherit")]]))

(def gen-prop-column-fill
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "balance")]]))

(def gen-prop-mask-origin
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-geometry-box))))

(def gen-nonprop-quote
  (gen/frequency [
    [100
      (gen/return "open-quote")]
    [100
      (gen/return "close-quote")]
    [100
      (gen/return "no-open-quote")]
    [100
      (gen/return "no-close-quote")]]))

(def gen-nonprop-counter-style-name
  gen-nonprop-custom-ident)

(def gen-nonprop-counter-style
  (gen/frequency [
    [100
      gen-nonprop-counter-style-name]
    [100
      (gen/return "symbols()")]]))

(def gen-func-target-counters
  (gen/tuple
    (gen/return "target-counters(")
    (gen/frequency [
      [100
        gen-nonprop-string]
      [100
        gen-nonprop-url]])
    (gen/return ",")
    gen-nonprop-custom-ident
    (gen/return ",")
    gen-nonprop-string
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-counter-style)])
    (gen/return ")")))

(def gen-func-target-text
  (gen/tuple
    (gen/return "target-text(")
    (gen/frequency [
      [100
        gen-nonprop-string]
      [100
        gen-nonprop-url]])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        (gen/frequency [
          [100
            (gen/return "content")]
          [100
            (gen/return "before")]
          [100
            (gen/return "after")]
          [100
            (gen/return "first-letter")]]))])
    (gen/return ")")))

(def gen-func-target-counter
  (gen/tuple
    (gen/return "target-counter(")
    (gen/frequency [
      [100
        gen-nonprop-string]
      [100
        gen-nonprop-url]])
    (gen/return ",")
    gen-nonprop-custom-ident
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-counter-style)])
    (gen/return ")")))

(def gen-nonprop-target
  (gen/frequency [
    [100
      gen-func-target-counter]
    [100
      gen-func-target-counters]
    [100
      gen-func-target-text]]))

(def gen-func-leader
  (gen/frequency [
    [100
      (gen/tuple
        (gen/return "leader(")
        (gen/return "dotted"))]
    [100
      (gen/return "solid")]
    [100
      (gen/return "space")]
    [100
      (gen/tuple
        gen-nonprop-string
        (gen/return ")"))]]))

(def gen-nonprop-content-list
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-string]
      [100
        (gen/return "contents")]
      [100
        gen-nonprop-url]
      [100
        gen-nonprop-quote]
      [100
        gen-nonprop-target]
      [100
        gen-func-leader]]))))

(def gen-prop-content
  (gen/tuple
    (gen/vector
      (gen/tuple
        gen-nonprop-image
        (gen/return ",")))
    (gen/frequency [
      [100
        (gen/return "normal")]
      [100
        (gen/return "none")]
      [100
        gen-nonprop-content-list]])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        gen-nonprop-string)])))

(def gen-prop-column-width
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      (gen/return "auto")]]))

(def gen-prop-offset-inline-start
  gen-nonprop-left)

(def gen-prop--webkit-border-before
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-border-width
                  gen-nonprop-border-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-border
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-br-width
                  gen-nonprop-br-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-max-width
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "none")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "fill-available")]]))

(def gen-prop-border-inline-end
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-border-width
                  gen-nonprop-border-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-outline
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-outline-color
                  gen-nonprop-outline-style
                  gen-nonprop-outline-width)]
    (take cnt (shuffle lst))))

(def gen-prop-margin-right
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-nonprop-feature-value-name
  gen-nonprop-custom-ident)

(def gen-prop-font-variant-alternates
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/tuple
        (gen/return "stylistic(")
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 3)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "historical-forms")
                        (gen/return "styleset("))]
          (take cnt (shuffle lst)))
        (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
          gen-nonprop-feature-value-name)))
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "character-variant("))]
          (take cnt (shuffle lst)))
        (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
          gen-nonprop-feature-value-name)))
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "swash("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "ornaments("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "annotation("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/return ")"))]]))

(def gen-prop-margin
  (gen/vector 
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-percentage]
      [100
        (gen/return "auto")]])
    1 4))

(def gen-prop-page-break-after
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "always")]
    [100
      (gen/return "avoid")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]]))

(def gen-prop-break-before
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "avoid")]
    [100
      (gen/return "avoid-page")]
    [100
      (gen/return "page")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "recto")]
    [100
      (gen/return "verso")]
    [100
      (gen/return "avoid-column")]
    [100
      (gen/return "column")]
    [100
      (gen/return "avoid-region")]
    [100
      (gen/return "region")]]))

(def gen-nonprop-mf-name
  gen-nonprop-ident)

(def gen-nonprop-mf-value
  (gen/frequency [
    [100
      gen-nonprop-number]
    [100
      gen-nonprop-dimension]
    [100
      gen-nonprop-ident]
    [100
      gen-nonprop-ratio]]))

(def gen-nonprop-mf-range
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-mf-name
        (gen/one-of [(gen/return "")
          (gen/frequency [
            [100
              (gen/return "<")]
            [100
              (gen/return ">")]])])
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-value)]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/one-of [(gen/return "")
          (gen/frequency [
            [100
              (gen/return "<")]
            [100
              (gen/return ">")]])])
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-name)]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/return "<")
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-name
        (gen/return "<")
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-value)]
    [100
      (gen/tuple
        gen-nonprop-mf-value
        (gen/return ">")
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-name
        (gen/return ">")
        (gen/one-of [(gen/return "")
          (gen/return "=")])
        gen-nonprop-mf-value)]]))

(def gen-prop-list-style-position
  (gen/frequency [
    [100
      (gen/return "inside")]
    [100
      (gen/return "outside")]]))

(def gen-nonprop-keyframe-selector
  (gen/frequency [
    [100
      (gen/return "from")]
    [100
      (gen/return "to")]
    [100
      gen-nonprop-percentage]]))

(def gen-nonprop-keyframe-block
  (gen/tuple
    (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
      gen-nonprop-keyframe-selector)))
    (gen/tuple
      (gen/return "{")
      gen-nonprop-declaration-list
      (gen/return "}"))))

(def gen-nonprop-keyframe-block-list
  (gen/such-that not-empty (gen/vector
    gen-nonprop-keyframe-block)))

(def gen-nonprop-mask-source
  gen-nonprop-url)

(def gen-nonprop-mask-reference
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-image]
    [100
      gen-nonprop-mask-source]]))

(def gen-prop-mask-image
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-mask-reference))))

(def gen-prop-border-bottom-left-radius
  (gen/vector 
    gen-nonprop-length-percentage
    1 2))

(def gen-prop-object-fit
  (gen/frequency [
    [100
      (gen/return "fill")]
    [100
      (gen/return "contain")]
    [100
      (gen/return "cover")]
    [100
      (gen/return "none")]
    [100
      (gen/return "scale-down")]]))

(def gen-prop-grid-column-start
  gen-nonprop-grid-line)

(def gen-func-saturate
  (gen/tuple
    (gen/return "saturate(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-nonprop-track-size
  (gen/frequency [
    [100
      gen-nonprop-track-breadth]
    [100
      (gen/tuple
        (gen/return "minmax(")
        gen-nonprop-inflexible-breadth
        (gen/return ",")
        gen-nonprop-track-breadth
        (gen/return ")"))]
    [100
      (gen/tuple
        (gen/return "fit-content(")
        (gen/frequency [
          [100
            gen-nonprop-length]
          [100
            gen-nonprop-percentage]])
        (gen/return ")"))]]))

(def gen-nonprop-track-repeat
  (gen/tuple
    (gen/return "repeat(")
    gen-nonprop-positive-integer
    (gen/return ",")
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        gen-nonprop-track-size)))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])
    (gen/return ")")))

(def gen-nonprop-track-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        (gen/frequency [
          [100
            gen-nonprop-track-size]
          [100
            gen-nonprop-track-repeat]]))))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])))

(def gen-prop-grid-template-columns
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-track-list]
    [100
      gen-nonprop-auto-track-list]]))

(def gen-prop-ruby-merge
  (gen/frequency [
    [100
      (gen/return "separate")]
    [100
      (gen/return "collapse")]
    [100
      (gen/return "auto")]]))

(def gen-prop--webkit-mask-repeat-x
  (gen/frequency [
    [100
      (gen/return "repeat")]
    [100
      (gen/return "no-repeat")]
    [100
      (gen/return "space")]
    [100
      (gen/return "round")]]))

(def gen-prop-height
  (gen/frequency [
    [100
      (gen/let [lst (gen/tuple 
                      (gen/frequency [
                        [100
                          gen-nonprop-length]
                        [100
                          gen-nonprop-percentage]])
                      (gen/one-of [(gen/return "")
                        (gen/frequency [
                          [100
                            (gen/return "border-box")]
                          [100
                            (gen/return "content-box")]])]))]
        (shuffle lst))]
    [100
      (gen/return "available")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "auto")]]))

(def gen-prop--webkit-text-stroke-color
  gen-nonprop-color)

(def gen-prop-border-inline-start-color
  gen-nonprop-color)

(def gen-prop-max-block-size
  gen-nonprop-max-width)

(def gen-prop-grid-column-gap
  gen-nonprop-length-percentage)

(def gen-prop-flex-wrap
  (gen/frequency [
    [100
      (gen/return "nowrap")]
    [100
      (gen/return "wrap")]
    [100
      (gen/return "wrap-reverse")]]))

(def gen-prop-font-kerning
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "normal")]
    [100
      (gen/return "none")]]))

(def gen-prop-outline-offset
  gen-nonprop-length)

(def gen-prop-box-align
  (gen/frequency [
    [100
      (gen/return "start")]
    [100
      (gen/return "center")]
    [100
      (gen/return "end")]
    [100
      (gen/return "baseline")]
    [100
      (gen/return "stretch")]]))

(def gen-prop-text-emphasis-style
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      (gen/frequency [
                        [100
                          (gen/return "filled")]
                        [100
                          (gen/return "open")]])
                      (gen/frequency [
                        [100
                          (gen/return "dot")]
                        [100
                          (gen/return "circle")]
                        [100
                          (gen/return "double-circle")]
                        [100
                          (gen/return "triangle")]
                        [100
                          (gen/return "sesame")]]))]
        (take cnt (shuffle lst)))]
    [100
      gen-nonprop-string]]))

(def gen-prop-margin-left
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-nonprop-display-internal
  (gen/frequency [
    [100
      (gen/return "table-row-group")]
    [100
      (gen/return "table-header-group")]
    [100
      (gen/return "table-footer-group")]
    [100
      (gen/return "table-row")]
    [100
      (gen/return "table-cell")]
    [100
      (gen/return "table-column-group")]
    [100
      (gen/return "table-column")]
    [100
      (gen/return "table-caption")]
    [100
      (gen/return "ruby-base")]
    [100
      (gen/return "ruby-text")]
    [100
      (gen/return "ruby-base-container")]
    [100
      (gen/return "ruby-text-container")]]))

(def gen-prop-background-color
  gen-nonprop-color)

(def gen-prop-flex-shrink
  gen-nonprop-number)

(def gen-nonprop-numeric-fraction-values
  (gen/frequency [
    [100
      (gen/return "diagonal-fractions")]
    [100
      (gen/return "stacked-fractions")]]))

(def gen-nonprop-east-asian-width-values
  (gen/frequency [
    [100
      (gen/return "full-width")]
    [100
      (gen/return "proportional-width")]]))

(def gen-nonprop-numeric-figure-values
  (gen/frequency [
    [100
      (gen/return "lining-nums")]
    [100
      (gen/return "oldstyle-nums")]]))

(def gen-nonprop-east-asian-variant-values
  (gen/frequency [
    [100
      (gen/return "jis78")]
    [100
      (gen/return "jis83")]
    [100
      (gen/return "jis90")]
    [100
      (gen/return "jis04")]
    [100
      (gen/return "simplified")]
    [100
      (gen/return "traditional")]]))

(def gen-prop-font-variant
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        (gen/let [cnt (gen/choose 1 5)
                  lst (gen/tuple 
                        gen-nonprop-common-lig-values
                        gen-nonprop-discretionary-lig-values
                        gen-nonprop-historical-lig-values
                        gen-nonprop-contextual-alt-values
                        (gen/return "stylistic("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 3)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "historical-forms")
                        (gen/return "styleset("))]
          (take cnt (shuffle lst)))
        (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
          gen-nonprop-feature-value-name)))
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "character-variant("))]
          (take cnt (shuffle lst)))
        (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
          gen-nonprop-feature-value-name)))
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "swash("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "ornaments("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/return "annotation("))]
          (take cnt (shuffle lst)))
        gen-nonprop-feature-value-name
        (gen/let [cnt (gen/choose 1 10)
                  lst (gen/tuple 
                        (gen/return ")")
                        (gen/frequency [
                          [100
                            (gen/return "small-caps")]
                          [100
                            (gen/return "all-small-caps")]
                          [100
                            (gen/return "petite-caps")]
                          [100
                            (gen/return "all-petite-caps")]
                          [100
                            (gen/return "unicase")]
                          [100
                            (gen/return "titling-caps")]])
                        gen-nonprop-numeric-figure-values
                        gen-nonprop-numeric-spacing-values
                        gen-nonprop-numeric-fraction-values
                        (gen/return "ordinal")
                        (gen/return "slashed-zero")
                        gen-nonprop-east-asian-variant-values
                        gen-nonprop-east-asian-width-values
                        (gen/return "ruby"))]
          (take cnt (shuffle lst))))]]))

(def gen-prop--webkit-border-before-width
  gen-nonprop-border-width)

(def gen-func-scale
  (gen/tuple
    (gen/return "scale(")
    gen-nonprop-number
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-number)])
    (gen/return ")")))

(def gen-func-scaleY
  (gen/tuple
    (gen/return "scaleY(")
    gen-nonprop-number
    (gen/return ")")))

(def gen-func-rotateY
  (gen/tuple
    (gen/return "rotateY(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-translateZ
  (gen/tuple
    (gen/return "translateZ(")
    gen-nonprop-length
    (gen/return ")")))

(def gen-func-rotate
  (gen/tuple
    (gen/return "rotate(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-translateX
  (gen/tuple
    (gen/return "translateX(")
    gen-nonprop-length-percentage
    (gen/return ")")))

(def gen-func-rotate3d
  (gen/tuple
    (gen/return "rotate3d(")
    gen-nonprop-number
    (gen/return ",")
    gen-nonprop-number
    (gen/return ",")
    gen-nonprop-number
    (gen/return ",")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-matrix
  (gen/tuple
    (gen/return "matrix(")
    gen-nonprop-number
    (gen/vector 
      (gen/tuple
        (gen/return ",")
        gen-nonprop-number)
      5 5)
    (gen/return ")")))

(def gen-func-translate
  (gen/tuple
    (gen/return "translate(")
    gen-nonprop-length-percentage
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-length-percentage)])
    (gen/return ")")))

(def gen-func-rotateZ
  (gen/tuple
    (gen/return "rotateZ(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-skewY
  (gen/tuple
    (gen/return "skewY(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-matrix3d
  (gen/tuple
    (gen/return "matrix3d(")
    gen-nonprop-number
    (gen/vector 
      (gen/tuple
        (gen/return ",")
        gen-nonprop-number)
      1 5)
    (gen/return ")")))

(def gen-func-perspective
  (gen/tuple
    (gen/return "perspective(")
    gen-nonprop-length
    (gen/return ")")))

(def gen-func-translate3d
  (gen/tuple
    (gen/return "translate3d(")
    gen-nonprop-length-percentage
    (gen/return ",")
    gen-nonprop-length-percentage
    (gen/return ",")
    gen-nonprop-length
    (gen/return ")")))

(def gen-func-skew
  (gen/tuple
    (gen/return "skew(")
    gen-nonprop-angle
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-angle)])
    (gen/return ")")))

(def gen-func-translateY
  (gen/tuple
    (gen/return "translateY(")
    gen-nonprop-length-percentage
    (gen/return ")")))

(def gen-func-scale3d
  (gen/tuple
    (gen/return "scale3d(")
    gen-nonprop-number
    (gen/return ",")
    gen-nonprop-number
    (gen/return ",")
    gen-nonprop-number
    (gen/return ")")))

(def gen-func-rotateX
  (gen/tuple
    (gen/return "rotateX(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-func-scaleX
  (gen/tuple
    (gen/return "scaleX(")
    gen-nonprop-number
    (gen/return ")")))

(def gen-nonprop-transform-function
  (gen/such-that not-empty (gen/vector
    (gen/let [cnt (gen/choose 1 21)
              lst (gen/tuple 
                    gen-func-matrix
                    gen-func-translate
                    gen-func-translateX
                    gen-func-translateY
                    gen-func-scale
                    gen-func-scaleX
                    gen-func-scaleY
                    gen-func-rotate
                    gen-func-skew
                    gen-func-skewX
                    gen-func-skewY
                    gen-func-matrix3d
                    gen-func-translate3d
                    gen-func-translateZ
                    gen-func-scale3d
                    gen-func-scaleZ
                    gen-func-rotate3d
                    gen-func-rotateX
                    gen-func-rotateY
                    gen-func-rotateZ
                    gen-func-perspective)]
      (take cnt (shuffle lst))))))

(def gen-nonprop-transform-list
  (gen/such-that not-empty (gen/vector
    gen-nonprop-transform-function)))

(def gen-prop-transform
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-transform-list]]))

(def gen-nonprop-feature-value-block-list
  (gen/such-that not-empty (gen/vector
    gen-nonprop-feature-value-block)))

(def gen-prop-break-inside
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "avoid")]
    [100
      (gen/return "avoid-page")]
    [100
      (gen/return "avoid-column")]
    [100
      (gen/return "avoid-region")]]))

(def gen-prop-cursor
  (gen/tuple
    (gen/vector
      (gen/tuple
        gen-nonprop-url
        (gen/one-of [(gen/return "")
          (gen/tuple
            gen-nonprop-x
            gen-nonprop-y)])
        (gen/return ",")))
    (gen/frequency [
      [100
        (gen/return "auto")]
      [100
        (gen/return "default")]
      [100
        (gen/return "none")]
      [100
        (gen/return "context-menu")]
      [100
        (gen/return "help")]
      [100
        (gen/return "pointer")]
      [100
        (gen/return "progress")]
      [100
        (gen/return "wait")]
      [100
        (gen/return "cell")]
      [100
        (gen/return "crosshair")]
      [100
        (gen/return "text")]
      [100
        (gen/return "vertical-text")]
      [100
        (gen/return "alias")]
      [100
        (gen/return "copy")]
      [100
        (gen/return "move")]
      [100
        (gen/return "no-drop")]
      [100
        (gen/return "not-allowed")]
      [100
        (gen/return "e-resize")]
      [100
        (gen/return "n-resize")]
      [100
        (gen/return "ne-resize")]
      [100
        (gen/return "nw-resize")]
      [100
        (gen/return "s-resize")]
      [100
        (gen/return "se-resize")]
      [100
        (gen/return "sw-resize")]
      [100
        (gen/return "w-resize")]
      [100
        (gen/return "ew-resize")]
      [100
        (gen/return "ns-resize")]
      [100
        (gen/return "nesw-resize")]
      [100
        (gen/return "nwse-resize")]
      [100
        (gen/return "col-resize")]
      [100
        (gen/return "row-resize")]
      [100
        (gen/return "all-scroll")]
      [100
        (gen/return "zoom-in")]
      [100
        (gen/return "zoom-out")]
      [100
        (gen/return "grab")]
      [100
        (gen/return "grabbing")]])))

(def gen-prop-scroll-snap-type-y
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "mandatory")]
    [100
      (gen/return "proximity")]]))

(def gen-nonprop-generic-family
  (gen/frequency [
    [100
      (gen/return "serif")]
    [100
      (gen/return "sans-serif")]
    [100
      (gen/return "cursive")]
    [100
      (gen/return "fantasy")]
    [100
      (gen/return "monospace")]]))

(def gen-prop-clear
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "both")]
    [100
      (gen/return "inline-start")]
    [100
      (gen/return "inline-end")]]))

(def gen-func-sepia
  (gen/tuple
    (gen/return "sepia(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-func-invert
  (gen/tuple
    (gen/return "invert(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-prop-contain
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "strict")]
    [100
      (gen/return "content")]
    [100
      (gen/let [cnt (gen/choose 1 4)
                lst (gen/tuple 
                      (gen/return "size")
                      (gen/return "layout")
                      (gen/return "style")
                      (gen/return "paint"))]
        (take cnt (shuffle lst)))]]))

(def gen-nonprop-bg-size
  (gen/frequency [
    [100
      (gen/vector 
        (gen/frequency [
          [100
            gen-nonprop-length-percentage]
          [100
            (gen/return "auto")]])
        1 2)]
    [100
      (gen/return "cover")]
    [100
      (gen/return "contain")]]))

(def gen-nonprop-compositing-operator
  (gen/frequency [
    [100
      (gen/return "add")]
    [100
      (gen/return "subtract")]
    [100
      (gen/return "intersect")]
    [100
      (gen/return "exclude")]]))

(def gen-nonprop-mask-layer
  (gen/tuple
    (gen/let [cnt (gen/choose 1 2)
              lst (gen/tuple 
                    gen-nonprop-mask-reference
                    gen-nonprop-position)]
      (take cnt (shuffle lst)))
    (gen/let [cnt (gen/choose 1 6)
              lst (gen/tuple 
                    (gen/one-of [(gen/return "")
                      (gen/tuple
                        (gen/return "/")
                        gen-nonprop-bg-size)])
                    gen-nonprop-repeat-style
                    gen-nonprop-geometry-box
                    (gen/frequency [
                      [100
                        gen-nonprop-geometry-box]
                      [100
                        (gen/return "no-clip")]])
                    gen-nonprop-compositing-operator
                    gen-nonprop-masking-mode)]
      (take cnt (shuffle lst)))))

(def gen-prop-mask
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-mask-layer))))

(def gen-prop-text-decoration-style
  (gen/frequency [
    [100
      (gen/return "solid")]
    [100
      (gen/return "double")]
    [100
      (gen/return "dotted")]
    [100
      (gen/return "dashed")]
    [100
      (gen/return "wavy")]]))

(def gen-prop-font-variant-east-asian
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/let [cnt (gen/choose 1 3)
                lst (gen/tuple 
                      gen-nonprop-east-asian-variant-values
                      gen-nonprop-east-asian-width-values
                      (gen/return "ruby"))]
        (take cnt (shuffle lst)))]]))

(def gen-prop-display-outside
  (gen/frequency [
    [100
      (gen/return "block-level")]
    [100
      (gen/return "inline-level")]
    [100
      (gen/return "run-in")]
    [100
      (gen/return "contents")]
    [100
      (gen/return "none")]
    [100
      (gen/return "table-row-group")]
    [100
      (gen/return "table-header-group")]
    [100
      (gen/return "table-footer-group")]
    [100
      (gen/return "table-row")]
    [100
      (gen/return "table-cell")]
    [100
      (gen/return "table-column-group")]
    [100
      (gen/return "table-column")]
    [100
      (gen/return "table-caption")]
    [100
      (gen/return "ruby-base")]
    [100
      (gen/return "ruby-text")]
    [100
      (gen/return "ruby-base-container")]
    [100
      (gen/return "ruby-text-container")]]))

(def gen-prop-writing-mode
  (gen/frequency [
    [100
      (gen/return "horizontal-tb")]
    [100
      (gen/return "vertical-rl")]
    [100
      (gen/return "vertical-lr")]
    [100
      (gen/return "sideways-rl")]
    [100
      (gen/return "sideways-lr")]]))

(def gen-nonprop-color-stop
  (gen/tuple
    gen-nonprop-color
    (gen/one-of [(gen/return "")
      gen-nonprop-length-percentage])))

(def gen-nonprop-color-stop-list
  (gen/fmap #(interpose " , " %)
    (gen/vector 
      gen-nonprop-color-stop
      2 20)))

(def gen-func-repeating-linear-gradient
  (gen/tuple
    (gen/return "repeating-linear-gradient(")
    (gen/one-of [(gen/return "")
      (gen/frequency [
        [100
          gen-nonprop-angle]
        [100
          (gen/tuple
            (gen/return "to")
            gen-nonprop-side-or-corner)]])])
    (gen/return ",")
    gen-nonprop-color-stop-list
    (gen/return ")")))

(def gen-prop-offset-rotate
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  (gen/frequency [
                    [100
                      (gen/return "auto")]
                    [100
                      (gen/return "reverse")]])
                  gen-nonprop-angle)]
    (take cnt (shuffle lst))))

(def gen-prop-hyphens
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "manual")]
    [100
      (gen/return "auto")]]))

(def gen-prop-transition-delay
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-time))))

(def gen-prop-outline-width
  gen-nonprop-br-width)

(def gen-nonprop-line-name-list
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-line-names]
      [100
        gen-nonprop-name-repeat]]))))

(def gen-prop-empty-cells
  (gen/frequency [
    [100
      (gen/return "show")]
    [100
      (gen/return "hide")]]))

(def gen-prop--ms-overflow-style
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "none")]
    [100
      (gen/return "scrollbar")]
    [100
      (gen/return "-ms-autohiding-scrollbar")]]))

(def gen-prop--webkit-mask-origin
  (gen/tuple
    (gen/frequency [
      [100
        (gen/return "padding")]
      [100
        (gen/return "border")]
      [100
        (gen/return "content")]])
    (gen/vector
      (gen/tuple
        (gen/return ",")
        (gen/frequency [
          [100
            (gen/return "border")]
          [100
            (gen/return "padding")]
          [100
            (gen/return "content")]])))))

(def gen-prop-mask-type
  (gen/frequency [
    [100
      (gen/return "luminance")]
    [100
      (gen/return "alpha")]]))

(def gen-prop-overflow-x
  (gen/frequency [
    [100
      (gen/return "visible")]
    [100
      (gen/return "hidden")]
    [100
      (gen/return "scroll")]
    [100
      (gen/return "auto")]]))

(def gen-prop-text-size-adjust
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-grid
  (gen/frequency [
    [100
      gen-nonprop-grid-template]
    [100
      (gen/tuple
        gen-nonprop-grid-template-rows
        (gen/return "/")
        (gen/let [lst (gen/tuple 
                        (gen/return "auto-flow")
                        (gen/one-of [(gen/return "")
                          (gen/return "dense")]))]
          (shuffle lst))
        (gen/one-of [(gen/return "")
          gen-nonprop-grid-auto-columns]))]
    [100
      (gen/tuple
        (gen/let [lst (gen/tuple 
                        (gen/return "auto-flow")
                        (gen/one-of [(gen/return "")
                          (gen/return "dense")]))]
          (shuffle lst))
        (gen/one-of [(gen/return "")
          gen-nonprop-grid-auto-rows])
        (gen/return "/")
        gen-nonprop-grid-template-columns)]]))

(def gen-prop-text-decoration-color
  gen-nonprop-color)

(def gen-prop-bottom
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-func-opacity
  (gen/tuple
    (gen/return "opacity(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-prop-table-layout
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "fixed")]]))

(def gen-prop-font
  (gen/frequency [
    [100
      (gen/tuple
        (gen/one-of [(gen/return "")
          (gen/let [cnt (gen/choose 1 4)
                    lst (gen/tuple 
                          gen-nonprop-font-style
                          gen-nonprop-font-variant-css21
                          gen-nonprop-font-weight
                          gen-nonprop-font-stretch)]
            (take cnt (shuffle lst)))])
        gen-nonprop-font-size
        (gen/one-of [(gen/return "")
          (gen/tuple
            (gen/return "/")
            gen-nonprop-line-height)])
        gen-nonprop-font-family)]
    [100
      (gen/return "caption")]
    [100
      (gen/return "icon")]
    [100
      (gen/return "menu")]
    [100
      (gen/return "message-box")]
    [100
      (gen/return "small-caption")]
    [100
      (gen/return "status-bar")]]))

(def gen-prop-perspective-origin
  gen-nonprop-position)

(def gen-prop-border-right-color
  gen-nonprop-color)

(def gen-prop-border-block-end-width
  gen-nonprop-border-width)

(def gen-nonprop-feature-tag-value
  (gen/tuple
    gen-nonprop-string
    (gen/one-of [(gen/return "")
      (gen/frequency [
        [100
          gen-nonprop-integer]
        [100
          (gen/return "on")]
        [100
          (gen/return "off")]])])))

(def gen-prop-font-feature-settings
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-feature-tag-value)))]]))

(def gen-prop-all
  (gen/frequency [
    [100
      (gen/return "initial")]
    [100
      (gen/return "inherit")]
    [100
      (gen/return "unset")]]))

(def gen-prop-padding-right
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-border-image-width
  (gen/vector 
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        gen-nonprop-number]
      [100
        (gen/return "auto")]])
    1 4))

(def gen-prop-box-ordinal-group
  gen-nonprop-integer)

(def gen-prop-shape-margin
  gen-nonprop-length-percentage)

(def gen-prop-padding-block-end
  gen-nonprop-padding-left)

(def gen-func-grayscale
  (gen/tuple
    (gen/return "grayscale(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-prop-shape-outside
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-shape-box
                      gen-nonprop-basic-shape)]
        (take cnt (shuffle lst)))]
    [100
      gen-nonprop-image]]))

(def gen-nonprop-display-inside
  (gen/frequency [
    [100
      (gen/return "flow")]
    [100
      (gen/return "flow-root")]
    [100
      (gen/return "table")]
    [100
      (gen/return "flex")]
    [100
      (gen/return "grid")]
    [100
      (gen/return "subgrid")]
    [100
      (gen/return "ruby")]]))

(def gen-nonprop-display-outside
  (gen/frequency [
    [100
      (gen/return "block")]
    [100
      (gen/return "inline")]
    [100
      (gen/return "run-in")]]))

(def gen-nonprop-display-listitem
  (gen/let [lst (gen/tuple 
                  (gen/return "list-item")
                  (gen/one-of [(gen/return "")
                    gen-nonprop-display-outside])
                  (gen/one-of [(gen/return "")
                    (gen/frequency [
                      [100
                        (gen/return "flow")]
                      [100
                        (gen/return "flow-root")]])]))]
    (shuffle lst)))

(def gen-prop-display
  (gen/frequency [
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-display-outside
                      gen-nonprop-display-inside)]
        (take cnt (shuffle lst)))]
    [100
      gen-nonprop-display-listitem]
    [100
      gen-nonprop-display-internal]
    [100
      gen-nonprop-display-box]
    [100
      gen-nonprop-display-legacy]]))

(def gen-prop--moz-border-right-colors
  (gen/frequency [
    [100
      (gen/tuple
        (gen/vector
          gen-nonprop-color)
        gen-nonprop-color)]
    [100
      (gen/return "none")]]))

(def gen-nonprop-single-transition-property
  (gen/frequency [
    [100
      (gen/return "all")]
    [100
      gen-nonprop-custom-ident]]))

(def gen-nonprop-single-transition-timing-function
  (gen/frequency [
    [100
      (gen/return "ease")]
    [100
      (gen/return "linear")]
    [100
      (gen/return "ease-in")]
    [100
      (gen/return "ease-out")]
    [100
      (gen/return "ease-in-out")]
    [100
      (gen/return "step-start")]
    [100
      (gen/return "step-end")]
    [100
      (gen/tuple
        (gen/return "steps(")
        gen-nonprop-integer
        (gen/one-of [(gen/return "")
          (gen/tuple
            (gen/return ",")
            (gen/frequency [
              [100
                (gen/return "start")]
              [100
                (gen/return "end")]]))])
        (gen/return ")"))]
    [100
      (gen/tuple
        (gen/return "cubic-bezier(")
        gen-nonprop-number
        (gen/return ",")
        gen-nonprop-number
        (gen/return ",")
        gen-nonprop-number
        (gen/return ",")
        gen-nonprop-number
        (gen/return ")"))]]))

(def gen-nonprop-single-transition
  (gen/let [cnt (gen/choose 1 4)
            lst (gen/tuple 
                  (gen/frequency [
                    [100
                      (gen/return "none")]
                    [100
                      gen-nonprop-single-transition-property]])
                  gen-nonprop-time
                  gen-nonprop-single-transition-timing-function
                  gen-nonprop-time)]
    (take cnt (shuffle lst))))

(def gen-prop-scroll-snap-type
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "mandatory")]
    [100
      (gen/return "proximity")]]))

(def gen-prop-margin-top
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-prop--moz-border-bottom-colors
  (gen/frequency [
    [100
      (gen/tuple
        (gen/vector
          gen-nonprop-color)
        gen-nonprop-color)]
    [100
      (gen/return "none")]]))

(def gen-prop-border-left-color
  gen-nonprop-color)

(def gen-prop-position
  (gen/frequency [
    [100
      (gen/return "static")]
    [100
      (gen/return "relative")]
    [100
      (gen/return "absolute")]
    [100
      (gen/return "sticky")]
    [100
      (gen/return "fixed")]]))

(def gen-prop--webkit-mask-repeat-y
  (gen/frequency [
    [100
      (gen/return "repeat")]
    [100
      (gen/return "no-repeat")]
    [100
      (gen/return "space")]
    [100
      (gen/return "round")]]))

(def gen-prop-ruby-align
  (gen/frequency [
    [100
      (gen/return "start")]
    [100
      (gen/return "center")]
    [100
      (gen/return "space-between")]
    [100
      (gen/return "space-around")]]))

(def gen-nonprop-family-name
  (gen/frequency [
    [100
      gen-nonprop-string]
    [100
      (gen/such-that not-empty (gen/vector
        gen-nonprop-custom-ident))]]))

(def gen-prop-font-variant-numeric
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/let [cnt (gen/choose 1 5)
                lst (gen/tuple 
                      gen-nonprop-numeric-figure-values
                      gen-nonprop-numeric-spacing-values
                      gen-nonprop-numeric-fraction-values
                      (gen/return "ordinal")
                      (gen/return "slashed-zero"))]
        (take cnt (shuffle lst)))]]))

(def gen-prop-flex-basis
  (gen/frequency [
    [100
      (gen/return "content")]
    [100
      gen-nonprop-width]]))

(def gen-prop--webkit-mask-position-y
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/return "top")]
      [100
        (gen/return "center")]
      [100
        (gen/return "bottom")]])))))

(def gen-prop-flex
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        gen-nonprop-flex-grow
        (gen/let [cnt (gen/choose 1 2)
                  lst (gen/tuple 
                        (gen/one-of [(gen/return "")
                          gen-nonprop-flex-shrink])
                        gen-nonprop-flex-basis)]
          (take cnt (shuffle lst))))]]))

(def gen-prop-overflow-wrap
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "break-word")]]))

(def gen-prop-border-top-color
  gen-nonprop-color)

(def gen-nonprop-general-enclosed
  (gen/frequency [
    [100
      (gen/tuple
        gen-nonprop-function-token
        gen-nonprop-any-value
        (gen/return ")"))]
    [100
      (gen/tuple
        (gen/return "(")
        gen-nonprop-ident
        gen-nonprop-any-value
        (gen/return ")"))]]))

(def gen-prop-align-self
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "flex-start")]
    [100
      (gen/return "flex-end")]
    [100
      (gen/return "center")]
    [100
      (gen/return "baseline")]
    [100
      (gen/return "stretch")]]))

(def gen-nonprop-shape
  (gen/tuple
    (gen/return "rect(")
    gen-nonprop-top
    (gen/return ",")
    gen-nonprop-right
    (gen/return ",")
    gen-nonprop-bottom
    (gen/return ",")
    gen-nonprop-left
    (gen/return ")")))

(def gen-prop-clip
  (gen/frequency [
    [100
      gen-nonprop-shape]
    [100
      (gen/return "auto")]]))

(def gen-prop-border-block-start-color
  gen-nonprop-color)

(def gen-prop--webkit-border-before-color
  gen-nonprop-color)

(def gen-prop-overflow-y
  (gen/frequency [
    [100
      (gen/return "visible")]
    [100
      (gen/return "hidden")]
    [100
      (gen/return "scroll")]
    [100
      (gen/return "auto")]]))

(def gen-prop-line-break
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "loose")]
    [100
      (gen/return "normal")]
    [100
      (gen/return "strict")]]))

(def gen-prop-font-variant-position
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "sub")]
    [100
      (gen/return "super")]]))

(def gen-prop-offset-inline-end
  gen-nonprop-left)

(def gen-prop-inline-size
  gen-nonprop-width)

(def gen-nonprop-single-timing-function
  gen-nonprop-single-transition-timing-function)

(def gen-prop-animation-timing-function
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-timing-function))))

(def gen-prop-border-right-style
  gen-nonprop-br-style)

(def gen-nonprop-absolute-size
  (gen/frequency [
    [100
      (gen/return "xx-small")]
    [100
      (gen/return "x-small")]
    [100
      (gen/return "small")]
    [100
      (gen/return "medium")]
    [100
      (gen/return "large")]
    [100
      (gen/return "x-large")]
    [100
      (gen/return "xx-large")]]))

(def gen-nonprop-relative-size
  (gen/frequency [
    [100
      (gen/return "larger")]
    [100
      (gen/return "smaller")]]))

(def gen-prop-font-size
  (gen/frequency [
    [100
      gen-nonprop-absolute-size]
    [100
      gen-nonprop-relative-size]
    [100
      gen-nonprop-length-percentage]]))

(def gen-prop-background-position-y
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/return "center")]
      [100
        (gen/tuple
          (gen/one-of [(gen/return "")
            (gen/frequency [
              [100
                (gen/return "top")]
              [100
                (gen/return "bottom")]
              [100
                (gen/return "y-start")]
              [100
                (gen/return "y-end")]])])
          (gen/one-of [(gen/return "")
            gen-nonprop-length-percentage]))]])))))

(def gen-prop-widows
  gen-nonprop-integer)

(def gen-nonprop-symbol
  (gen/frequency [
    [100
      gen-nonprop-string]
    [100
      gen-nonprop-image]
    [100
      gen-nonprop-ident]]))

(def gen-nonprop-cf-mixing-image
  (gen/let [lst (gen/tuple 
                  (gen/one-of [(gen/return "")
                    gen-nonprop-percentage])
                  gen-nonprop-image)]
    (shuffle lst)))

(def gen-prop--webkit-mask-image
  (gen/tuple
    gen-nonprop-mask-image
    (gen/vector
      (gen/tuple
        (gen/return ",")
        gen-nonprop-mask-image))))

(def gen-nonprop-explicit-track-list
  (gen/tuple
    (gen/such-that not-empty (gen/vector
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-line-names])
        gen-nonprop-track-size)))
    (gen/one-of [(gen/return "")
      gen-nonprop-line-names])))

(def gen-prop-grid-template
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        gen-nonprop-grid-template-rows
        (gen/return "/")
        gen-nonprop-grid-template-columns)]
    [100
      (gen/tuple
        (gen/such-that not-empty (gen/vector
          (gen/tuple
            (gen/one-of [(gen/return "")
              gen-nonprop-line-names])
            gen-nonprop-string
            (gen/one-of [(gen/return "")
              gen-nonprop-track-size])
            (gen/one-of [(gen/return "")
              gen-nonprop-line-names]))))
        (gen/one-of [(gen/return "")
          (gen/tuple
            (gen/return "/")
            gen-nonprop-explicit-track-list)]))]]))

(def gen-prop-border-bottom-right-radius
  (gen/vector 
    gen-nonprop-length-percentage
    1 2))

(def gen-prop-align-content
  (gen/frequency [
    [100
      (gen/return "flex-start")]
    [100
      (gen/return "flex-end")]
    [100
      (gen/return "center")]
    [100
      (gen/return "space-between")]
    [100
      (gen/return "space-around")]
    [100
      (gen/return "space-evenly")]
    [100
      (gen/return "stretch")]]))

(def gen-prop-grid-column-end
  gen-nonprop-grid-line)

(def gen-prop-grid-auto-columns
  (gen/such-that not-empty (gen/vector
    gen-nonprop-track-size)))

(def gen-prop--moz-user-input
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "none")]
    [100
      (gen/return "enabled")]
    [100
      (gen/return "disabled")]]))

(def gen-prop-transition-duration
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-time))))

(def gen-prop-isolation
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "isolate")]]))

(def gen-prop-word-wrap
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "break-word")]]))

(def gen-prop-touch-action
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 3)
                lst (gen/tuple 
                      (gen/frequency [
                        [100
                          (gen/return "pan-x")]
                        [100
                          (gen/return "pan-left")]
                        [100
                          (gen/return "pan-right")]])
                      (gen/frequency [
                        [100
                          (gen/return "pan-y")]
                        [100
                          (gen/return "pan-up")]
                        [100
                          (gen/return "pan-down")]])
                      (gen/return "pinch-zoom"))]
        (take cnt (shuffle lst)))]
    [100
      (gen/return "manipulation")]]))

(def gen-prop-offset
  (gen/tuple
    (gen/tuple
      (gen/one-of [(gen/return "")
        gen-nonprop-offset-position])
      (gen/one-of [(gen/return "")
        (gen/tuple
          gen-nonprop-offset-path
          (gen/one-of [(gen/return "")
            (gen/let [cnt (gen/choose 1 2)
                      lst (gen/tuple 
                            gen-nonprop-offset-distance
                            gen-nonprop-offset-rotate)]
              (take cnt (shuffle lst)))]))]))
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        gen-nonprop-offset-anchor)])))

(def gen-prop-mask-repeat
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-repeat-style))))

(def gen-prop-max-height
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "none")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "fill-available")]]))

(def gen-nonprop-blend-mode
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "multiply")]
    [100
      (gen/return "screen")]
    [100
      (gen/return "overlay")]
    [100
      (gen/return "darken")]
    [100
      (gen/return "lighten")]
    [100
      (gen/return "color-dodge")]
    [100
      (gen/return "color-burn")]
    [100
      (gen/return "hard-light")]
    [100
      (gen/return "soft-light")]
    [100
      (gen/return "difference")]
    [100
      (gen/return "exclusion")]
    [100
      (gen/return "hue")]
    [100
      (gen/return "saturation")]
    [100
      (gen/return "color")]
    [100
      (gen/return "luminosity")]]))

(def gen-prop-mix-blend-mode
  gen-nonprop-blend-mode)

(def gen-prop-text-indent
  (gen/let [lst (gen/tuple 
                  gen-nonprop-length-percentage
                  (gen/one-of [(gen/return "")
                    (gen/return "hanging")])
                  (gen/one-of [(gen/return "")
                    (gen/return "each-line")]))]
    (shuffle lst)))

(def gen-prop-text-emphasis-color
  gen-nonprop-color)

(def gen-nonprop-type-or-unit
  (gen/frequency [
    [100
      (gen/return "string")]
    [100
      (gen/return "integer")]
    [100
      (gen/return "color")]
    [100
      (gen/return "url")]
    [100
      (gen/return "integer")]
    [100
      (gen/return "number")]
    [100
      (gen/return "length")]
    [100
      (gen/return "angle")]
    [100
      (gen/return "time")]
    [100
      (gen/return "frequency")]
    [100
      (gen/return "em")]
    [100
      (gen/return "ex")]
    [100
      (gen/return "px")]
    [100
      (gen/return "rem")]
    [100
      (gen/return "vw")]
    [100
      (gen/return "vh")]
    [100
      (gen/return "vmin")]
    [100
      (gen/return "vmax")]
    [100
      (gen/return "mm")]
    [100
      (gen/return "q")]
    [100
      (gen/return "cm")]
    [100
      (gen/return "in")]
    [100
      (gen/return "pt")]
    [100
      (gen/return "pc")]
    [100
      (gen/return "deg")]
    [100
      (gen/return "grad")]
    [100
      (gen/return "rad")]
    [100
      (gen/return "ms")]
    [100
      (gen/return "s")]
    [100
      (gen/return "Hz")]
    [100
      (gen/return "kHz")]
    [100
      (gen/return "%")]]))

(def gen-func-attr
  (gen/tuple
    (gen/return "attr(")
    gen-nonprop-attr-name
    (gen/one-of [(gen/return "")
      gen-nonprop-type-or-unit])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-attr-fallback)])
    (gen/return ")")))

(def gen-prop-border-inline-end-width
  gen-nonprop-border-width)

(def gen-prop-border-top-right-radius
  (gen/vector 
    gen-nonprop-length-percentage
    1 2))

(def gen-prop--webkit-text-stroke
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  gen-nonprop-length
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-font-variant-caps
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "small-caps")]
    [100
      (gen/return "all-small-caps")]
    [100
      (gen/return "petite-caps")]
    [100
      (gen/return "all-petite-caps")]
    [100
      (gen/return "unicase")]
    [100
      (gen/return "titling-caps")]]))

(def gen-nonprop-bg-image
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-image]]))

(def gen-prop-background-image
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-bg-image))))

(def gen-prop-offset-position
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-position]]))

(def gen-nonprop-ending-shape
  (gen/frequency [
    [100
      (gen/return "circle")]
    [100
      (gen/return "ellipse")]]))

(def gen-prop-color
  gen-nonprop-color)

(def gen-prop-flex-direction
  (gen/frequency [
    [100
      (gen/return "row")]
    [100
      (gen/return "row-reverse")]
    [100
      (gen/return "column")]
    [100
      (gen/return "column-reverse")]]))

(def gen-prop-border-image-slice
  (gen/let [lst (gen/tuple 
                  (gen/vector 
                    gen-nonprop-number-percentage
                    1 4)
                  (gen/one-of [(gen/return "")
                    (gen/return "fill")]))]
    (shuffle lst)))

(def gen-prop-border-collapse
  (gen/frequency [
    [100
      (gen/return "collapse")]
    [100
      (gen/return "separate")]]))

(def gen-prop-border-inline-start
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-border-width
                  gen-nonprop-border-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-nonprop-single-animation-iteration-count
  (gen/frequency [
    [100
      (gen/return "infinite")]
    [100
      gen-nonprop-number]]))

(def gen-prop--moz-orient
  (gen/frequency [
    [100
      (gen/return "inline")]
    [100
      (gen/return "block")]
    [100
      (gen/return "horizontal")]
    [100
      (gen/return "vertical")]]))

(def gen-prop--webkit-box-reflect
  (gen/tuple
    (gen/one-of [(gen/return "")
      (gen/frequency [
        [100
          (gen/return "above")]
        [100
          (gen/return "below")]
        [100
          (gen/return "right")]
        [100
          (gen/return "left")]])])
    (gen/one-of [(gen/return "")
      gen-nonprop-length])
    (gen/one-of [(gen/return "")
      gen-nonprop-image])))

(def gen-prop-animation-delay
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-time))))

(def gen-prop-padding-block-start
  gen-nonprop-padding-left)

(def gen-prop-border-block-end-style
  gen-nonprop-border-style)

(def gen-prop--moz-outline-radius
  (gen/tuple
    (gen/vector 
      gen-nonprop-outline-radius
      1 4)
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/vector 
          gen-nonprop-outline-radius
          1 4))])))

(def gen-prop-border-block-start-style
  gen-nonprop-border-style)

(def gen-prop-object-position
  gen-nonprop-position)

(def gen-prop-grid-template-rows
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-track-list]
    [100
      gen-nonprop-auto-track-list]]))

(def gen-prop-text-underline-position
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      (gen/return "under")
                      (gen/frequency [
                        [100
                          (gen/return "left")]
                        [100
                          (gen/return "right")]]))]
        (take cnt (shuffle lst)))]]))

(def gen-prop-border-top-style
  gen-nonprop-br-style)

(def gen-prop-border-spacing
  (gen/tuple
    gen-nonprop-length
    (gen/one-of [(gen/return "")
      gen-nonprop-length])))

(def gen-prop-grid-area
  (gen/tuple
    gen-nonprop-grid-line
    (gen/vector 
      (gen/tuple
        (gen/return "/")
        gen-nonprop-grid-line)
      0 3)))

(def gen-prop-scroll-snap-points-y
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        (gen/return "repeat(")
        gen-nonprop-length-percentage
        (gen/return ")"))]]))

(def gen-prop-quotes
  (gen/frequency [
    [100
      (gen/such-that not-empty (gen/vector
        (gen/tuple
          gen-nonprop-string
          gen-nonprop-string)))]
    [100
      (gen/return "none")]]))

(def gen-prop-border-width
  (gen/vector 
    gen-nonprop-br-width
    1 4))

(def gen-prop-display-inside
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "block")]
    [100
      (gen/return "table")]
    [100
      (gen/return "flex")]
    [100
      (gen/return "grid")]
    [100
      (gen/return "ruby")]]))

(def gen-prop-vertical-align
  (gen/frequency [
    [100
      (gen/return "baseline")]
    [100
      (gen/return "sub")]
    [100
      (gen/return "super")]
    [100
      (gen/return "text-top")]
    [100
      (gen/return "text-bottom")]
    [100
      (gen/return "middle")]
    [100
      (gen/return "top")]
    [100
      (gen/return "bottom")]
    [100
      gen-nonprop-percentage]
    [100
      gen-nonprop-length]]))

(def gen-prop--webkit-mask-position-x
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-length-percentage]
      [100
        (gen/return "left")]
      [100
        (gen/return "center")]
      [100
        (gen/return "right")]])))))

(def gen-prop-border-color
  (gen/vector 
    gen-nonprop-color
    1 4))

(def gen-prop-column-gap
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      (gen/return "normal")]]))

(def gen-nonprop-time-percentage
  (gen/frequency [
    [100
      gen-nonprop-time]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-counter-reset
  (gen/frequency [
    [100
      (gen/such-that not-empty (gen/vector
        (gen/tuple
          gen-nonprop-custom-ident
          (gen/one-of [(gen/return "")
            gen-nonprop-integer]))))]
    [100
      (gen/return "none")]]))

(def gen-prop-padding-inline-end
  gen-nonprop-padding-left)

(def gen-prop--moz-image-region
  (gen/frequency [
    [100
      gen-nonprop-shape]
    [100
      (gen/return "auto")]]))

(def gen-prop-font-size-adjust
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-number]]))

(def gen-func-fit-content
  (gen/tuple
    (gen/return "fit-content(")
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-percentage]])
    (gen/return ")")))

(def gen-prop--webkit-mask-clip
  (gen/tuple
    gen-nonprop-clip-style
    (gen/vector
      (gen/tuple
        (gen/return ",")
        gen-nonprop-clip-style))))

(def gen-prop-overflow
  (gen/frequency [
    [100
      (gen/return "visible")]
    [100
      (gen/return "hidden")]
    [100
      (gen/return "scroll")]
    [100
      (gen/return "auto")]]))

(def gen-nonprop-single-animation-direction
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "reverse")]
    [100
      (gen/return "alternate")]
    [100
      (gen/return "alternate-reverse")]]))

(def gen-nonprop-single-animation
  (gen/let [cnt (gen/choose 1 8)
            lst (gen/tuple 
                  gen-nonprop-time
                  gen-nonprop-single-timing-function
                  gen-nonprop-time
                  gen-nonprop-single-animation-iteration-count
                  gen-nonprop-single-animation-direction
                  gen-nonprop-single-animation-fill-mode
                  gen-nonprop-single-animation-play-state
                  (gen/frequency [
                    [100
                      (gen/return "none")]
                    [100
                      gen-nonprop-keyframes-name]]))]
    (take cnt (shuffle lst))))

(def gen-prop-animation
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-animation))))

(def gen-prop-scroll-snap-points-x
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/tuple
        (gen/return "repeat(")
        gen-nonprop-length-percentage
        (gen/return ")"))]]))

(def gen-nonprop-shadow
  (gen/let [lst (gen/tuple 
                  (gen/one-of [(gen/return "")
                    (gen/return "inset")])
                  (gen/vector 
                    gen-nonprop-length
                    2 4)
                  (gen/one-of [(gen/return "")
                    gen-nonprop-color]))]
    (shuffle lst)))

(def gen-func-cross-fade
  (gen/tuple
    (gen/return "cross-fade(")
    gen-nonprop-cf-mixing-image
    (gen/return ",")
    (gen/one-of [(gen/return "")
      gen-nonprop-cf-final-image])
    (gen/return ")")))

(def gen-prop-background-clip
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-box))))

(def gen-prop-box-suppress
  (gen/frequency [
    [100
      (gen/return "show")]
    [100
      (gen/return "discard")]
    [100
      (gen/return "hide")]]))

(def gen-prop-background-size
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-bg-size))))

(def gen-prop-flex-flow
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  gen-nonprop-flex-direction
                  gen-nonprop-flex-wrap)]
    (take cnt (shuffle lst))))

(def gen-prop-font-synthesis
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      (gen/return "weight")
                      (gen/return "style"))]
        (take cnt (shuffle lst)))]]))

(def gen-nonprop-animateable-feature
  (gen/frequency [
    [100
      (gen/return "scroll-position")]
    [100
      (gen/return "contents")]
    [100
      gen-nonprop-custom-ident]]))

(def gen-prop-will-change
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-animateable-feature)))]]))

(def gen-prop-width
  (gen/frequency [
    [100
      (gen/let [lst (gen/tuple 
                      (gen/frequency [
                        [100
                          gen-nonprop-length]
                        [100
                          gen-nonprop-percentage]])
                      (gen/one-of [(gen/return "")
                        (gen/frequency [
                          [100
                            (gen/return "border-box")]
                          [100
                            (gen/return "content-box")]])]))]
        (shuffle lst))]
    [100
      (gen/return "available")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "auto")]]))

(def gen-prop-left
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-prop-list-style
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-list-style-type
                  gen-nonprop-list-style-position
                  gen-nonprop-list-style-image)]
    (take cnt (shuffle lst))))

(def gen-prop-letter-spacing
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      gen-nonprop-length]]))

(def gen-prop-background-blend-mode
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-blend-mode))))

(def gen-prop-z-index
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-integer]]))

(def gen-nonprop-frequency-percentage
  (gen/frequency [
    [100
      gen-nonprop-frequency]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-right
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-func-repeating-radial-gradient
  (gen/tuple
    (gen/return "repeating-radial-gradient(")
    (gen/one-of [(gen/return "")
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-ending-shape
                      gen-nonprop-size)]
        (take cnt (shuffle lst)))])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "at")
        gen-nonprop-position)])
    (gen/return ",")
    gen-nonprop-color-stop-list
    (gen/return ")")))

(def gen-prop-animation-name
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        (gen/return "none")]
      [100
        gen-nonprop-keyframes-name]])))))

(def gen-prop-shape-image-threshold
  gen-nonprop-number)

(def gen-prop-image-rendering
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "crisp-edges")]
    [100
      (gen/return "pixelated")]]))

(def gen-nonprop-image-set-option
  (gen/tuple
    (gen/frequency [
      [100
        gen-nonprop-image]
      [100
        gen-nonprop-string]])
    gen-nonprop-resolution))

(def gen-prop-top
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]]))

(def gen-prop-ime-mode
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "normal")]
    [100
      (gen/return "active")]
    [100
      (gen/return "inactive")]
    [100
      (gen/return "disabled")]]))

(def gen-func-image-set
  (gen/tuple
    (gen/return "image-set(")
    (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
      gen-nonprop-image-set-option)))
    (gen/return ")")))

(def gen-prop-grid-row-start
  gen-nonprop-grid-line)

(def gen-nonprop-shadow-t
  (gen/let [lst (gen/tuple 
                  (gen/vector 
                    gen-nonprop-length
                    2 3)
                  (gen/one-of [(gen/return "")
                    gen-nonprop-color]))]
    (shuffle lst)))

(def gen-prop-border-bottom-style
  gen-nonprop-br-style)

(def gen-prop-margin-inline-end
  gen-nonprop-margin-left)

(def gen-prop-orphans
  gen-nonprop-integer)

(def gen-prop-caption-side
  (gen/frequency [
    [100
      (gen/return "top")]
    [100
      (gen/return "bottom")]
    [100
      (gen/return "block-start")]
    [100
      (gen/return "block-end")]
    [100
      (gen/return "inline-start")]
    [100
      (gen/return "inline-end")]]))

(def gen-prop-min-inline-size
  gen-nonprop-min-width)

(def gen-nonprop-namespace-prefix
  gen-nonprop-ident)

(def gen-nonprop-page-selector-list
  (gen/one-of [(gen/return "")
    (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
      gen-nonprop-page-selector)))]))

(def gen-func-drop-shadow
  (gen/tuple
    (gen/return "drop-shadow(")
    (gen/vector 
      gen-nonprop-length
      2 3)
    (gen/one-of [(gen/return "")
      gen-nonprop-color])
    (gen/return ")")))

(def gen-func-var
  (gen/tuple
    (gen/return "var(")
    gen-nonprop-custom-property-name
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return ",")
        gen-nonprop-declaration-value)])
    (gen/return ")")))

(def gen-prop-font-variation-settings
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        (gen/tuple
          gen-nonprop-string
          gen-nonprop-number))))]]))

(def gen-nonprop-nth
  (gen/frequency [
    [100
      gen-nonprop-an-plus-b]
    [100
      (gen/return "even")]
    [100
      (gen/return "odd")]]))

(def gen-prop-border-image-outset
  (gen/vector 
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-number]])
    1 4))

(def gen-prop-offset-block-end
  gen-nonprop-left)

(def gen-prop-animation-direction
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-animation-direction))))

(def gen-prop-mask-clip
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-geometry-box]
      [100
        (gen/return "no-clip")]])))))

(def gen-prop-offset-distance
  gen-nonprop-length-percentage)

(def gen-prop-offset-block-start
  gen-nonprop-left)

(def gen-prop-column-rule-width
  gen-nonprop-br-width)

(def gen-prop-transition
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-transition))))

(def gen-prop-unicode-bidi
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "embed")]
    [100
      (gen/return "isolate")]
    [100
      (gen/return "bidi-override")]
    [100
      (gen/return "isolate-override")]
    [100
      (gen/return "plaintext")]]))

(def gen-func-brightness
  (gen/tuple
    (gen/return "brightness(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-prop-grid-row-gap
  gen-nonprop-length-percentage)

(def gen-prop-scroll-snap-destination
  gen-nonprop-position)

(def gen-prop-font-language-override
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      gen-nonprop-string]]))

(def gen-prop-float
  (gen/frequency [
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "none")]
    [100
      (gen/return "inline-start")]
    [100
      (gen/return "inline-end")]]))

(def gen-prop-border-image-repeat
  (gen/vector 
    (gen/frequency [
      [100
        (gen/return "stretch")]
      [100
        (gen/return "repeat")]
      [100
        (gen/return "round")]
      [100
        (gen/return "space")]])
    1 2))

(def gen-prop-mask-size
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-bg-size))))

(def gen-func-hue-rotate
  (gen/tuple
    (gen/return "hue-rotate(")
    gen-nonprop-angle
    (gen/return ")")))

(def gen-prop-image-orientation
  (gen/frequency [
    [100
      (gen/return "from-image")]
    [100
      gen-nonprop-angle]
    [100
      (gen/tuple
        (gen/one-of [(gen/return "")
          gen-nonprop-angle])
        (gen/return "flip"))]]))

(def gen-func-contrast
  (gen/tuple
    (gen/return "contrast(")
    gen-nonprop-number-percentage
    (gen/return ")")))

(def gen-func-blur
  (gen/tuple
    (gen/return "blur(")
    gen-nonprop-length
    (gen/return ")")))

(def gen-nonprop-filter-function
  (gen/frequency [
    [100
      gen-func-blur]
    [100
      gen-func-brightness]
    [100
      gen-func-contrast]
    [100
      gen-func-drop-shadow]
    [100
      gen-func-grayscale]
    [100
      gen-func-hue-rotate]
    [100
      gen-func-invert]
    [100
      gen-func-opacity]
    [100
      gen-func-sepia]
    [100
      gen-func-saturate]]))

(def gen-nonprop-filter-function-list
  (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-filter-function]
      [100
        gen-nonprop-url]]))))

(def gen-prop-border-top-width
  gen-nonprop-br-width)

(def gen-prop-min-block-size
  gen-nonprop-min-width)

(def gen-func-linear-gradient
  (gen/tuple
    (gen/return "linear-gradient(")
    (gen/one-of [(gen/return "")
      (gen/frequency [
        [100
          gen-nonprop-angle]
        [100
          (gen/tuple
            (gen/return "to")
            gen-nonprop-side-or-corner)]])])
    (gen/return ",")
    gen-nonprop-color-stop-list
    (gen/return ")")))

(def gen-prop-initial-letter-align
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "alphabetic")]
    [100
      (gen/return "hanging")]
    [100
      (gen/return "ideographic")]]))

(def gen-prop--moz-user-modify
  (gen/frequency [
    [100
      (gen/return "read-only")]
    [100
      (gen/return "read-write")]
    [100
      (gen/return "write-only")]]))

(def gen-prop-counter-increment
  (gen/frequency [
    [100
      (gen/such-that not-empty (gen/vector
        (gen/tuple
          gen-nonprop-custom-ident
          (gen/one-of [(gen/return "")
            gen-nonprop-integer]))))]
    [100
      (gen/return "none")]]))

(def gen-nonprop-page-margin-box-type
  (gen/frequency [
    [100
      (gen/return "@top-left-corner")]
    [100
      (gen/return "@top-left")]
    [100
      (gen/return "@top-center")]
    [100
      (gen/return "@top-right")]
    [100
      (gen/return "@top-right-corner")]
    [100
      (gen/return "@bottom-left-corner")]
    [100
      (gen/return "@bottom-left")]
    [100
      (gen/return "@bottom-center")]
    [100
      (gen/return "@bottom-right")]
    [100
      (gen/return "@bottom-right-corner")]
    [100
      (gen/return "@left-top")]
    [100
      (gen/return "@left-middle")]
    [100
      (gen/return "@left-bottom")]
    [100
      (gen/return "@right-top")]
    [100
      (gen/return "@right-middle")]
    [100
      (gen/return "@right-bottom")]]))

(def gen-prop-opacity
  gen-nonprop-number)

(def gen-prop-grid-auto-rows
  (gen/such-that not-empty (gen/vector
    gen-nonprop-track-size)))

(def gen-prop-column-rule-color
  gen-nonprop-color)

(def gen-func-image
  (gen/tuple
    (gen/return "image(")
    (gen/tuple
      (gen/one-of [(gen/return "")
        (gen/frequency [
          [100
            gen-nonprop-image]
          [100
            gen-nonprop-string]])])
      (gen/return ",")
      (gen/one-of [(gen/return "")
        gen-nonprop-color]))
    (gen/return ")")))

(def gen-prop-border-left-width
  gen-nonprop-br-width)

(def gen-prop-grid-template-areas
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/such-that not-empty (gen/vector
        gen-nonprop-string))]]))

(def gen-prop-box-shadow
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-shadow)))]]))

(def gen-prop-filter
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-filter-function-list]]))

(def gen-prop--moz-window-shadow
  (gen/frequency [
    [100
      (gen/return "default")]
    [100
      (gen/return "menu")]
    [100
      (gen/return "tooltip")]
    [100
      (gen/return "sheet")]
    [100
      (gen/return "none")]]))

(def gen-prop-line-height
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      gen-nonprop-number]
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-prop--moz-float-edge
  (gen/frequency [
    [100
      (gen/return "border-box")]
    [100
      (gen/return "content-box")]
    [100
      (gen/return "margin-box")]
    [100
      (gen/return "padding-box")]]))

(def gen-prop-border-image-source
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-image]]))

(def gen-prop--moz-text-blink
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "blink")]]))

(def gen-prop-perspective
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-length]]))

(def gen-prop-grid-gap
  (gen/tuple
    gen-nonprop-grid-row-gap
    (gen/one-of [(gen/return "")
      gen-nonprop-grid-column-gap])))

(def gen-prop--moz-binding
  (gen/frequency [
    [100
      gen-nonprop-url]
    [100
      (gen/return "none")]]))

(def gen-nonprop-bg-layer
  (gen/tuple
    (gen/let [cnt (gen/choose 1 2)
              lst (gen/tuple 
                    gen-nonprop-bg-image
                    gen-nonprop-position)]
      (take cnt (shuffle lst)))
    (gen/let [cnt (gen/choose 1 4)
              lst (gen/tuple 
                    (gen/one-of [(gen/return "")
                      (gen/tuple
                        (gen/return "/")
                        gen-nonprop-bg-size)])
                    gen-nonprop-repeat-style
                    gen-nonprop-attachment
                    (gen/vector 
                      gen-nonprop-box
                      1 2))]
      (take cnt (shuffle lst)))))

(def gen-prop-mask-composite
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-compositing-operator))))

(def gen-prop--moz-appearance
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "button")]
    [100
      (gen/return "button-arrow-down")]
    [100
      (gen/return "button-arrow-next")]
    [100
      (gen/return "button-arrow-previous")]
    [100
      (gen/return "button-arrow-up")]
    [100
      (gen/return "button-bevel")]
    [100
      (gen/return "button-focus")]
    [100
      (gen/return "caret")]
    [100
      (gen/return "checkbox")]
    [100
      (gen/return "checkbox-container")]
    [100
      (gen/return "checkbox-label")]
    [100
      (gen/return "checkmenuitem")]
    [100
      (gen/return "dualbutton")]
    [100
      (gen/return "groupbox")]
    [100
      (gen/return "listbox")]
    [100
      (gen/return "listitem")]
    [100
      (gen/return "menuarrow")]
    [100
      (gen/return "menubar")]
    [100
      (gen/return "menucheckbox")]
    [100
      (gen/return "menuimage")]
    [100
      (gen/return "menuitem")]
    [100
      (gen/return "menuitemtext")]
    [100
      (gen/return "menulist")]
    [100
      (gen/return "menulist-button")]
    [100
      (gen/return "menulist-text")]
    [100
      (gen/return "menulist-textfield")]
    [100
      (gen/return "menupopup")]
    [100
      (gen/return "menuradio")]
    [100
      (gen/return "menuseparator")]
    [100
      (gen/return "meterbar")]
    [100
      (gen/return "meterchunk")]
    [100
      (gen/return "progressbar")]
    [100
      (gen/return "progressbar-vertical")]
    [100
      (gen/return "progresschunk")]
    [100
      (gen/return "progresschunk-vertical")]
    [100
      (gen/return "radio")]
    [100
      (gen/return "radio-container")]
    [100
      (gen/return "radio-label")]
    [100
      (gen/return "radiomenuitem")]
    [100
      (gen/return "range")]
    [100
      (gen/return "range-thumb")]
    [100
      (gen/return "resizer")]
    [100
      (gen/return "resizerpanel")]
    [100
      (gen/return "scale-horizontal")]
    [100
      (gen/return "scalethumbend")]
    [100
      (gen/return "scalethumb-horizontal")]
    [100
      (gen/return "scalethumbstart")]
    [100
      (gen/return "scalethumbtick")]
    [100
      (gen/return "scalethumb-vertical")]
    [100
      (gen/return "scale-vertical")]
    [100
      (gen/return "scrollbarbutton-down")]
    [100
      (gen/return "scrollbarbutton-left")]
    [100
      (gen/return "scrollbarbutton-right")]
    [100
      (gen/return "scrollbarbutton-up")]
    [100
      (gen/return "scrollbarthumb-horizontal")]
    [100
      (gen/return "scrollbarthumb-vertical")]
    [100
      (gen/return "scrollbartrack-horizontal")]
    [100
      (gen/return "scrollbartrack-vertical")]
    [100
      (gen/return "searchfield")]
    [100
      (gen/return "separator")]
    [100
      (gen/return "sheet")]
    [100
      (gen/return "spinner")]
    [100
      (gen/return "spinner-downbutton")]
    [100
      (gen/return "spinner-textfield")]
    [100
      (gen/return "spinner-upbutton")]
    [100
      (gen/return "splitter")]
    [100
      (gen/return "statusbar")]
    [100
      (gen/return "statusbarpanel")]
    [100
      (gen/return "tab")]
    [100
      (gen/return "tabpanel")]
    [100
      (gen/return "tabpanels")]
    [100
      (gen/return "tab-scroll-arrow-back")]
    [100
      (gen/return "tab-scroll-arrow-forward")]
    [100
      (gen/return "textfield")]
    [100
      (gen/return "textfield-multiline")]
    [100
      (gen/return "toolbar")]
    [100
      (gen/return "toolbarbutton")]
    [100
      (gen/return "toolbarbutton-dropdown")]
    [100
      (gen/return "toolbargripper")]
    [100
      (gen/return "toolbox")]
    [100
      (gen/return "tooltip")]
    [100
      (gen/return "treeheader")]
    [100
      (gen/return "treeheadercell")]
    [100
      (gen/return "treeheadersortarrow")]
    [100
      (gen/return "treeitem")]
    [100
      (gen/return "treeline")]
    [100
      (gen/return "treetwisty")]
    [100
      (gen/return "treetwistyopen")]
    [100
      (gen/return "treeview")]
    [100
      (gen/return "-moz-mac-unified-toolbar")]
    [100
      (gen/return "-moz-win-borderless-glass")]
    [100
      (gen/return "-moz-win-browsertabbar-toolbox")]
    [100
      (gen/return "-moz-win-communicationstext")]
    [100
      (gen/return "-moz-win-communications-toolbox")]
    [100
      (gen/return "-moz-win-exclude-glass")]
    [100
      (gen/return "-moz-win-glass")]
    [100
      (gen/return "-moz-win-mediatext")]
    [100
      (gen/return "-moz-win-media-toolbox")]
    [100
      (gen/return "-moz-window-button-box")]
    [100
      (gen/return "-moz-window-button-box-maximized")]
    [100
      (gen/return "-moz-window-button-close")]
    [100
      (gen/return "-moz-window-button-maximize")]
    [100
      (gen/return "-moz-window-button-minimize")]
    [100
      (gen/return "-moz-window-button-restore")]
    [100
      (gen/return "-moz-window-frame-bottom")]
    [100
      (gen/return "-moz-window-frame-left")]
    [100
      (gen/return "-moz-window-frame-right")]
    [100
      (gen/return "-moz-window-titlebar")]
    [100
      (gen/return "-moz-window-titlebar-maximized")]]))

(def gen-prop-font-style
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "italic")]
    [100
      (gen/return "oblique")]]))

(def gen-prop-text-transform
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "capitalize")]
    [100
      (gen/return "uppercase")]
    [100
      (gen/return "lowercase")]
    [100
      (gen/return "full-width")]]))

(def gen-prop-block-size
  gen-nonprop-width)

(def gen-prop-resize
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "both")]
    [100
      (gen/return "horizontal")]
    [100
      (gen/return "vertical")]]))

(def gen-prop-border-style
  (gen/vector 
    gen-nonprop-br-style
    1 4))

(def gen-prop-text-decoration-line
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/let [cnt (gen/choose 1 4)
                lst (gen/tuple 
                      (gen/return "underline")
                      (gen/return "overline")
                      (gen/return "line-through")
                      (gen/return "blink"))]
        (take cnt (shuffle lst)))]]))

(def gen-prop-justify-content
  (gen/frequency [
    [100
      (gen/return "flex-start")]
    [100
      (gen/return "flex-end")]
    [100
      (gen/return "center")]
    [100
      (gen/return "space-between")]
    [100
      (gen/return "space-around")]
    [100
      (gen/return "space-evenly")]]))

(def gen-prop-border-block-end-color
  gen-nonprop-color)

(def gen-prop-animation-duration
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-time))))

(def gen-prop-column-rule
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-column-rule-width
                  gen-nonprop-column-rule-style
                  gen-nonprop-column-rule-color)]
    (take cnt (shuffle lst))))

(def gen-prop-font-family
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    (gen/frequency [
      [100
        gen-nonprop-family-name]
      [100
        gen-nonprop-generic-family]])))))

(def gen-prop-transform-style
  (gen/frequency [
    [100
      (gen/return "flat")]
    [100
      (gen/return "preserve-3d")]]))

(def gen-prop-box-flex
  gen-nonprop-number)

(def gen-prop-column-span
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "all")]]))

(def gen-prop-scroll-snap-type-x
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "mandatory")]
    [100
      (gen/return "proximity")]]))

(def gen-prop-azimuth
  (gen/frequency [
    [100
      gen-nonprop-angle]
    [100
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      (gen/frequency [
                        [100
                          (gen/return "left-side")]
                        [100
                          (gen/return "far-left")]
                        [100
                          (gen/return "left")]
                        [100
                          (gen/return "center-left")]
                        [100
                          (gen/return "center")]
                        [100
                          (gen/return "center-right")]
                        [100
                          (gen/return "right")]
                        [100
                          (gen/return "far-right")]
                        [100
                          (gen/return "right-side")]])
                      (gen/return "behind"))]
        (take cnt (shuffle lst)))]
    [100
      (gen/return "leftwards")]
    [100
      (gen/return "rightwards")]]))

(def gen-nonprop-composite-style
  (gen/frequency [
    [100
      (gen/return "clear")]
    [100
      (gen/return "copy")]
    [100
      (gen/return "source-over")]
    [100
      (gen/return "source-in")]
    [100
      (gen/return "source-out")]
    [100
      (gen/return "source-atop")]
    [100
      (gen/return "destination-over")]
    [100
      (gen/return "destination-in")]
    [100
      (gen/return "destination-out")]
    [100
      (gen/return "destination-atop")]
    [100
      (gen/return "xor")]]))

(def gen-prop--webkit-mask-composite
  (gen/tuple
    gen-nonprop-composite-style
    (gen/vector
      (gen/tuple
        (gen/return ",")
        gen-nonprop-composite-style))))

(def gen-prop-border-inline-end-color
  gen-nonprop-color)

(def gen-prop-border-bottom
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-br-width
                  gen-nonprop-br-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-nonprop-mf-plain
  (gen/tuple
    gen-nonprop-mf-name
    (gen/return ":")
    gen-nonprop-mf-value))

(def gen-prop-order
  gen-nonprop-integer)

(def gen-prop-backdrop-filter
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      gen-nonprop-filter-function-list]]))

(def gen-prop-break-after
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "avoid")]
    [100
      (gen/return "avoid-page")]
    [100
      (gen/return "page")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "recto")]
    [100
      (gen/return "verso")]
    [100
      (gen/return "avoid-column")]
    [100
      (gen/return "column")]
    [100
      (gen/return "avoid-region")]
    [100
      (gen/return "region")]]))

(def gen-nonprop-page-margin-box
  (gen/tuple
    gen-nonprop-page-margin-box-type
    (gen/tuple
      (gen/return "{")
      gen-nonprop-declaration-list
      (gen/return "}"))))

(def gen-prop-list-style-type
  (gen/frequency [
    [100
      gen-nonprop-counter-style]
    [100
      gen-nonprop-string]
    [100
      (gen/return "none")]]))

(def gen-prop--webkit-border-before-style
  gen-nonprop-border-style)

(def gen-nonprop-viewport-length
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-length-percentage]]))

(def gen-prop-margin-inline-start
  gen-nonprop-margin-left)

(def gen-prop--moz-stack-sizing
  (gen/frequency [
    [100
      (gen/return "ignore")]
    [100
      (gen/return "stretch-to-fit")]]))

(def gen-prop-border-left-style
  gen-nonprop-br-style)

(def gen-prop-grid-auto-flow
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  (gen/frequency [
                    [100
                      (gen/return "row")]
                    [100
                      (gen/return "column")]])
                  (gen/return "dense"))]
    (take cnt (shuffle lst))))

(def gen-prop-font-stretch
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "ultra-condensed")]
    [100
      (gen/return "extra-condensed")]
    [100
      (gen/return "condensed")]
    [100
      (gen/return "semi-condensed")]
    [100
      (gen/return "semi-expanded")]
    [100
      (gen/return "expanded")]
    [100
      (gen/return "extra-expanded")]
    [100
      (gen/return "ultra-expanded")]]))

(def gen-func-radial-gradient
  (gen/tuple
    (gen/return "radial-gradient(")
    (gen/one-of [(gen/return "")
      (gen/let [cnt (gen/choose 1 2)
                lst (gen/tuple 
                      gen-nonprop-ending-shape
                      gen-nonprop-size)]
        (take cnt (shuffle lst)))])
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "at")
        gen-nonprop-position)])
    (gen/return ",")
    gen-nonprop-color-stop-list
    (gen/return ")")))

(def gen-nonprop-gradient
  (gen/frequency [
    [100
      gen-func-linear-gradient]
    [100
      gen-func-repeating-linear-gradient]
    [100
      gen-func-radial-gradient]
    [100
      gen-func-repeating-radial-gradient]]))

(def gen-prop-offset-anchor
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      gen-nonprop-position]]))

(def gen-prop--webkit-touch-callout
  (gen/frequency [
    [100
      (gen/return "default")]
    [100
      (gen/return "none")]]))

(def gen-prop-padding
  (gen/vector 
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-percentage]])
    1 4))

(def gen-prop-backface-visibility
  (gen/frequency [
    [100
      (gen/return "visible")]
    [100
      (gen/return "hidden")]]))

(def gen-prop-display-list
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/return "list-item")]]))

(def gen-prop--moz-force-broken-image-icon
  gen-nonprop-integer)

(def gen-prop-marker-offset
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      (gen/return "auto")]]))

(def gen-prop-border-inline-start-style
  gen-nonprop-border-style)

(def gen-prop-word-spacing
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      gen-nonprop-length-percentage]]))

(def gen-prop-text-decoration
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-text-decoration-line
                  gen-nonprop-text-decoration-style
                  gen-nonprop-text-decoration-color)]
    (take cnt (shuffle lst))))

(def gen-prop-grid-row
  (gen/tuple
    gen-nonprop-grid-line
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        gen-nonprop-grid-line)])))

(def gen-prop-padding-left
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-prop--webkit-tap-highlight-color
  gen-nonprop-color)

(def gen-prop-border-bottom-width
  gen-nonprop-br-width)

(def gen-prop-border-right-width
  gen-nonprop-br-width)

(def gen-prop-border-inline-start-width
  gen-nonprop-border-width)

(def gen-nonprop-mf-boolean
  gen-nonprop-mf-name)

(def gen-func-minmax
  (gen/tuple
    (gen/return "minmax(")
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-percentage]
      [100
        gen-nonprop-flex]
      [100
        (gen/return "min-content")]
      [100
        (gen/return "max-content")]
      [100
        (gen/return "auto")]])
    (gen/return ",")
    (gen/frequency [
      [100
        gen-nonprop-length]
      [100
        gen-nonprop-percentage]
      [100
        gen-nonprop-flex]
      [100
        (gen/return "min-content")]
      [100
        (gen/return "max-content")]
      [100
        (gen/return "auto")]])
    (gen/return ")")))

(def gen-prop-padding-bottom
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-box-sizing
  (gen/frequency [
    [100
      (gen/return "content-box")]
    [100
      (gen/return "border-box")]]))

(def gen-prop-box-direction
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "reverse")]
    [100
      (gen/return "inherit")]]))

(def gen-prop-animation-iteration-count
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-animation-iteration-count))))

(def gen-prop-transition-timing-function
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-single-transition-timing-function))))

(def gen-nonprop-angle-percentage
  (gen/frequency [
    [100
      gen-nonprop-angle]
    [100
      gen-nonprop-percentage]]))

(def gen-prop--webkit-text-fill-color
  gen-nonprop-color)

(def gen-prop-background-position
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-position))))

(def gen-prop-border-radius
  (gen/tuple
    (gen/vector 
      gen-nonprop-length-percentage
      1 4)
    (gen/one-of [(gen/return "")
      (gen/tuple
        (gen/return "/")
        (gen/vector 
          gen-nonprop-length-percentage
          1 4))])))

(def gen-prop--moz-border-left-colors
  (gen/frequency [
    [100
      (gen/tuple
        (gen/vector
          gen-nonprop-color)
        gen-nonprop-color)]
    [100
      (gen/return "none")]]))

(def gen-prop-grid-row-end
  gen-nonprop-grid-line)

(def gen-prop-box-flex-group
  gen-nonprop-integer)

(def gen-prop--moz-outline-radius-topright
  gen-nonprop-outline-radius)

(def gen-prop-scroll-behavior
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "smooth")]]))

(def gen-prop-min-height
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]
    [100
      (gen/return "auto")]
    [100
      (gen/return "max-content")]
    [100
      (gen/return "min-content")]
    [100
      (gen/return "fit-content")]
    [100
      (gen/return "fill-available")]]))

(def gen-prop-box-pack
  (gen/frequency [
    [100
      (gen/return "start")]
    [100
      (gen/return "center")]
    [100
      (gen/return "end")]
    [100
      (gen/return "justify")]]))

(def gen-prop-border-inline-end-style
  gen-nonprop-border-style)

(def gen-prop-text-align-last
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "start")]
    [100
      (gen/return "end")]
    [100
      (gen/return "left")]
    [100
      (gen/return "right")]
    [100
      (gen/return "center")]
    [100
      (gen/return "justify")]]))

(def gen-prop-text-emphasis-position
  (gen/let [lst (gen/tuple 
                  (gen/frequency [
                    [100
                      (gen/return "over")]
                    [100
                      (gen/return "under")]])
                  (gen/frequency [
                    [100
                      (gen/return "right")]
                    [100
                      (gen/return "left")]]))]
    (shuffle lst)))

(def gen-prop-columns
  (gen/let [cnt (gen/choose 1 2)
            lst (gen/tuple 
                  gen-nonprop-column-width
                  gen-nonprop-column-count)]
    (take cnt (shuffle lst))))

(def gen-prop-page-break-inside
  (gen/frequency [
    [100
      (gen/return "auto")]
    [100
      (gen/return "avoid")]]))

(def gen-prop-list-style-image
  (gen/frequency [
    [100
      gen-nonprop-url]
    [100
      (gen/return "none")]]))

(def gen-prop-box-lines
  (gen/frequency [
    [100
      (gen/return "single")]
    [100
      (gen/return "multiple")]]))

(def gen-prop-text-shadow
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-shadow-t)))]]))

(def gen-nonprop-final-bg-layer
  (gen/tuple
    (gen/let [cnt (gen/choose 1 2)
              lst (gen/tuple 
                    gen-nonprop-bg-image
                    gen-nonprop-position)]
      (take cnt (shuffle lst)))
    (gen/let [cnt (gen/choose 1 6)
              lst (gen/tuple 
                    (gen/one-of [(gen/return "")
                      (gen/tuple
                        (gen/return "/")
                        gen-nonprop-bg-size)])
                    gen-nonprop-repeat-style
                    gen-nonprop-attachment
                    gen-nonprop-box
                    gen-nonprop-box
                    gen-nonprop-background-color)]
      (take cnt (shuffle lst)))))

(def gen-prop-align-items
  (gen/frequency [
    [100
      (gen/return "flex-start")]
    [100
      (gen/return "flex-end")]
    [100
      (gen/return "center")]
    [100
      (gen/return "baseline")]
    [100
      (gen/return "stretch")]]))

(def gen-prop-padding-top
  (gen/frequency [
    [100
      gen-nonprop-length]
    [100
      gen-nonprop-percentage]]))

(def gen-prop-box-orient
  (gen/frequency [
    [100
      (gen/return "horizontal")]
    [100
      (gen/return "vertical")]
    [100
      (gen/return "inline-axis")]
    [100
      (gen/return "block-axis")]
    [100
      (gen/return "inherit")]]))

(def gen-prop-background
  (gen/tuple
    (gen/vector
      (gen/tuple
        gen-nonprop-bg-layer
        (gen/return ",")))
    gen-nonprop-final-bg-layer))

(def gen-prop-border-block-start-width
  gen-nonprop-border-width)

(def gen-prop-ruby-position
  (gen/frequency [
    [100
      (gen/return "over")]
    [100
      (gen/return "under")]
    [100
      (gen/return "inter-character")]]))

(def gen-prop-border-block-start
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-border-width
                  gen-nonprop-border-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-outline-color
  (gen/frequency [
    [100
      gen-nonprop-color]
    [100
      (gen/return "invert")]]))

(def gen-prop--webkit-mask
  (gen/tuple
    gen-nonprop-mask-image
    (gen/vector
      (gen/let [cnt (gen/choose 1 5)
                lst (gen/tuple 
                      gen-nonprop-mask-repeat
                      gen-nonprop-mask-attachment
                      gen-nonprop-mask-position
                      gen-nonprop-mask-origin
                      gen-nonprop-mask-clip)]
        (take cnt (shuffle lst))))))

(def gen-prop-border-block-end
  (gen/let [cnt (gen/choose 1 3)
            lst (gen/tuple 
                  gen-nonprop-border-width
                  gen-nonprop-border-style
                  gen-nonprop-color)]
    (take cnt (shuffle lst))))

(def gen-prop-initial-letter
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/tuple
        gen-nonprop-number
        (gen/one-of [(gen/return "")
          gen-nonprop-integer]))]]))

(def gen-prop-margin-block-start
  gen-nonprop-margin-left)

(def gen-prop--moz-user-focus
  (gen/frequency [
    [100
      (gen/return "ignore")]
    [100
      (gen/return "normal")]
    [100
      (gen/return "select-after")]
    [100
      (gen/return "select-before")]
    [100
      (gen/return "select-menu")]
    [100
      (gen/return "select-same")]
    [100
      (gen/return "select-all")]
    [100
      (gen/return "none")]]))

(def gen-prop--webkit-mask-attachment
  (gen/tuple
    gen-nonprop-attachment
    (gen/vector
      (gen/tuple
        (gen/return ",")
        gen-nonprop-attachment))))

(def gen-prop-border-bottom-color
  gen-nonprop-color)

(def gen-prop-background-origin
  (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
    gen-nonprop-box))))

(def gen-prop-word-break
  (gen/frequency [
    [100
      (gen/return "normal")]
    [100
      (gen/return "break-all")]
    [100
      (gen/return "keep-all")]]))

(def gen-prop-transition-property
  (gen/frequency [
    [100
      (gen/return "none")]
    [100
      (gen/fmap #(interpose " , " %) (gen/such-that not-empty (gen/vector
        gen-nonprop-single-transition-property)))]]))

(def gen-prop--webkit-text-stroke-width
  gen-nonprop-length)

(def gen-prop-margin-block-end
  gen-nonprop-margin-left)

(def gen-css-assignment
  (gen/frequency [
    [100 (gen/tuple (gen/return "margin-block-end: ") gen-prop-margin-block-end)]
    [100 (gen/tuple (gen/return "-webkit-text-stroke-width: ") gen-prop--webkit-text-stroke-width)]
    [100 (gen/tuple (gen/return "transition-property: ") gen-prop-transition-property)]
    [100 (gen/tuple (gen/return "word-break: ") gen-prop-word-break)]
    [100 (gen/tuple (gen/return "background-origin: ") gen-prop-background-origin)]
    [100 (gen/tuple (gen/return "border-bottom-color: ") gen-prop-border-bottom-color)]
    [100 (gen/tuple (gen/return "-webkit-mask-attachment: ") gen-prop--webkit-mask-attachment)]
    [100 (gen/tuple (gen/return "-moz-user-focus: ") gen-prop--moz-user-focus)]
    [100 (gen/tuple (gen/return "margin-block-start: ") gen-prop-margin-block-start)]
    [100 (gen/tuple (gen/return "initial-letter: ") gen-prop-initial-letter)]
    [100 (gen/tuple (gen/return "border-block-end: ") gen-prop-border-block-end)]
    [100 (gen/tuple (gen/return "-webkit-mask: ") gen-prop--webkit-mask)]
    [100 (gen/tuple (gen/return "outline-color: ") gen-prop-outline-color)]
    [100 (gen/tuple (gen/return "border-block-start: ") gen-prop-border-block-start)]
    [100 (gen/tuple (gen/return "ruby-position: ") gen-prop-ruby-position)]
    [100 (gen/tuple (gen/return "border-block-start-width: ") gen-prop-border-block-start-width)]
    [100 (gen/tuple (gen/return "background: ") gen-prop-background)]
    [100 (gen/tuple (gen/return "box-orient: ") gen-prop-box-orient)]
    [100 (gen/tuple (gen/return "padding-top: ") gen-prop-padding-top)]
    [100 (gen/tuple (gen/return "align-items: ") gen-prop-align-items)]
    [100 (gen/tuple (gen/return "text-shadow: ") gen-prop-text-shadow)]
    [100 (gen/tuple (gen/return "box-lines: ") gen-prop-box-lines)]
    [100 (gen/tuple (gen/return "list-style-image: ") gen-prop-list-style-image)]
    [100 (gen/tuple (gen/return "page-break-inside: ") gen-prop-page-break-inside)]
    [100 (gen/tuple (gen/return "columns: ") gen-prop-columns)]
    [100 (gen/tuple (gen/return "text-emphasis-position: ") gen-prop-text-emphasis-position)]
    [100 (gen/tuple (gen/return "text-align-last: ") gen-prop-text-align-last)]
    [100 (gen/tuple (gen/return "border-inline-end-style: ") gen-prop-border-inline-end-style)]
    [100 (gen/tuple (gen/return "box-pack: ") gen-prop-box-pack)]
    [100 (gen/tuple (gen/return "min-height: ") gen-prop-min-height)]
    [100 (gen/tuple (gen/return "scroll-behavior: ") gen-prop-scroll-behavior)]
    [100 (gen/tuple (gen/return "-moz-outline-radius-topright: ") gen-prop--moz-outline-radius-topright)]
    [100 (gen/tuple (gen/return "box-flex-group: ") gen-prop-box-flex-group)]
    [100 (gen/tuple (gen/return "grid-row-end: ") gen-prop-grid-row-end)]
    [100 (gen/tuple (gen/return "-moz-border-left-colors: ") gen-prop--moz-border-left-colors)]
    [100 (gen/tuple (gen/return "border-radius: ") gen-prop-border-radius)]
    [100 (gen/tuple (gen/return "background-position: ") gen-prop-background-position)]
    [100 (gen/tuple (gen/return "-webkit-text-fill-color: ") gen-prop--webkit-text-fill-color)]
    [100 (gen/tuple (gen/return "transition-timing-function: ") gen-prop-transition-timing-function)]
    [100 (gen/tuple (gen/return "animation-iteration-count: ") gen-prop-animation-iteration-count)]
    [100 (gen/tuple (gen/return "box-direction: ") gen-prop-box-direction)]
    [100 (gen/tuple (gen/return "box-sizing: ") gen-prop-box-sizing)]
    [100 (gen/tuple (gen/return "padding-bottom: ") gen-prop-padding-bottom)]
    [100 (gen/tuple (gen/return "border-inline-start-width: ") gen-prop-border-inline-start-width)]
    [100 (gen/tuple (gen/return "border-right-width: ") gen-prop-border-right-width)]
    [100 (gen/tuple (gen/return "border-bottom-width: ") gen-prop-border-bottom-width)]
    [100 (gen/tuple (gen/return "-webkit-tap-highlight-color: ") gen-prop--webkit-tap-highlight-color)]
    [100 (gen/tuple (gen/return "padding-left: ") gen-prop-padding-left)]
    [100 (gen/tuple (gen/return "grid-row: ") gen-prop-grid-row)]
    [100 (gen/tuple (gen/return "text-decoration: ") gen-prop-text-decoration)]
    [100 (gen/tuple (gen/return "word-spacing: ") gen-prop-word-spacing)]
    [100 (gen/tuple (gen/return "border-inline-start-style: ") gen-prop-border-inline-start-style)]
    [100 (gen/tuple (gen/return "marker-offset: ") gen-prop-marker-offset)]
    [100 (gen/tuple (gen/return "-moz-force-broken-image-icon: ") gen-prop--moz-force-broken-image-icon)]
    [100 (gen/tuple (gen/return "display-list: ") gen-prop-display-list)]
    [100 (gen/tuple (gen/return "backface-visibility: ") gen-prop-backface-visibility)]
    [100 (gen/tuple (gen/return "padding: ") gen-prop-padding)]
    [100 (gen/tuple (gen/return "-webkit-touch-callout: ") gen-prop--webkit-touch-callout)]
    [100 (gen/tuple (gen/return "offset-anchor: ") gen-prop-offset-anchor)]
    [100 (gen/tuple (gen/return "font-stretch: ") gen-prop-font-stretch)]
    [100 (gen/tuple (gen/return "grid-auto-flow: ") gen-prop-grid-auto-flow)]
    [100 (gen/tuple (gen/return "border-left-style: ") gen-prop-border-left-style)]
    [100 (gen/tuple (gen/return "-moz-stack-sizing: ") gen-prop--moz-stack-sizing)]
    [100 (gen/tuple (gen/return "margin-inline-start: ") gen-prop-margin-inline-start)]
    [100 (gen/tuple (gen/return "-webkit-border-before-style: ") gen-prop--webkit-border-before-style)]
    [100 (gen/tuple (gen/return "list-style-type: ") gen-prop-list-style-type)]
    [100 (gen/tuple (gen/return "break-after: ") gen-prop-break-after)]
    [100 (gen/tuple (gen/return "backdrop-filter: ") gen-prop-backdrop-filter)]
    [100 (gen/tuple (gen/return "order: ") gen-prop-order)]
    [100 (gen/tuple (gen/return "border-bottom: ") gen-prop-border-bottom)]
    [100 (gen/tuple (gen/return "border-inline-end-color: ") gen-prop-border-inline-end-color)]
    [100 (gen/tuple (gen/return "-webkit-mask-composite: ") gen-prop--webkit-mask-composite)]
    [100 (gen/tuple (gen/return "azimuth: ") gen-prop-azimuth)]
    [100 (gen/tuple (gen/return "scroll-snap-type-x: ") gen-prop-scroll-snap-type-x)]
    [100 (gen/tuple (gen/return "column-span: ") gen-prop-column-span)]
    [100 (gen/tuple (gen/return "box-flex: ") gen-prop-box-flex)]
    [100 (gen/tuple (gen/return "transform-style: ") gen-prop-transform-style)]
    [100 (gen/tuple (gen/return "font-family: ") gen-prop-font-family)]
    [100 (gen/tuple (gen/return "column-rule: ") gen-prop-column-rule)]
    [100 (gen/tuple (gen/return "animation-duration: ") gen-prop-animation-duration)]
    [100 (gen/tuple (gen/return "border-block-end-color: ") gen-prop-border-block-end-color)]
    [100 (gen/tuple (gen/return "justify-content: ") gen-prop-justify-content)]
    [100 (gen/tuple (gen/return "text-decoration-line: ") gen-prop-text-decoration-line)]
    [100 (gen/tuple (gen/return "border-style: ") gen-prop-border-style)]
    [100 (gen/tuple (gen/return "resize: ") gen-prop-resize)]
    [100 (gen/tuple (gen/return "block-size: ") gen-prop-block-size)]
    [100 (gen/tuple (gen/return "text-transform: ") gen-prop-text-transform)]
    [100 (gen/tuple (gen/return "font-style: ") gen-prop-font-style)]
    [100 (gen/tuple (gen/return "-moz-appearance: ") gen-prop--moz-appearance)]
    [100 (gen/tuple (gen/return "mask-composite: ") gen-prop-mask-composite)]
    [100 (gen/tuple (gen/return "-moz-binding: ") gen-prop--moz-binding)]
    [100 (gen/tuple (gen/return "grid-gap: ") gen-prop-grid-gap)]
    [100 (gen/tuple (gen/return "perspective: ") gen-prop-perspective)]
    [100 (gen/tuple (gen/return "-moz-text-blink: ") gen-prop--moz-text-blink)]
    [100 (gen/tuple (gen/return "border-image-source: ") gen-prop-border-image-source)]
    [100 (gen/tuple (gen/return "-moz-float-edge: ") gen-prop--moz-float-edge)]
    [100 (gen/tuple (gen/return "line-height: ") gen-prop-line-height)]
    [100 (gen/tuple (gen/return "-moz-window-shadow: ") gen-prop--moz-window-shadow)]
    [100 (gen/tuple (gen/return "filter: ") gen-prop-filter)]
    [100 (gen/tuple (gen/return "box-shadow: ") gen-prop-box-shadow)]
    [100 (gen/tuple (gen/return "grid-template-areas: ") gen-prop-grid-template-areas)]
    [100 (gen/tuple (gen/return "border-left-width: ") gen-prop-border-left-width)]
    [100 (gen/tuple (gen/return "column-rule-color: ") gen-prop-column-rule-color)]
    [100 (gen/tuple (gen/return "grid-auto-rows: ") gen-prop-grid-auto-rows)]
    [100 (gen/tuple (gen/return "opacity: ") gen-prop-opacity)]
    [100 (gen/tuple (gen/return "counter-increment: ") gen-prop-counter-increment)]
    [100 (gen/tuple (gen/return "-moz-user-modify: ") gen-prop--moz-user-modify)]
    [100 (gen/tuple (gen/return "initial-letter-align: ") gen-prop-initial-letter-align)]
    [100 (gen/tuple (gen/return "min-block-size: ") gen-prop-min-block-size)]
    [100 (gen/tuple (gen/return "border-top-width: ") gen-prop-border-top-width)]
    [100 (gen/tuple (gen/return "image-orientation: ") gen-prop-image-orientation)]
    [100 (gen/tuple (gen/return "mask-size: ") gen-prop-mask-size)]
    [100 (gen/tuple (gen/return "border-image-repeat: ") gen-prop-border-image-repeat)]
    [100 (gen/tuple (gen/return "float: ") gen-prop-float)]
    [100 (gen/tuple (gen/return "font-language-override: ") gen-prop-font-language-override)]
    [100 (gen/tuple (gen/return "scroll-snap-destination: ") gen-prop-scroll-snap-destination)]
    [100 (gen/tuple (gen/return "grid-row-gap: ") gen-prop-grid-row-gap)]
    [100 (gen/tuple (gen/return "unicode-bidi: ") gen-prop-unicode-bidi)]
    [100 (gen/tuple (gen/return "transition: ") gen-prop-transition)]
    [100 (gen/tuple (gen/return "column-rule-width: ") gen-prop-column-rule-width)]
    [100 (gen/tuple (gen/return "offset-block-start: ") gen-prop-offset-block-start)]
    [100 (gen/tuple (gen/return "offset-distance: ") gen-prop-offset-distance)]
    [100 (gen/tuple (gen/return "mask-clip: ") gen-prop-mask-clip)]
    [100 (gen/tuple (gen/return "animation-direction: ") gen-prop-animation-direction)]
    [100 (gen/tuple (gen/return "offset-block-end: ") gen-prop-offset-block-end)]
    [100 (gen/tuple (gen/return "border-image-outset: ") gen-prop-border-image-outset)]
    [100 (gen/tuple (gen/return "font-variation-settings: ") gen-prop-font-variation-settings)]
    [100 (gen/tuple (gen/return "min-inline-size: ") gen-prop-min-inline-size)]
    [100 (gen/tuple (gen/return "caption-side: ") gen-prop-caption-side)]
    [100 (gen/tuple (gen/return "orphans: ") gen-prop-orphans)]
    [100 (gen/tuple (gen/return "margin-inline-end: ") gen-prop-margin-inline-end)]
    [100 (gen/tuple (gen/return "border-bottom-style: ") gen-prop-border-bottom-style)]
    [100 (gen/tuple (gen/return "grid-row-start: ") gen-prop-grid-row-start)]
    [100 (gen/tuple (gen/return "ime-mode: ") gen-prop-ime-mode)]
    [100 (gen/tuple (gen/return "top: ") gen-prop-top)]
    [100 (gen/tuple (gen/return "image-rendering: ") gen-prop-image-rendering)]
    [100 (gen/tuple (gen/return "shape-image-threshold: ") gen-prop-shape-image-threshold)]
    [100 (gen/tuple (gen/return "animation-name: ") gen-prop-animation-name)]
    [100 (gen/tuple (gen/return "right: ") gen-prop-right)]
    [100 (gen/tuple (gen/return "z-index: ") gen-prop-z-index)]
    [100 (gen/tuple (gen/return "background-blend-mode: ") gen-prop-background-blend-mode)]
    [100 (gen/tuple (gen/return "letter-spacing: ") gen-prop-letter-spacing)]
    [100 (gen/tuple (gen/return "list-style: ") gen-prop-list-style)]
    [100 (gen/tuple (gen/return "left: ") gen-prop-left)]
    [100 (gen/tuple (gen/return "width: ") gen-prop-width)]
    [100 (gen/tuple (gen/return "will-change: ") gen-prop-will-change)]
    [100 (gen/tuple (gen/return "font-synthesis: ") gen-prop-font-synthesis)]
    [100 (gen/tuple (gen/return "flex-flow: ") gen-prop-flex-flow)]
    [100 (gen/tuple (gen/return "background-size: ") gen-prop-background-size)]
    [100 (gen/tuple (gen/return "box-suppress: ") gen-prop-box-suppress)]
    [100 (gen/tuple (gen/return "background-clip: ") gen-prop-background-clip)]
    [100 (gen/tuple (gen/return "scroll-snap-points-x: ") gen-prop-scroll-snap-points-x)]
    [100 (gen/tuple (gen/return "animation: ") gen-prop-animation)]
    [100 (gen/tuple (gen/return "overflow: ") gen-prop-overflow)]
    [100 (gen/tuple (gen/return "-webkit-mask-clip: ") gen-prop--webkit-mask-clip)]
    [100 (gen/tuple (gen/return "font-size-adjust: ") gen-prop-font-size-adjust)]
    [100 (gen/tuple (gen/return "-moz-image-region: ") gen-prop--moz-image-region)]
    [100 (gen/tuple (gen/return "padding-inline-end: ") gen-prop-padding-inline-end)]
    [100 (gen/tuple (gen/return "counter-reset: ") gen-prop-counter-reset)]
    [100 (gen/tuple (gen/return "column-gap: ") gen-prop-column-gap)]
    [100 (gen/tuple (gen/return "border-color: ") gen-prop-border-color)]
    [100 (gen/tuple (gen/return "-webkit-mask-position-x: ") gen-prop--webkit-mask-position-x)]
    [100 (gen/tuple (gen/return "vertical-align: ") gen-prop-vertical-align)]
    [100 (gen/tuple (gen/return "display-inside: ") gen-prop-display-inside)]
    [100 (gen/tuple (gen/return "border-width: ") gen-prop-border-width)]
    [100 (gen/tuple (gen/return "quotes: ") gen-prop-quotes)]
    [100 (gen/tuple (gen/return "scroll-snap-points-y: ") gen-prop-scroll-snap-points-y)]
    [100 (gen/tuple (gen/return "grid-area: ") gen-prop-grid-area)]
    [100 (gen/tuple (gen/return "border-spacing: ") gen-prop-border-spacing)]
    [100 (gen/tuple (gen/return "border-top-style: ") gen-prop-border-top-style)]
    [100 (gen/tuple (gen/return "text-underline-position: ") gen-prop-text-underline-position)]
    [100 (gen/tuple (gen/return "grid-template-rows: ") gen-prop-grid-template-rows)]
    [100 (gen/tuple (gen/return "object-position: ") gen-prop-object-position)]
    [100 (gen/tuple (gen/return "border-block-start-style: ") gen-prop-border-block-start-style)]
    [100 (gen/tuple (gen/return "-moz-outline-radius: ") gen-prop--moz-outline-radius)]
    [100 (gen/tuple (gen/return "border-block-end-style: ") gen-prop-border-block-end-style)]
    [100 (gen/tuple (gen/return "padding-block-start: ") gen-prop-padding-block-start)]
    [100 (gen/tuple (gen/return "animation-delay: ") gen-prop-animation-delay)]
    [100 (gen/tuple (gen/return "-webkit-box-reflect: ") gen-prop--webkit-box-reflect)]
    [100 (gen/tuple (gen/return "-moz-orient: ") gen-prop--moz-orient)]
    [100 (gen/tuple (gen/return "border-inline-start: ") gen-prop-border-inline-start)]
    [100 (gen/tuple (gen/return "border-collapse: ") gen-prop-border-collapse)]
    [100 (gen/tuple (gen/return "border-image-slice: ") gen-prop-border-image-slice)]
    [100 (gen/tuple (gen/return "flex-direction: ") gen-prop-flex-direction)]
    [100 (gen/tuple (gen/return "color: ") gen-prop-color)]
    [100 (gen/tuple (gen/return "offset-position: ") gen-prop-offset-position)]
    [100 (gen/tuple (gen/return "background-image: ") gen-prop-background-image)]
    [100 (gen/tuple (gen/return "font-variant-caps: ") gen-prop-font-variant-caps)]
    [100 (gen/tuple (gen/return "-webkit-text-stroke: ") gen-prop--webkit-text-stroke)]
    [100 (gen/tuple (gen/return "border-top-right-radius: ") gen-prop-border-top-right-radius)]
    [100 (gen/tuple (gen/return "border-inline-end-width: ") gen-prop-border-inline-end-width)]
    [100 (gen/tuple (gen/return "text-emphasis-color: ") gen-prop-text-emphasis-color)]
    [100 (gen/tuple (gen/return "text-indent: ") gen-prop-text-indent)]
    [100 (gen/tuple (gen/return "mix-blend-mode: ") gen-prop-mix-blend-mode)]
    [100 (gen/tuple (gen/return "max-height: ") gen-prop-max-height)]
    [100 (gen/tuple (gen/return "mask-repeat: ") gen-prop-mask-repeat)]
    [100 (gen/tuple (gen/return "offset: ") gen-prop-offset)]
    [100 (gen/tuple (gen/return "touch-action: ") gen-prop-touch-action)]
    [100 (gen/tuple (gen/return "word-wrap: ") gen-prop-word-wrap)]
    [100 (gen/tuple (gen/return "isolation: ") gen-prop-isolation)]
    [100 (gen/tuple (gen/return "transition-duration: ") gen-prop-transition-duration)]
    [100 (gen/tuple (gen/return "-moz-user-input: ") gen-prop--moz-user-input)]
    [100 (gen/tuple (gen/return "grid-auto-columns: ") gen-prop-grid-auto-columns)]
    [100 (gen/tuple (gen/return "grid-column-end: ") gen-prop-grid-column-end)]
    [100 (gen/tuple (gen/return "align-content: ") gen-prop-align-content)]
    [100 (gen/tuple (gen/return "border-bottom-right-radius: ") gen-prop-border-bottom-right-radius)]
    [100 (gen/tuple (gen/return "grid-template: ") gen-prop-grid-template)]
    [100 (gen/tuple (gen/return "-webkit-mask-image: ") gen-prop--webkit-mask-image)]
    [100 (gen/tuple (gen/return "widows: ") gen-prop-widows)]
    [100 (gen/tuple (gen/return "background-position-y: ") gen-prop-background-position-y)]
    [100 (gen/tuple (gen/return "font-size: ") gen-prop-font-size)]
    [100 (gen/tuple (gen/return "border-right-style: ") gen-prop-border-right-style)]
    [100 (gen/tuple (gen/return "animation-timing-function: ") gen-prop-animation-timing-function)]
    [100 (gen/tuple (gen/return "inline-size: ") gen-prop-inline-size)]
    [100 (gen/tuple (gen/return "offset-inline-end: ") gen-prop-offset-inline-end)]
    [100 (gen/tuple (gen/return "font-variant-position: ") gen-prop-font-variant-position)]
    [100 (gen/tuple (gen/return "line-break: ") gen-prop-line-break)]
    [100 (gen/tuple (gen/return "overflow-y: ") gen-prop-overflow-y)]
    [100 (gen/tuple (gen/return "-webkit-border-before-color: ") gen-prop--webkit-border-before-color)]
    [100 (gen/tuple (gen/return "border-block-start-color: ") gen-prop-border-block-start-color)]
    [100 (gen/tuple (gen/return "clip: ") gen-prop-clip)]
    [100 (gen/tuple (gen/return "align-self: ") gen-prop-align-self)]
    [100 (gen/tuple (gen/return "border-top-color: ") gen-prop-border-top-color)]
    [100 (gen/tuple (gen/return "overflow-wrap: ") gen-prop-overflow-wrap)]
    [100 (gen/tuple (gen/return "flex: ") gen-prop-flex)]
    [100 (gen/tuple (gen/return "-webkit-mask-position-y: ") gen-prop--webkit-mask-position-y)]
    [100 (gen/tuple (gen/return "flex-basis: ") gen-prop-flex-basis)]
    [100 (gen/tuple (gen/return "font-variant-numeric: ") gen-prop-font-variant-numeric)]
    [100 (gen/tuple (gen/return "ruby-align: ") gen-prop-ruby-align)]
    [100 (gen/tuple (gen/return "-webkit-mask-repeat-y: ") gen-prop--webkit-mask-repeat-y)]
    [100 (gen/tuple (gen/return "position: ") gen-prop-position)]
    [100 (gen/tuple (gen/return "border-left-color: ") gen-prop-border-left-color)]
    [100 (gen/tuple (gen/return "-moz-border-bottom-colors: ") gen-prop--moz-border-bottom-colors)]
    [100 (gen/tuple (gen/return "margin-top: ") gen-prop-margin-top)]
    [100 (gen/tuple (gen/return "scroll-snap-type: ") gen-prop-scroll-snap-type)]
    [100 (gen/tuple (gen/return "-moz-border-right-colors: ") gen-prop--moz-border-right-colors)]
    [100 (gen/tuple (gen/return "display: ") gen-prop-display)]
    [100 (gen/tuple (gen/return "shape-outside: ") gen-prop-shape-outside)]
    [100 (gen/tuple (gen/return "padding-block-end: ") gen-prop-padding-block-end)]
    [100 (gen/tuple (gen/return "shape-margin: ") gen-prop-shape-margin)]
    [100 (gen/tuple (gen/return "box-ordinal-group: ") gen-prop-box-ordinal-group)]
    [100 (gen/tuple (gen/return "border-image-width: ") gen-prop-border-image-width)]
    [100 (gen/tuple (gen/return "padding-right: ") gen-prop-padding-right)]
    [100 (gen/tuple (gen/return "all: ") gen-prop-all)]
    [100 (gen/tuple (gen/return "font-feature-settings: ") gen-prop-font-feature-settings)]
    [100 (gen/tuple (gen/return "border-block-end-width: ") gen-prop-border-block-end-width)]
    [100 (gen/tuple (gen/return "border-right-color: ") gen-prop-border-right-color)]
    [100 (gen/tuple (gen/return "perspective-origin: ") gen-prop-perspective-origin)]
    [100 (gen/tuple (gen/return "font: ") gen-prop-font)]
    [100 (gen/tuple (gen/return "table-layout: ") gen-prop-table-layout)]
    [100 (gen/tuple (gen/return "bottom: ") gen-prop-bottom)]
    [100 (gen/tuple (gen/return "text-decoration-color: ") gen-prop-text-decoration-color)]
    [100 (gen/tuple (gen/return "grid: ") gen-prop-grid)]
    [100 (gen/tuple (gen/return "text-size-adjust: ") gen-prop-text-size-adjust)]
    [100 (gen/tuple (gen/return "overflow-x: ") gen-prop-overflow-x)]
    [100 (gen/tuple (gen/return "mask-type: ") gen-prop-mask-type)]
    [100 (gen/tuple (gen/return "-webkit-mask-origin: ") gen-prop--webkit-mask-origin)]
    [100 (gen/tuple (gen/return "-ms-overflow-style: ") gen-prop--ms-overflow-style)]
    [100 (gen/tuple (gen/return "empty-cells: ") gen-prop-empty-cells)]
    [100 (gen/tuple (gen/return "outline-width: ") gen-prop-outline-width)]
    [100 (gen/tuple (gen/return "transition-delay: ") gen-prop-transition-delay)]
    [100 (gen/tuple (gen/return "hyphens: ") gen-prop-hyphens)]
    [100 (gen/tuple (gen/return "offset-rotate: ") gen-prop-offset-rotate)]
    [100 (gen/tuple (gen/return "writing-mode: ") gen-prop-writing-mode)]
    [100 (gen/tuple (gen/return "display-outside: ") gen-prop-display-outside)]
    [100 (gen/tuple (gen/return "font-variant-east-asian: ") gen-prop-font-variant-east-asian)]
    [100 (gen/tuple (gen/return "text-decoration-style: ") gen-prop-text-decoration-style)]
    [100 (gen/tuple (gen/return "mask: ") gen-prop-mask)]
    [100 (gen/tuple (gen/return "contain: ") gen-prop-contain)]
    [100 (gen/tuple (gen/return "clear: ") gen-prop-clear)]
    [100 (gen/tuple (gen/return "scroll-snap-type-y: ") gen-prop-scroll-snap-type-y)]
    [100 (gen/tuple (gen/return "cursor: ") gen-prop-cursor)]
    [100 (gen/tuple (gen/return "break-inside: ") gen-prop-break-inside)]
    [100 (gen/tuple (gen/return "transform: ") gen-prop-transform)]
    [100 (gen/tuple (gen/return "-webkit-border-before-width: ") gen-prop--webkit-border-before-width)]
    [100 (gen/tuple (gen/return "font-variant: ") gen-prop-font-variant)]
    [100 (gen/tuple (gen/return "flex-shrink: ") gen-prop-flex-shrink)]
    [100 (gen/tuple (gen/return "background-color: ") gen-prop-background-color)]
    [100 (gen/tuple (gen/return "margin-left: ") gen-prop-margin-left)]
    [100 (gen/tuple (gen/return "text-emphasis-style: ") gen-prop-text-emphasis-style)]
    [100 (gen/tuple (gen/return "box-align: ") gen-prop-box-align)]
    [100 (gen/tuple (gen/return "outline-offset: ") gen-prop-outline-offset)]
    [100 (gen/tuple (gen/return "font-kerning: ") gen-prop-font-kerning)]
    [100 (gen/tuple (gen/return "flex-wrap: ") gen-prop-flex-wrap)]
    [100 (gen/tuple (gen/return "grid-column-gap: ") gen-prop-grid-column-gap)]
    [100 (gen/tuple (gen/return "max-block-size: ") gen-prop-max-block-size)]
    [100 (gen/tuple (gen/return "border-inline-start-color: ") gen-prop-border-inline-start-color)]
    [100 (gen/tuple (gen/return "-webkit-text-stroke-color: ") gen-prop--webkit-text-stroke-color)]
    [100 (gen/tuple (gen/return "height: ") gen-prop-height)]
    [100 (gen/tuple (gen/return "-webkit-mask-repeat-x: ") gen-prop--webkit-mask-repeat-x)]
    [100 (gen/tuple (gen/return "ruby-merge: ") gen-prop-ruby-merge)]
    [100 (gen/tuple (gen/return "grid-template-columns: ") gen-prop-grid-template-columns)]
    [100 (gen/tuple (gen/return "grid-column-start: ") gen-prop-grid-column-start)]
    [100 (gen/tuple (gen/return "object-fit: ") gen-prop-object-fit)]
    [100 (gen/tuple (gen/return "border-bottom-left-radius: ") gen-prop-border-bottom-left-radius)]
    [100 (gen/tuple (gen/return "mask-image: ") gen-prop-mask-image)]
    [100 (gen/tuple (gen/return "list-style-position: ") gen-prop-list-style-position)]
    [100 (gen/tuple (gen/return "break-before: ") gen-prop-break-before)]
    [100 (gen/tuple (gen/return "page-break-after: ") gen-prop-page-break-after)]
    [100 (gen/tuple (gen/return "margin: ") gen-prop-margin)]
    [100 (gen/tuple (gen/return "font-variant-alternates: ") gen-prop-font-variant-alternates)]
    [100 (gen/tuple (gen/return "margin-right: ") gen-prop-margin-right)]
    [100 (gen/tuple (gen/return "outline: ") gen-prop-outline)]
    [100 (gen/tuple (gen/return "border-inline-end: ") gen-prop-border-inline-end)]
    [100 (gen/tuple (gen/return "max-width: ") gen-prop-max-width)]
    [100 (gen/tuple (gen/return "border: ") gen-prop-border)]
    [100 (gen/tuple (gen/return "-webkit-border-before: ") gen-prop--webkit-border-before)]
    [100 (gen/tuple (gen/return "offset-inline-start: ") gen-prop-offset-inline-start)]
    [100 (gen/tuple (gen/return "column-width: ") gen-prop-column-width)]
    [100 (gen/tuple (gen/return "content: ") gen-prop-content)]
    [100 (gen/tuple (gen/return "mask-origin: ") gen-prop-mask-origin)]
    [100 (gen/tuple (gen/return "column-fill: ") gen-prop-column-fill)]
    [100 (gen/tuple (gen/return "pointer-events: ") gen-prop-pointer-events)]
    [100 (gen/tuple (gen/return "grid-column: ") gen-prop-grid-column)]
    [100 (gen/tuple (gen/return "outline-style: ") gen-prop-outline-style)]
    [100 (gen/tuple (gen/return "text-combine-upright: ") gen-prop-text-combine-upright)]
    [100 (gen/tuple (gen/return "scroll-snap-coordinate: ") gen-prop-scroll-snap-coordinate)]
    [100 (gen/tuple (gen/return "column-rule-style: ") gen-prop-column-rule-style)]
    [100 (gen/tuple (gen/return "column-count: ") gen-prop-column-count)]
    [100 (gen/tuple (gen/return "offset-path: ") gen-prop-offset-path)]
    [100 (gen/tuple (gen/return "animation-play-state: ") gen-prop-animation-play-state)]
    [100 (gen/tuple (gen/return "text-orientation: ") gen-prop-text-orientation)]
    [100 (gen/tuple (gen/return "page-break-before: ") gen-prop-page-break-before)]
    [100 (gen/tuple (gen/return "-moz-outline-radius-topleft: ") gen-prop--moz-outline-radius-topleft)]
    [100 (gen/tuple (gen/return "margin-bottom: ") gen-prop-margin-bottom)]
    [100 (gen/tuple (gen/return "appearance: ") gen-prop-appearance)]
    [100 (gen/tuple (gen/return "-webkit-mask-position: ") gen-prop--webkit-mask-position)]
    [100 (gen/tuple (gen/return "white-space: ") gen-prop-white-space)]
    [100 (gen/tuple (gen/return "text-emphasis: ") gen-prop-text-emphasis)]
    [100 (gen/tuple (gen/return "direction: ") gen-prop-direction)]
    [100 (gen/tuple (gen/return "text-align: ") gen-prop-text-align)]
    [100 (gen/tuple (gen/return "overflow-clip-box: ") gen-prop-overflow-clip-box)]
    [100 (gen/tuple (gen/return "mask-position: ") gen-prop-mask-position)]
    [100 (gen/tuple (gen/return "text-decoration-skip: ") gen-prop-text-decoration-skip)]
    [100 (gen/tuple (gen/return "flex-grow: ") gen-prop-flex-grow)]
    [100 (gen/tuple (gen/return "background-repeat: ") gen-prop-background-repeat)]
    [100 (gen/tuple (gen/return "font-weight: ") gen-prop-font-weight)]
    [100 (gen/tuple (gen/return "animation-fill-mode: ") gen-prop-animation-fill-mode)]
    [100 (gen/tuple (gen/return "border-image: ") gen-prop-border-image)]
    [100 (gen/tuple (gen/return "max-inline-size: ") gen-prop-max-inline-size)]
    [100 (gen/tuple (gen/return "background-position-x: ") gen-prop-background-position-x)]
    [100 (gen/tuple (gen/return "border-right: ") gen-prop-border-right)]
    [100 (gen/tuple (gen/return "-moz-border-top-colors: ") gen-prop--moz-border-top-colors)]
    [100 (gen/tuple (gen/return "transform-origin: ") gen-prop-transform-origin)]
    [100 (gen/tuple (gen/return "background-attachment: ") gen-prop-background-attachment)]
    [100 (gen/tuple (gen/return "tab-size: ") gen-prop-tab-size)]
    [100 (gen/tuple (gen/return "font-variant-ligatures: ") gen-prop-font-variant-ligatures)]
    [100 (gen/tuple (gen/return "border-left: ") gen-prop-border-left)]
    [100 (gen/tuple (gen/return "caret-color: ") gen-prop-caret-color)]
    [100 (gen/tuple (gen/return "padding-inline-start: ") gen-prop-padding-inline-start)]
    [100 (gen/tuple (gen/return "box-decoration-break: ") gen-prop-box-decoration-break)]
    [100 (gen/tuple (gen/return "-webkit-mask-repeat: ") gen-prop--webkit-mask-repeat)]
    [100 (gen/tuple (gen/return "border-top: ") gen-prop-border-top)]
    [100 (gen/tuple (gen/return "-moz-outline-radius-bottomleft: ") gen-prop--moz-outline-radius-bottomleft)]
    [100 (gen/tuple (gen/return "mask-mode: ") gen-prop-mask-mode)]
    [100 (gen/tuple (gen/return "min-width: ") gen-prop-min-width)]
    [100 (gen/tuple (gen/return "user-select: ") gen-prop-user-select)]
    [100 (gen/tuple (gen/return "visibility: ") gen-prop-visibility)]
    [100 (gen/tuple (gen/return "border-top-left-radius: ") gen-prop-border-top-left-radius)]
    [100 (gen/tuple (gen/return "-moz-outline-radius-bottomright: ") gen-prop--moz-outline-radius-bottomright)]
    [100 (gen/tuple (gen/return "text-overflow: ") gen-prop-text-overflow)]
    [100 (gen/tuple (gen/return "image-resolution: ") gen-prop-image-resolution)]
    [100 (gen/tuple (gen/return "clip-path: ") gen-prop-clip-path)]
    [100 (gen/tuple (gen/return "transform-box: ") gen-prop-transform-box)]
    [100 (gen/tuple (gen/return "text-rendering: ") gen-prop-text-rendering)]
    ]))

(def gen-css-assignments
  (gen/fmap #(util/flatten-text % " ")
    (gen/fmap #(interpose "; " %)
              (gen/vector gen-css-assignment))))



