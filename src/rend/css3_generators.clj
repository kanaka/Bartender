(ns rend.css3-generators
   (:require [clojure.test.check.generators :as gen]
             [com.gfredericks.test.chuck.generators :as chuck]
             [mend.util :as util]
             [rend.misc-generators :as misc-gen]))

;; Generated by mend.css3

(defn- css3-generators-part-0 [gmap weights]
  (let [
        gen-nonprop-url
        (gen/return "url(http://STUB_DOMAIN.com/STUB_PATH/STUB_IMAGE=.png)")
        gmap (assoc gmap :nonprop-url gen-nonprop-url)

        gen-prop--moz-binding
        (gen/frequency [
          [(get weights [:prop--moz-binding :alt 0] 100)
            (gen/tuple
              (:nonprop-url gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-binding :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-binding gen-prop--moz-binding)

        gen-nonprop-single-animation-direction
        (gen/frequency [
          [(get weights [:nonprop-single-animation-direction :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-direction :alt 1] 100)
            (gen/tuple
              (gen/return "reverse")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-direction :alt 2] 100)
            (gen/tuple
              (gen/return "alternate")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-direction :alt 3] 100)
            (gen/tuple
              (gen/return "alternate-reverse")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-animation-direction gen-nonprop-single-animation-direction)

        gen-nonprop-integer
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/return "-")])
          (chuck/string-from-regex #"[0-9]+"))
        gmap (assoc gmap :nonprop-integer gen-nonprop-integer)

        gen-nonprop-number
        (gen/frequency [
          [(get weights [:nonprop-number :alt 0] 100)
            (:nonprop-integer gmap)]
          [(get weights [:nonprop-number :alt 1] 100)
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (gen/return "-")])
              (chuck/string-from-regex #"[0-9]+")
              (gen/return ".")
              (chuck/string-from-regex #"[0-9]+"))]])
        gmap (assoc gmap :nonprop-number gen-nonprop-number)

        gen-nonprop-angle
        (gen/tuple
          (:nonprop-number gmap)
          (gen/frequency [
            [(get weights [:nonprop-angle :cat 1 :alt 0] 100)
              (gen/return "deg")]
            [(get weights [:nonprop-angle :cat 1 :alt 1] 100)
              (gen/return "grad")]
            [(get weights [:nonprop-angle :cat 1 :alt 2] 100)
              (gen/return "rad")]
            [(get weights [:nonprop-angle :cat 1 :alt 3] 100)
              (gen/return "turn")]]))
        gmap (assoc gmap :nonprop-angle gen-nonprop-angle)

        gen-func-skew
        (gen/tuple
          (gen/return "skew(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-angle gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-skew gen-func-skew)

        gen-nonprop-length-unit
        (gen/frequency [
          [(get weights [:nonprop-length-unit :alt 0] 100)
            (gen/return "em")]
          [(get weights [:nonprop-length-unit :alt 1] 100)
            (gen/return "ex")]
          [(get weights [:nonprop-length-unit :alt 2] 100)
            (gen/return "ch")]
          [(get weights [:nonprop-length-unit :alt 3] 100)
            (gen/return "ic")]
          [(get weights [:nonprop-length-unit :alt 4] 100)
            (gen/return "rem")]
          [(get weights [:nonprop-length-unit :alt 5] 100)
            (gen/return "lh")]
          [(get weights [:nonprop-length-unit :alt 6] 100)
            (gen/return "rlh")]
          [(get weights [:nonprop-length-unit :alt 7] 100)
            (gen/return "vh")]
          [(get weights [:nonprop-length-unit :alt 8] 100)
            (gen/return "vw")]
          [(get weights [:nonprop-length-unit :alt 9] 100)
            (gen/return "vi")]
          [(get weights [:nonprop-length-unit :alt 10] 100)
            (gen/return "vb")]
          [(get weights [:nonprop-length-unit :alt 11] 100)
            (gen/return "vmin")]
          [(get weights [:nonprop-length-unit :alt 12] 100)
            (gen/return "vmax")]
          [(get weights [:nonprop-length-unit :alt 13] 100)
            (gen/return "px")]
          [(get weights [:nonprop-length-unit :alt 14] 100)
            (gen/return "mm")]
          [(get weights [:nonprop-length-unit :alt 15] 100)
            (gen/return "q")]
          [(get weights [:nonprop-length-unit :alt 16] 100)
            (gen/return "cm")]
          [(get weights [:nonprop-length-unit :alt 17] 100)
            (gen/return "in")]
          [(get weights [:nonprop-length-unit :alt 18] 100)
            (gen/return "pt")]
          [(get weights [:nonprop-length-unit :alt 19] 100)
            (gen/return "pc")]
          [(get weights [:nonprop-length-unit :alt 20] 100)
            (gen/return "mozmm")]])
        gmap (assoc gmap :nonprop-length-unit gen-nonprop-length-unit)

        gen-nonprop-length
        (gen/tuple
          (:nonprop-number gmap)
          (:nonprop-length-unit gmap))
        gmap (assoc gmap :nonprop-length gen-nonprop-length)

        gen-nonprop-percentage
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return "%"))
        gmap (assoc gmap :nonprop-percentage gen-nonprop-percentage)

        gen-prop-padding-left
        (gen/frequency [
          [(get weights [:prop-padding-left :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-padding-left :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-padding-left gen-prop-padding-left)

        gen-nonprop-padding-left
        (:prop-padding-left gmap)
        gmap (assoc gmap :nonprop-padding-left gen-nonprop-padding-left)

        gen-prop-padding-block-start
        (gen/tuple
          (:nonprop-padding-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-padding-block-start gen-prop-padding-block-start)

        gen-prop-image-rendering
        (gen/frequency [
          [(get weights [:prop-image-rendering :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-image-rendering :alt 1] 100)
            (gen/tuple
              (gen/return "crisp-edges")
              (gen/return " "))]
          [(get weights [:prop-image-rendering :alt 2] 100)
            (gen/tuple
              (gen/return "pixelated")
              (gen/return " "))]])
        gmap (assoc gmap :prop-image-rendering gen-prop-image-rendering)

        gen-prop-right
        (gen/frequency [
          [(get weights [:prop-right :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-right :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-right :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-right gen-prop-right)

        gen-prop-bottom
        (gen/frequency [
          [(get weights [:prop-bottom :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-bottom :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-bottom :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-bottom gen-prop-bottom)

        gen-nonprop-bottom
        (:prop-bottom gmap)
        gmap (assoc gmap :nonprop-bottom gen-nonprop-bottom)

        gen-prop-left
        (gen/frequency [
          [(get weights [:prop-left :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-left :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-left :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-left gen-prop-left)

        gen-prop-top
        (gen/frequency [
          [(get weights [:prop-top :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-top :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-top :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-top gen-prop-top)

        gen-nonprop-left
        (:prop-left gmap)
        gmap (assoc gmap :nonprop-left gen-nonprop-left)

        gen-nonprop-top
        (:prop-top gmap)
        gmap (assoc gmap :nonprop-top gen-nonprop-top)

        gen-nonprop-right
        (:prop-right gmap)
        gmap (assoc gmap :nonprop-right gen-nonprop-right)

        gen-nonprop-shape
        (gen/tuple
          (gen/return "rect(")
          (gen/return " ")
          (:nonprop-top gmap)
          (gen/return " ")
          (gen/return ", ")
          (:nonprop-right gmap)
          (gen/return " ")
          (gen/return ", ")
          (:nonprop-bottom gmap)
          (gen/return " ")
          (gen/return ", ")
          (:nonprop-left gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :nonprop-shape gen-nonprop-shape)

        gen-prop-clip
        (gen/frequency [
          [(get weights [:prop-clip :alt 0] 100)
            (gen/tuple
              (:nonprop-shape gmap)
              (gen/return " "))]
          [(get weights [:prop-clip :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-clip gen-prop-clip)

        gen-nonprop-alpha-value
        (gen/frequency [
          [(get weights [:nonprop-alpha-value :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:nonprop-alpha-value :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-alpha-value gen-nonprop-alpha-value)

        gen-nonprop-hue
        (gen/frequency [
          [(get weights [:nonprop-hue :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:nonprop-hue :alt 1] 100)
            (gen/tuple
              (:nonprop-angle gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-hue gen-nonprop-hue)

        gen-func-hsl
        (gen/frequency [
          [(get weights [:func-hsl :alt 0] 100)
            (gen/tuple
              (gen/return "hsl(")
              (gen/return " ")
              (gen/tuple
                (:nonprop-hue gmap)
                (gen/return " ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (:nonprop-alpha-value gmap)
                    (gen/return " "))])
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:func-hsl :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-hue gmap)
                (gen/return " ")
                (gen/return ", ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/return ", ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/return ", ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-alpha-value gmap)])
                (gen/return " "))
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :func-hsl gen-func-hsl)

        gen-nonprop-deprecated-system-color
        (gen/frequency [
          [(get weights [:nonprop-deprecated-system-color :alt 0] 100)
            (gen/tuple
              (gen/return "ActiveBorder")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 1] 100)
            (gen/tuple
              (gen/return "ActiveCaption")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 2] 100)
            (gen/tuple
              (gen/return "AppWorkspace")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 3] 100)
            (gen/tuple
              (gen/return "Background")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 4] 100)
            (gen/tuple
              (gen/return "ButtonFace")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 5] 100)
            (gen/tuple
              (gen/return "ButtonHighlight")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 6] 100)
            (gen/tuple
              (gen/return "ButtonShadow")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 7] 100)
            (gen/tuple
              (gen/return "ButtonText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 8] 100)
            (gen/tuple
              (gen/return "CaptionText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 9] 100)
            (gen/tuple
              (gen/return "GrayText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 10] 100)
            (gen/tuple
              (gen/return "Highlight")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 11] 100)
            (gen/tuple
              (gen/return "HighlightText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 12] 100)
            (gen/tuple
              (gen/return "InactiveBorder")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 13] 100)
            (gen/tuple
              (gen/return "InactiveCaption")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 14] 100)
            (gen/tuple
              (gen/return "InactiveCaptionText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 15] 100)
            (gen/tuple
              (gen/return "InfoBackground")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 16] 100)
            (gen/tuple
              (gen/return "InfoText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 17] 100)
            (gen/tuple
              (gen/return "Menu")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 18] 100)
            (gen/tuple
              (gen/return "MenuText")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 19] 100)
            (gen/tuple
              (gen/return "Scrollbar")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 20] 100)
            (gen/tuple
              (gen/return "ThreeDDarkShadow")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 21] 100)
            (gen/tuple
              (gen/return "ThreeDFace")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 22] 100)
            (gen/tuple
              (gen/return "ThreeDHighlight")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 23] 100)
            (gen/tuple
              (gen/return "ThreeDLightShadow")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 24] 100)
            (gen/tuple
              (gen/return "ThreeDShadow")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 25] 100)
            (gen/tuple
              (gen/return "Window")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 26] 100)
            (gen/tuple
              (gen/return "WindowFrame")
              (gen/return " "))]
          [(get weights [:nonprop-deprecated-system-color :alt 27] 100)
            (gen/tuple
              (gen/return "WindowText")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-deprecated-system-color gen-nonprop-deprecated-system-color)

        gen-nonprop-hex-color6
        (gen/tuple
          (gen/return "#")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]"))
        gmap (assoc gmap :nonprop-hex-color6 gen-nonprop-hex-color6)

        gen-func-rgb
        (gen/frequency [
          [(get weights [:func-rgb :alt 0] 100)
            (gen/tuple
              (gen/return "rgb(")
              (gen/return " ")
              (gen/tuple
                (gen/frequency [
                  [(get weights [:func-rgb :alt 0 :cat 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-percentage gmap)
                        (:nonprop-percentage gmap)
                        (:nonprop-percentage gmap))
                      (gen/return " "))]
                  [(get weights [:func-rgb :alt 0 :cat 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-number gmap)
                        (:nonprop-number gmap)
                        (:nonprop-number gmap))
                      (gen/return " "))]])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (:nonprop-alpha-value gmap)
                    (gen/return " "))])
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:func-rgb :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (gen/frequency [
                  [(get weights [:func-rgb :alt 1 :cat 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-percentage gmap)
                        (gen/return ", ")
                        (:nonprop-percentage gmap)
                        (gen/return ", ")
                        (:nonprop-percentage gmap))
                      (gen/return " "))]
                  [(get weights [:func-rgb :alt 1 :cat 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-number gmap)
                        (gen/return ", ")
                        (:nonprop-number gmap)
                        (gen/return ", ")
                        (:nonprop-number gmap))
                      (gen/return " "))]])
                (gen/return " ")
                (gen/return ",")
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-alpha-value gmap)])
                (gen/return " "))
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :func-rgb gen-func-rgb)

        gen-nonprop-named-color
        (gen/frequency [
          [(get weights [:nonprop-named-color :alt 0] 100)
            (gen/tuple
              (gen/return "transparent")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 1] 100)
            (gen/tuple
              (gen/return "aliceblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 2] 100)
            (gen/tuple
              (gen/return "antiquewhite")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 3] 100)
            (gen/tuple
              (gen/return "aqua")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 4] 100)
            (gen/tuple
              (gen/return "aquamarine")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 5] 100)
            (gen/tuple
              (gen/return "azure")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 6] 100)
            (gen/tuple
              (gen/return "beige")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 7] 100)
            (gen/tuple
              (gen/return "bisque")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 8] 100)
            (gen/tuple
              (gen/return "black")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 9] 100)
            (gen/tuple
              (gen/return "blanchedalmond")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 10] 100)
            (gen/tuple
              (gen/return "blue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 11] 100)
            (gen/tuple
              (gen/return "blueviolet")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 12] 100)
            (gen/tuple
              (gen/return "brown")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 13] 100)
            (gen/tuple
              (gen/return "burlywood")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 14] 100)
            (gen/tuple
              (gen/return "cadetblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 15] 100)
            (gen/tuple
              (gen/return "chartreuse")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 16] 100)
            (gen/tuple
              (gen/return "chocolate")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 17] 100)
            (gen/tuple
              (gen/return "coral")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 18] 100)
            (gen/tuple
              (gen/return "cornflowerblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 19] 100)
            (gen/tuple
              (gen/return "cornsilk")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 20] 100)
            (gen/tuple
              (gen/return "crimson")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 21] 100)
            (gen/tuple
              (gen/return "cyan")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 22] 100)
            (gen/tuple
              (gen/return "darkblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 23] 100)
            (gen/tuple
              (gen/return "darkcyan")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 24] 100)
            (gen/tuple
              (gen/return "darkgoldenrod")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 25] 100)
            (gen/tuple
              (gen/return "darkgray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 26] 100)
            (gen/tuple
              (gen/return "darkgreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 27] 100)
            (gen/tuple
              (gen/return "darkgrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 28] 100)
            (gen/tuple
              (gen/return "darkkhaki")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 29] 100)
            (gen/tuple
              (gen/return "darkmagenta")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 30] 100)
            (gen/tuple
              (gen/return "darkolivegreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 31] 100)
            (gen/tuple
              (gen/return "darkorange")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 32] 100)
            (gen/tuple
              (gen/return "darkorchid")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 33] 100)
            (gen/tuple
              (gen/return "darkred")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 34] 100)
            (gen/tuple
              (gen/return "darksalmon")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 35] 100)
            (gen/tuple
              (gen/return "darkseagreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 36] 100)
            (gen/tuple
              (gen/return "darkslateblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 37] 100)
            (gen/tuple
              (gen/return "darkslategray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 38] 100)
            (gen/tuple
              (gen/return "darkslategrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 39] 100)
            (gen/tuple
              (gen/return "darkturquoise")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 40] 100)
            (gen/tuple
              (gen/return "darkviolet")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 41] 100)
            (gen/tuple
              (gen/return "deeppink")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 42] 100)
            (gen/tuple
              (gen/return "deepskyblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 43] 100)
            (gen/tuple
              (gen/return "dimgray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 44] 100)
            (gen/tuple
              (gen/return "dimgrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 45] 100)
            (gen/tuple
              (gen/return "dodgerblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 46] 100)
            (gen/tuple
              (gen/return "firebrick")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 47] 100)
            (gen/tuple
              (gen/return "floralwhite")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 48] 100)
            (gen/tuple
              (gen/return "forestgreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 49] 100)
            (gen/tuple
              (gen/return "fuchsia")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 50] 100)
            (gen/tuple
              (gen/return "gainsboro")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 51] 100)
            (gen/tuple
              (gen/return "ghostwhite")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 52] 100)
            (gen/tuple
              (gen/return "gold")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 53] 100)
            (gen/tuple
              (gen/return "goldenrod")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 54] 100)
            (gen/tuple
              (gen/return "gray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 55] 100)
            (gen/tuple
              (gen/return "green")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 56] 100)
            (gen/tuple
              (gen/return "greenyellow")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 57] 100)
            (gen/tuple
              (gen/return "grey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 58] 100)
            (gen/tuple
              (gen/return "honeydew")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 59] 100)
            (gen/tuple
              (gen/return "hotpink")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 60] 100)
            (gen/tuple
              (gen/return "indianred")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 61] 100)
            (gen/tuple
              (gen/return "indigo")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 62] 100)
            (gen/tuple
              (gen/return "ivory")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 63] 100)
            (gen/tuple
              (gen/return "khaki")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 64] 100)
            (gen/tuple
              (gen/return "lavender")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 65] 100)
            (gen/tuple
              (gen/return "lavenderblush")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 66] 100)
            (gen/tuple
              (gen/return "lawngreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 67] 100)
            (gen/tuple
              (gen/return "lemonchiffon")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 68] 100)
            (gen/tuple
              (gen/return "lightblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 69] 100)
            (gen/tuple
              (gen/return "lightcoral")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 70] 100)
            (gen/tuple
              (gen/return "lightcyan")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 71] 100)
            (gen/tuple
              (gen/return "lightgoldenrodyellow")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 72] 100)
            (gen/tuple
              (gen/return "lightgray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 73] 100)
            (gen/tuple
              (gen/return "lightgreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 74] 100)
            (gen/tuple
              (gen/return "lightgrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 75] 100)
            (gen/tuple
              (gen/return "lightpink")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 76] 100)
            (gen/tuple
              (gen/return "lightsalmon")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 77] 100)
            (gen/tuple
              (gen/return "lightseagreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 78] 100)
            (gen/tuple
              (gen/return "lightskyblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 79] 100)
            (gen/tuple
              (gen/return "lightslategray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 80] 100)
            (gen/tuple
              (gen/return "lightslategrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 81] 100)
            (gen/tuple
              (gen/return "lightsteelblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 82] 100)
            (gen/tuple
              (gen/return "lightyellow")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 83] 100)
            (gen/tuple
              (gen/return "lime")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 84] 100)
            (gen/tuple
              (gen/return "limegreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 85] 100)
            (gen/tuple
              (gen/return "linen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 86] 100)
            (gen/tuple
              (gen/return "magenta")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 87] 100)
            (gen/tuple
              (gen/return "maroon")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 88] 100)
            (gen/tuple
              (gen/return "mediumaquamarine")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 89] 100)
            (gen/tuple
              (gen/return "mediumblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 90] 100)
            (gen/tuple
              (gen/return "mediumorchid")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 91] 100)
            (gen/tuple
              (gen/return "mediumpurple")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 92] 100)
            (gen/tuple
              (gen/return "mediumseagreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 93] 100)
            (gen/tuple
              (gen/return "mediumslateblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 94] 100)
            (gen/tuple
              (gen/return "mediumspringgreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 95] 100)
            (gen/tuple
              (gen/return "mediumturquoise")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 96] 100)
            (gen/tuple
              (gen/return "mediumvioletred")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 97] 100)
            (gen/tuple
              (gen/return "midnightblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 98] 100)
            (gen/tuple
              (gen/return "mintcream")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 99] 100)
            (gen/tuple
              (gen/return "mistyrose")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 100] 100)
            (gen/tuple
              (gen/return "moccasin")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 101] 100)
            (gen/tuple
              (gen/return "navajowhite")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 102] 100)
            (gen/tuple
              (gen/return "navy")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 103] 100)
            (gen/tuple
              (gen/return "oldlace")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 104] 100)
            (gen/tuple
              (gen/return "olive")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 105] 100)
            (gen/tuple
              (gen/return "olivedrab")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 106] 100)
            (gen/tuple
              (gen/return "orange")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 107] 100)
            (gen/tuple
              (gen/return "orangered")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 108] 100)
            (gen/tuple
              (gen/return "orchid")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 109] 100)
            (gen/tuple
              (gen/return "palegoldenrod")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 110] 100)
            (gen/tuple
              (gen/return "palegreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 111] 100)
            (gen/tuple
              (gen/return "paleturquoise")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 112] 100)
            (gen/tuple
              (gen/return "palevioletred")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 113] 100)
            (gen/tuple
              (gen/return "papayawhip")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 114] 100)
            (gen/tuple
              (gen/return "peachpuff")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 115] 100)
            (gen/tuple
              (gen/return "peru")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 116] 100)
            (gen/tuple
              (gen/return "pink")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 117] 100)
            (gen/tuple
              (gen/return "plum")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 118] 100)
            (gen/tuple
              (gen/return "powderblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 119] 100)
            (gen/tuple
              (gen/return "purple")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 120] 100)
            (gen/tuple
              (gen/return "rebeccapurple")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 121] 100)
            (gen/tuple
              (gen/return "red")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 122] 100)
            (gen/tuple
              (gen/return "rosybrown")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 123] 100)
            (gen/tuple
              (gen/return "royalblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 124] 100)
            (gen/tuple
              (gen/return "saddlebrown")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 125] 100)
            (gen/tuple
              (gen/return "salmon")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 126] 100)
            (gen/tuple
              (gen/return "sandybrown")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 127] 100)
            (gen/tuple
              (gen/return "seagreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 128] 100)
            (gen/tuple
              (gen/return "seashell")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 129] 100)
            (gen/tuple
              (gen/return "sienna")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 130] 100)
            (gen/tuple
              (gen/return "silver")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 131] 100)
            (gen/tuple
              (gen/return "skyblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 132] 100)
            (gen/tuple
              (gen/return "slateblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 133] 100)
            (gen/tuple
              (gen/return "slategray")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 134] 100)
            (gen/tuple
              (gen/return "slategrey")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 135] 100)
            (gen/tuple
              (gen/return "snow")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 136] 100)
            (gen/tuple
              (gen/return "springgreen")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 137] 100)
            (gen/tuple
              (gen/return "steelblue")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 138] 100)
            (gen/tuple
              (gen/return "tan")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 139] 100)
            (gen/tuple
              (gen/return "teal")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 140] 100)
            (gen/tuple
              (gen/return "thistle")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 141] 100)
            (gen/tuple
              (gen/return "tomato")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 142] 100)
            (gen/tuple
              (gen/return "turquoise")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 143] 100)
            (gen/tuple
              (gen/return "violet")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 144] 100)
            (gen/tuple
              (gen/return "wheat")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 145] 100)
            (gen/tuple
              (gen/return "white")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 146] 100)
            (gen/tuple
              (gen/return "whitesmoke")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 147] 100)
            (gen/tuple
              (gen/return "yellow")
              (gen/return " "))]
          [(get weights [:nonprop-named-color :alt 148] 100)
            (gen/tuple
              (gen/return "yellowgreen")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-named-color gen-nonprop-named-color)

        gen-nonprop-hex-color3
        (gen/tuple
          (gen/return "#")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]")
          (chuck/string-from-regex #"[0-9A-F]"))
        gmap (assoc gmap :nonprop-hex-color3 gen-nonprop-hex-color3)

        gen-nonprop-hex-color
        (gen/frequency [
          [(get weights [:nonprop-hex-color :alt 0] 100)
            (:nonprop-hex-color3 gmap)]
          [(get weights [:nonprop-hex-color :alt 1] 100)
            (:nonprop-hex-color6 gmap)]])
        gmap (assoc gmap :nonprop-hex-color gen-nonprop-hex-color)

        gen-func-hsla
        (gen/frequency [
          [(get weights [:func-hsla :alt 0] 100)
            (gen/tuple
              (gen/return "hsla(")
              (gen/return " ")
              (gen/tuple
                (:nonprop-hue gmap)
                (gen/return " ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (:nonprop-alpha-value gmap)
                    (gen/return " "))])
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:func-hsla :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-hue gmap)
                (gen/return " ")
                (gen/return ", ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/return ", ")
                (:nonprop-percentage gmap)
                (gen/return " ")
                (gen/return ", ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-alpha-value gmap)])
                (gen/return " "))
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :func-hsla gen-func-hsla)

        gen-func-rgba
        (gen/frequency [
          [(get weights [:func-rgba :alt 0] 100)
            (gen/tuple
              (gen/return "rgba(")
              (gen/return " ")
              (gen/tuple
                (gen/frequency [
                  [(get weights [:func-rgba :alt 0 :cat 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-percentage gmap)
                        (:nonprop-percentage gmap)
                        (:nonprop-percentage gmap))
                      (gen/return " "))]
                  [(get weights [:func-rgba :alt 0 :cat 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-number gmap)
                        (:nonprop-number gmap)
                        (:nonprop-number gmap))
                      (gen/return " "))]])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (:nonprop-alpha-value gmap)
                    (gen/return " "))])
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:func-rgba :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (gen/frequency [
                  [(get weights [:func-rgba :alt 1 :cat 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-percentage gmap)
                        (gen/return ", ")
                        (:nonprop-percentage gmap)
                        (gen/return ", ")
                        (:nonprop-percentage gmap))
                      (gen/return " "))]
                  [(get weights [:func-rgba :alt 1 :cat 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/tuple
                        (:nonprop-number gmap)
                        (gen/return ", ")
                        (:nonprop-number gmap)
                        (gen/return ", ")
                        (:nonprop-number gmap))
                      (gen/return " "))]])
                (gen/return " ")
                (gen/return ",")
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-alpha-value gmap)])
                (gen/return " "))
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :func-rgba gen-func-rgba)

        gen-nonprop-color
        (gen/frequency [
          [(get weights [:nonprop-color :alt 0] 100)
            (gen/tuple
              (:func-rgb gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 1] 100)
            (gen/tuple
              (:func-rgba gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 2] 100)
            (gen/tuple
              (:func-hsl gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 3] 100)
            (gen/tuple
              (:func-hsla gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 4] 100)
            (gen/tuple
              (:nonprop-hex-color gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 5] 100)
            (gen/tuple
              (:nonprop-named-color gmap)
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 6] 100)
            (gen/tuple
              (gen/return "currentcolor")
              (gen/return " "))]
          [(get weights [:nonprop-color :alt 7] 100)
            (gen/tuple
              (:nonprop-deprecated-system-color gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-color gen-nonprop-color)

        gen-nonprop-shadow
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/return "inset")])
          (gen/return " ")
          (gen/frequency [
            [(get weights [:nonprop-shadow :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:nonprop-length gmap))]
            [(get weights [:nonprop-shadow :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:nonprop-length gmap)
                (:nonprop-length gmap))]
            [(get weights [:nonprop-shadow :cat 2 :alt 2] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:nonprop-length gmap)
                (:nonprop-length gmap)
                (:nonprop-length gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-color gmap)])
          (gen/return " "))
        gmap (assoc gmap :nonprop-shadow gen-nonprop-shadow)

        gen-prop-box-shadow
        (gen/frequency [
          [(get weights [:prop-box-shadow :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-box-shadow :alt 1] 100)
            (gen/tuple
              (:nonprop-shadow gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-shadow gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-shadow gen-prop-box-shadow)

        gen-prop-flex-grow
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-flex-grow gen-prop-flex-grow)

        gen-prop-width
        (gen/frequency [
          [(get weights [:prop-width :alt 0] 100)
            (gen/tuple
              (gen/frequency [
                [(get weights [:prop-width :alt 0 :cat 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:prop-width :alt 0 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-percentage gmap)
                    (gen/return " "))]])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [(get weights [:prop-width :alt 0 :cat 2 :opt :alt 0] 100)
                    (gen/tuple
                      (gen/return "border-box")
                      (gen/return " "))]
                  [(get weights [:prop-width :alt 0 :cat 2 :opt :alt 1] 100)
                    (gen/tuple
                      (gen/return "content-box")
                      (gen/return " "))]])])
              (gen/return " "))]
          [(get weights [:prop-width :alt 1] 100)
            (gen/tuple
              (gen/return "available")
              (gen/return " "))]
          [(get weights [:prop-width :alt 2] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-width :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-width :alt 4] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-width :alt 5] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-width gen-prop-width)

        gen-nonprop-width
        (:prop-width gmap)
        gmap (assoc gmap :nonprop-width gen-nonprop-width)

        gen-prop-flex-basis
        (gen/frequency [
          [(get weights [:prop-flex-basis :alt 0] 100)
            (gen/tuple
              (gen/return "content")
              (gen/return " "))]
          [(get weights [:prop-flex-basis :alt 1] 100)
            (gen/tuple
              (:nonprop-width gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-flex-basis gen-prop-flex-basis)

        gen-nonprop-flex-basis
        (:prop-flex-basis gmap)
        gmap (assoc gmap :nonprop-flex-basis gen-nonprop-flex-basis)

        gen-nonprop-length-percentage
        (gen/frequency [
          [(get weights [:nonprop-length-percentage :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:nonprop-length-percentage :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-length-percentage gen-nonprop-length-percentage)

        gen-prop-flex-shrink
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-flex-shrink gen-prop-flex-shrink)

        gen-nonprop-flex-shrink
        (:prop-flex-shrink gmap)
        gmap (assoc gmap :nonprop-flex-shrink gen-nonprop-flex-shrink)

        gen-nonprop-flex-grow
        (:prop-flex-grow gmap)
        gmap (assoc gmap :nonprop-flex-grow gen-nonprop-flex-grow)

        gen-prop-flex
        (gen/frequency [
          [(get weights [:prop-flex :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-flex :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-flex-grow gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-flex :alt 1 :cat 0 :cat 2 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/one-of [
                          (gen/return "")
                          (:nonprop-flex-shrink gmap)])
                        (gen/return " "))]
                    [(get weights [:prop-flex :alt 1 :cat 0 :cat 2 :plus :alt 1] 100)
                      (gen/tuple
                        (:nonprop-flex-basis gmap)
                        (gen/return " "))]]))))
              (gen/return " "))]])
        gmap (assoc gmap :prop-flex gen-prop-flex)

        gen-nonprop-flex
        (:prop-flex gmap)
        gmap (assoc gmap :nonprop-flex gen-nonprop-flex)

        gen-nonprop-track-breadth
        (gen/frequency [
          [(get weights [:nonprop-track-breadth :alt 0] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/return " "))]
          [(get weights [:nonprop-track-breadth :alt 1] 100)
            (gen/tuple
              (:nonprop-flex gmap)
              (gen/return " "))]
          [(get weights [:nonprop-track-breadth :alt 2] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:nonprop-track-breadth :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:nonprop-track-breadth :alt 4] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-track-breadth gen-nonprop-track-breadth)]
    gmap))

(defn- css3-generators-part-1 [gmap weights]
  (let [
        gen-nonprop-fixed-breadth
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-fixed-breadth gen-nonprop-fixed-breadth)

        gen-nonprop-inflexible-breadth
        (gen/frequency [
          [(get weights [:nonprop-inflexible-breadth :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:nonprop-inflexible-breadth :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:nonprop-inflexible-breadth :alt 2] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:nonprop-inflexible-breadth :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:nonprop-inflexible-breadth :alt 4] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-inflexible-breadth gen-nonprop-inflexible-breadth)

        gen-nonprop-fixed-size
        (gen/frequency [
          [(get weights [:nonprop-fixed-size :alt 0] 100)
            (gen/tuple
              (:nonprop-fixed-breadth gmap)
              (gen/return " "))]
          [(get weights [:nonprop-fixed-size :alt 1] 100)
            (gen/tuple
              (gen/return "minmax(")
              (gen/return " ")
              (:nonprop-fixed-breadth gmap)
              (gen/return " ")
              (gen/return ",")
              (gen/return " ")
              (:nonprop-track-breadth gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]
          [(get weights [:nonprop-fixed-size :alt 2] 100)
            (gen/tuple
              (gen/return "minmax(")
              (gen/return " ")
              (:nonprop-inflexible-breadth gmap)
              (gen/return " ")
              (gen/return ",")
              (gen/return " ")
              (:nonprop-fixed-breadth gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-fixed-size gen-nonprop-fixed-size)

        gen-nonprop-custom-ident
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:nonprop-custom-ident :plus :alt 0] 100)
              (chuck/string-from-regex #"[A-Za-z0-9_-]")]
            [(get weights [:nonprop-custom-ident :plus :alt 1] 100)
              (chuck/string-from-regex #"\\[0-9A-F][0-9A-F]?[0-9A-F]?[0-9A-F]?[0-9A-F]?[0-9A-F]?")]])))
        gmap (assoc gmap :nonprop-custom-ident gen-nonprop-custom-ident)

        gen-nonprop-positive-integer
        (chuck/string-from-regex #"[0-9]+")
        gmap (assoc gmap :nonprop-positive-integer gen-nonprop-positive-integer)

        gen-nonprop-line-names
        (gen/tuple
          (gen/return "[")
          (gen/return " ")
          (gen/vector
            (:nonprop-custom-ident gmap))
          (gen/return " ")
          (gen/return "]")
          (gen/return " "))
        gmap (assoc gmap :nonprop-line-names gen-nonprop-line-names)

        gen-nonprop-track-size
        (gen/frequency [
          [(get weights [:nonprop-track-size :alt 0] 100)
            (gen/tuple
              (:nonprop-track-breadth gmap)
              (gen/return " "))]
          [(get weights [:nonprop-track-size :alt 1] 100)
            (gen/tuple
              (gen/return "minmax(")
              (gen/return " ")
              (:nonprop-inflexible-breadth gmap)
              (gen/return " ")
              (gen/return ",")
              (gen/return " ")
              (:nonprop-track-breadth gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]
          [(get weights [:nonprop-track-size :alt 2] 100)
            (gen/tuple
              (gen/return "fit-content(")
              (gen/return " ")
              (gen/frequency [
                [(get weights [:nonprop-track-size :alt 2 :cat 2 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-track-size :alt 2 :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-percentage gmap)
                    (gen/return " "))]])
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-track-size gen-nonprop-track-size)

        gen-nonprop-track-repeat
        (gen/tuple
          (gen/return "repeat(")
          (gen/return " ")
          (:nonprop-positive-integer gmap)
          (gen/return " ")
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (:nonprop-track-size gmap)
              (gen/return " "))))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :nonprop-track-repeat gen-nonprop-track-repeat)

        gen-nonprop-track-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (gen/frequency [
                [(get weights [:nonprop-track-list :cat 0 :plus :cat 2 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-track-size gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-track-list :cat 0 :plus :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-track-repeat gmap)
                    (gen/return " "))]])
              (gen/return " "))))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " "))
        gmap (assoc gmap :nonprop-track-list gen-nonprop-track-list)

        gen-nonprop-fixed-repeat
        (gen/tuple
          (gen/return "repeat(")
          (gen/return " ")
          (:nonprop-positive-integer gmap)
          (gen/return " ")
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (:nonprop-fixed-size gmap)
              (gen/return " "))))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :nonprop-fixed-repeat gen-nonprop-fixed-repeat)

        gen-nonprop-auto-repeat
        (gen/tuple
          (gen/return "repeat(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:nonprop-auto-repeat :cat 2 :alt 0] 100)
              (gen/tuple
                (gen/return "auto-fill")
                (gen/return " "))]
            [(get weights [:nonprop-auto-repeat :cat 2 :alt 1] 100)
              (gen/tuple
                (gen/return "auto-fit")
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (:nonprop-fixed-size gmap)
              (gen/return " "))))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :nonprop-auto-repeat gen-nonprop-auto-repeat)

        gen-nonprop-auto-track-list
        (gen/tuple
          (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (gen/frequency [
                [(get weights [:nonprop-auto-track-list :cat 0 :star :cat 2 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-fixed-size gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-auto-track-list :cat 0 :star :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-fixed-repeat gmap)
                    (gen/return " "))]])
              (gen/return " ")))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " ")
          (:nonprop-auto-repeat gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (gen/frequency [
                [(get weights [:nonprop-auto-track-list :cat 6 :star :cat 2 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-fixed-size gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-auto-track-list :cat 6 :star :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-fixed-repeat gmap)
                    (gen/return " "))]])
              (gen/return " ")))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " "))
        gmap (assoc gmap :nonprop-auto-track-list gen-nonprop-auto-track-list)

        gen-prop-grid-template-columns
        (gen/frequency [
          [(get weights [:prop-grid-template-columns :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-grid-template-columns :alt 1] 100)
            (gen/tuple
              (:nonprop-track-list gmap)
              (gen/return " "))]
          [(get weights [:prop-grid-template-columns :alt 2] 100)
            (gen/tuple
              (:nonprop-auto-track-list gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-grid-template-columns gen-prop-grid-template-columns)

        gen-nonprop-grid-template-columns
        (:prop-grid-template-columns gmap)
        gmap (assoc gmap :nonprop-grid-template-columns gen-nonprop-grid-template-columns)

        gen-prop-resize
        (gen/frequency [
          [(get weights [:prop-resize :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-resize :alt 1] 100)
            (gen/tuple
              (gen/return "both")
              (gen/return " "))]
          [(get weights [:prop-resize :alt 2] 100)
            (gen/tuple
              (gen/return "horizontal")
              (gen/return " "))]
          [(get weights [:prop-resize :alt 3] 100)
            (gen/tuple
              (gen/return "vertical")
              (gen/return " "))]])
        gmap (assoc gmap :prop-resize gen-prop-resize)

        gen-prop-column-width
        (gen/frequency [
          [(get weights [:prop-column-width :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-column-width :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-column-width gen-prop-column-width)

        gen-nonprop-column-width
        (:prop-column-width gmap)
        gmap (assoc gmap :nonprop-column-width gen-nonprop-column-width)

        gen-prop-column-count
        (gen/frequency [
          [(get weights [:prop-column-count :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:prop-column-count :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-column-count gen-prop-column-count)

        gen-nonprop-column-count
        (:prop-column-count gmap)
        gmap (assoc gmap :nonprop-column-count gen-nonprop-column-count)

        gen-prop-columns
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-columns :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-column-width gmap)
                (gen/return " "))]
            [(get weights [:prop-columns :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-column-count gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-columns gen-prop-columns)

        gen-prop-list-style-position
        (gen/frequency [
          [(get weights [:prop-list-style-position :alt 0] 100)
            (gen/tuple
              (gen/return "inside")
              (gen/return " "))]
          [(get weights [:prop-list-style-position :alt 1] 100)
            (gen/tuple
              (gen/return "outside")
              (gen/return " "))]])
        gmap (assoc gmap :prop-list-style-position gen-prop-list-style-position)

        gen-nonprop-list-style-position
        (:prop-list-style-position gmap)
        gmap (assoc gmap :nonprop-list-style-position gen-nonprop-list-style-position)

        gen-nonprop-display-outside
        (gen/frequency [
          [(get weights [:nonprop-display-outside :alt 0] 100)
            (gen/tuple
              (gen/return "block")
              (gen/return " "))]
          [(get weights [:nonprop-display-outside :alt 1] 100)
            (gen/tuple
              (gen/return "inline")
              (gen/return " "))]
          [(get weights [:nonprop-display-outside :alt 2] 100)
            (gen/tuple
              (gen/return "run-in")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-display-outside gen-nonprop-display-outside)

        gen-nonprop-display-listitem
        (gen/tuple
          (gen/return "list-item")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-display-outside gmap)])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:nonprop-display-listitem :cat 4 :opt :alt 0] 100)
                (gen/tuple
                  (gen/return "flow")
                  (gen/return " "))]
              [(get weights [:nonprop-display-listitem :cat 4 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "flow-root")
                  (gen/return " "))]])])
          (gen/return " "))
        gmap (assoc gmap :nonprop-display-listitem gen-nonprop-display-listitem)

        gen-prop-text-decoration-style
        (gen/frequency [
          [(get weights [:prop-text-decoration-style :alt 0] 100)
            (gen/tuple
              (gen/return "solid")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-style :alt 1] 100)
            (gen/tuple
              (gen/return "double")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-style :alt 2] 100)
            (gen/tuple
              (gen/return "dotted")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-style :alt 3] 100)
            (gen/tuple
              (gen/return "dashed")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-style :alt 4] 100)
            (gen/tuple
              (gen/return "wavy")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-decoration-style gen-prop-text-decoration-style)

        gen-prop-text-decoration-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-text-decoration-color gen-prop-text-decoration-color)

        gen-nonprop-text-decoration-style
        (:prop-text-decoration-style gmap)
        gmap (assoc gmap :nonprop-text-decoration-style gen-nonprop-text-decoration-style)

        gen-prop-text-decoration-line
        (gen/frequency [
          [(get weights [:prop-text-decoration-line :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-line :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-text-decoration-line :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/return "underline")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-line :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/return "overline")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-line :alt 1 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (gen/return "line-through")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-line :alt 1 :cat 0 :plus :alt 3] 100)
                    (gen/tuple
                      (gen/return "blink")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-decoration-line gen-prop-text-decoration-line)

        gen-nonprop-text-decoration-line
        (:prop-text-decoration-line gmap)
        gmap (assoc gmap :nonprop-text-decoration-line gen-nonprop-text-decoration-line)

        gen-nonprop-text-decoration-color
        (:prop-text-decoration-color gmap)
        gmap (assoc gmap :nonprop-text-decoration-color gen-nonprop-text-decoration-color)

        gen-prop-text-decoration
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-text-decoration :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-text-decoration-line gmap)
                (gen/return " "))]
            [(get weights [:prop-text-decoration :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-text-decoration-style gmap)
                (gen/return " "))]
            [(get weights [:prop-text-decoration :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-text-decoration-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-text-decoration gen-prop-text-decoration)

        gen-nonprop-resolution
        (gen/tuple
          (:nonprop-number gmap)
          (gen/frequency [
            [(get weights [:nonprop-resolution :cat 1 :alt 0] 100)
              (gen/return "dpi")]
            [(get weights [:nonprop-resolution :cat 1 :alt 1] 100)
              (gen/return "dpcm")]
            [(get weights [:nonprop-resolution :cat 1 :alt 2] 100)
              (gen/return "dppx")]]))
        gmap (assoc gmap :nonprop-resolution gen-nonprop-resolution)

        gen-nonprop-string
        (gen/tuple
          (gen/return "'")
          (chuck/string-from-regex #"[A-Za-z0-9 _\"-]")
          (gen/return "'"))
        gmap (assoc gmap :nonprop-string gen-nonprop-string)

        gen-nonprop-id-selector
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-id-selector gen-nonprop-id-selector)

        gen-func-element
        (gen/tuple
          (gen/return "element(")
          (gen/return " ")
          (:nonprop-id-selector gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-element gen-func-element)

        gen-nonprop-image
        (gen/frequency [
          [(get weights [:nonprop-image :alt 0] 100)
            (gen/tuple
              (:nonprop-url gmap)
              (gen/return " "))]
          [(get weights [:nonprop-image :alt 1] 100)
            (gen/tuple
              (:func-element gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-image gen-nonprop-image)

        gen-nonprop-image-set-option
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-image-set-option :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-image gmap)
                (gen/return " "))]
            [(get weights [:nonprop-image-set-option :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-string gmap)
                (gen/return " "))]])
          (gen/return " ")
          (:nonprop-resolution gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-image-set-option gen-nonprop-image-set-option)

        gen-nonprop-br-width
        (gen/frequency [
          [(get weights [:nonprop-br-width :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:nonprop-br-width :alt 1] 100)
            (gen/tuple
              (gen/return "thin")
              (gen/return " "))]
          [(get weights [:nonprop-br-width :alt 2] 100)
            (gen/tuple
              (gen/return "medium")
              (gen/return " "))]
          [(get weights [:nonprop-br-width :alt 3] 100)
            (gen/tuple
              (gen/return "thick")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-br-width gen-nonprop-br-width)

        gen-nonprop-br-style
        (gen/frequency [
          [(get weights [:nonprop-br-style :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 2] 100)
            (gen/tuple
              (gen/return "dotted")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 3] 100)
            (gen/tuple
              (gen/return "dashed")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 4] 100)
            (gen/tuple
              (gen/return "solid")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 5] 100)
            (gen/tuple
              (gen/return "double")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 6] 100)
            (gen/tuple
              (gen/return "groove")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 7] 100)
            (gen/tuple
              (gen/return "ridge")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 8] 100)
            (gen/tuple
              (gen/return "inset")
              (gen/return " "))]
          [(get weights [:nonprop-br-style :alt 9] 100)
            (gen/tuple
              (gen/return "outset")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-br-style gen-nonprop-br-style)

        gen-prop-border
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border gen-prop-border)

        gen-prop-font-variant-caps
        (gen/frequency [
          [(get weights [:prop-font-variant-caps :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 1] 100)
            (gen/tuple
              (gen/return "small-caps")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 2] 100)
            (gen/tuple
              (gen/return "all-small-caps")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 3] 100)
            (gen/tuple
              (gen/return "petite-caps")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 4] 100)
            (gen/tuple
              (gen/return "all-petite-caps")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 5] 100)
            (gen/tuple
              (gen/return "unicase")
              (gen/return " "))]
          [(get weights [:prop-font-variant-caps :alt 6] 100)
            (gen/tuple
              (gen/return "titling-caps")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-caps gen-prop-font-variant-caps)

        gen-nonprop-ident
        (:nonprop-custom-ident gmap)
        gmap (assoc gmap :nonprop-ident gen-nonprop-ident)

        gen-nonprop-any-value
        (gen/return "STUB_any_value")
        gmap (assoc gmap :nonprop-any-value gen-nonprop-any-value)

        gen-nonprop-time
        (gen/tuple
          (:nonprop-number gmap)
          (gen/frequency [
            [(get weights [:nonprop-time :cat 1 :alt 0] 100)
              (gen/return "s")]
            [(get weights [:nonprop-time :cat 1 :alt 1] 100)
              (gen/return "ms")]]))
        gmap (assoc gmap :nonprop-time gen-nonprop-time)

        gen-prop-transition-duration
        (gen/tuple
          (:nonprop-time gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-time gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-transition-duration gen-prop-transition-duration)

        gen-prop-offset-block-end
        (gen/tuple
          (:nonprop-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-offset-block-end gen-prop-offset-block-end)

        gen-nonprop-ending-shape
        (gen/frequency [
          [(get weights [:nonprop-ending-shape :alt 0] 100)
            (gen/tuple
              (gen/return "circle")
              (gen/return " "))]
          [(get weights [:nonprop-ending-shape :alt 1] 100)
            (gen/tuple
              (gen/return "ellipse")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-ending-shape gen-nonprop-ending-shape)

        gen-nonprop-position
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-position :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 3] 100)
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 4] 100)
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 0 :cat 0 :alt 5] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:nonprop-position :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 0 :alt 3] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]])
                (gen/return " ")
                (gen/frequency [
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 1 :cat 2 :alt 3] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:nonprop-position :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "left")
                            (gen/return " "))]
                        [(get weights [:nonprop-position :cat 0 :alt 2 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "right")
                            (gen/return " "))]])
                      (gen/return " ")
                      (gen/one-of [
                        (gen/return "")
                        (:nonprop-length-percentage gmap)])
                      (gen/return " "))]])
                (gen/return " ")
                (gen/frequency [
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:nonprop-position :cat 0 :alt 2 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:nonprop-position :cat 0 :alt 2 :cat 2 :alt 1 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "top")
                            (gen/return " "))]
                        [(get weights [:nonprop-position :cat 0 :alt 2 :cat 2 :alt 1 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "bottom")
                            (gen/return " "))]])
                      (gen/return " ")
                      (gen/one-of [
                        (gen/return "")
                        (:nonprop-length-percentage gmap)])
                      (gen/return " "))]])
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-position gen-nonprop-position)

        gen-nonprop-size
        (gen/frequency [
          [(get weights [:nonprop-size :alt 0] 100)
            (gen/tuple
              (gen/return "closest-side")
              (gen/return " "))]
          [(get weights [:nonprop-size :alt 1] 100)
            (gen/tuple
              (gen/return "farthest-side")
              (gen/return " "))]
          [(get weights [:nonprop-size :alt 2] 100)
            (gen/tuple
              (gen/return "closest-corner")
              (gen/return " "))]
          [(get weights [:nonprop-size :alt 3] 100)
            (gen/tuple
              (gen/return "farthest-corner")
              (gen/return " "))]
          [(get weights [:nonprop-size :alt 4] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:nonprop-size :alt 5] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-size gen-nonprop-size)

        gen-nonprop-color-stop
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-length-percentage gmap)])
          (gen/return " "))
        gmap (assoc gmap :nonprop-color-stop gen-nonprop-color-stop)]
    gmap))

(defn- css3-generators-part-2 [gmap weights]
  (let [
        gen-nonprop-color-stop-list
        (gen/tuple
          (gen/tuple
            (:nonprop-color-stop gmap)
            (gen/return ", ")
            (:nonprop-color-stop gmap))
          (gen/return " "))
        gmap (assoc gmap :nonprop-color-stop-list gen-nonprop-color-stop-list)

        gen-func-repeating-radial-gradient
        (gen/tuple
          (gen/return "repeating-radial-gradient(")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [(get weights [:func-repeating-radial-gradient :cat 2 :opt :plus :alt 0] 100)
                  (gen/tuple
                    (:nonprop-ending-shape gmap)
                    (gen/return " "))]
                [(get weights [:func-repeating-radial-gradient :cat 2 :opt :plus :alt 1] 100)
                  (gen/tuple
                    (:nonprop-size gmap)
                    (gen/return " "))]])))])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (gen/return " ")
              (:nonprop-position gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-color-stop-list gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-repeating-radial-gradient gen-func-repeating-radial-gradient)

        gen-prop-overflow-x
        (gen/frequency [
          [(get weights [:prop-overflow-x :alt 0] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-overflow-x :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]
          [(get weights [:prop-overflow-x :alt 2] 100)
            (gen/tuple
              (gen/return "scroll")
              (gen/return " "))]
          [(get weights [:prop-overflow-x :alt 3] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-overflow-x gen-prop-overflow-x)

        gen-nonprop-angle-percentage
        (gen/frequency [
          [(get weights [:nonprop-angle-percentage :alt 0] 100)
            (gen/tuple
              (:nonprop-angle gmap)
              (gen/return " "))]
          [(get weights [:nonprop-angle-percentage :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-angle-percentage gen-nonprop-angle-percentage)

        gen-nonprop-shape-radius
        (gen/frequency [
          [(get weights [:nonprop-shape-radius :alt 0] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/return " "))]
          [(get weights [:nonprop-shape-radius :alt 1] 100)
            (gen/tuple
              (gen/return "closest-side")
              (gen/return " "))]
          [(get weights [:nonprop-shape-radius :alt 2] 100)
            (gen/tuple
              (gen/return "farthest-side")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-shape-radius gen-nonprop-shape-radius)

        gen-func-circle
        (gen/tuple
          (gen/return "circle(")
          (gen/return " ")
          (:nonprop-shape-radius gmap)
          (gen/one-of [
            (gen/return "")
            (gen/return " ")])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (gen/return " ")
              (:nonprop-position gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-circle gen-func-circle)

        gen-prop--moz-border-top-colors
        (gen/frequency [
          [(get weights [:prop--moz-border-top-colors :alt 0] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/vector
                (gen/return " "))
              (gen/return " ")
              (:nonprop-color gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-border-top-colors :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-border-top-colors gen-prop--moz-border-top-colors)

        gen-prop-vertical-align
        (gen/frequency [
          [(get weights [:prop-vertical-align :alt 0] 100)
            (gen/tuple
              (gen/return "baseline")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 1] 100)
            (gen/tuple
              (gen/return "sub")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 2] 100)
            (gen/tuple
              (gen/return "super")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 3] 100)
            (gen/tuple
              (gen/return "text-top")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 4] 100)
            (gen/tuple
              (gen/return "text-bottom")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 5] 100)
            (gen/tuple
              (gen/return "middle")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 6] 100)
            (gen/tuple
              (gen/return "top")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 7] 100)
            (gen/tuple
              (gen/return "bottom")
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 8] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-vertical-align :alt 9] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-vertical-align gen-prop-vertical-align)

        gen-prop-animation-delay
        (gen/tuple
          (:nonprop-time gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-time gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-delay gen-prop-animation-delay)

        gen-nonprop-counter-style-name
        (gen/tuple
          (:nonprop-custom-ident gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-counter-style-name gen-nonprop-counter-style-name)

        gen-nonprop-counter-style
        (gen/frequency [
          [(get weights [:nonprop-counter-style :alt 0] 100)
            (gen/tuple
              (:nonprop-counter-style-name gmap)
              (gen/return " "))]
          [(get weights [:nonprop-counter-style :alt 1] 100)
            (gen/tuple
              (gen/return "symbols()")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-counter-style gen-nonprop-counter-style)

        gen-prop-list-style-type
        (gen/frequency [
          [(get weights [:prop-list-style-type :alt 0] 100)
            (gen/tuple
              (:nonprop-counter-style gmap)
              (gen/return " "))]
          [(get weights [:prop-list-style-type :alt 1] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]
          [(get weights [:prop-list-style-type :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-list-style-type gen-prop-list-style-type)

        gen-nonprop-list-style-type
        (:prop-list-style-type gmap)
        gmap (assoc gmap :nonprop-list-style-type gen-nonprop-list-style-type)

        gen-prop-scroll-snap-type-y
        (gen/frequency [
          [(get weights [:prop-scroll-snap-type-y :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type-y :alt 1] 100)
            (gen/tuple
              (gen/return "mandatory")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type-y :alt 2] 100)
            (gen/tuple
              (gen/return "proximity")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-type-y gen-prop-scroll-snap-type-y)

        gen-prop-caption-side
        (gen/frequency [
          [(get weights [:prop-caption-side :alt 0] 100)
            (gen/tuple
              (gen/return "top")
              (gen/return " "))]
          [(get weights [:prop-caption-side :alt 1] 100)
            (gen/tuple
              (gen/return "bottom")
              (gen/return " "))]
          [(get weights [:prop-caption-side :alt 2] 100)
            (gen/tuple
              (gen/return "block-start")
              (gen/return " "))]
          [(get weights [:prop-caption-side :alt 3] 100)
            (gen/tuple
              (gen/return "block-end")
              (gen/return " "))]
          [(get weights [:prop-caption-side :alt 4] 100)
            (gen/tuple
              (gen/return "inline-start")
              (gen/return " "))]
          [(get weights [:prop-caption-side :alt 5] 100)
            (gen/tuple
              (gen/return "inline-end")
              (gen/return " "))]])
        gmap (assoc gmap :prop-caption-side gen-prop-caption-side)

        gen-prop-text-transform
        (gen/frequency [
          [(get weights [:prop-text-transform :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-transform :alt 1] 100)
            (gen/tuple
              (gen/return "capitalize")
              (gen/return " "))]
          [(get weights [:prop-text-transform :alt 2] 100)
            (gen/tuple
              (gen/return "uppercase")
              (gen/return " "))]
          [(get weights [:prop-text-transform :alt 3] 100)
            (gen/tuple
              (gen/return "lowercase")
              (gen/return " "))]
          [(get weights [:prop-text-transform :alt 4] 100)
            (gen/tuple
              (gen/return "full-width")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-transform gen-prop-text-transform)

        gen-func-minmax
        (gen/tuple
          (gen/return "minmax(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-minmax :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-percentage gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 2 :alt 2] 100)
              (gen/tuple
                (:nonprop-flex gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 2 :alt 3] 100)
              (gen/tuple
                (gen/return "min-content")
                (gen/return " "))]
            [(get weights [:func-minmax :cat 2 :alt 4] 100)
              (gen/tuple
                (gen/return "max-content")
                (gen/return " "))]
            [(get weights [:func-minmax :cat 2 :alt 5] 100)
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-minmax :cat 6 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 6 :alt 1] 100)
              (gen/tuple
                (:nonprop-percentage gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 6 :alt 2] 100)
              (gen/tuple
                (:nonprop-flex gmap)
                (gen/return " "))]
            [(get weights [:func-minmax :cat 6 :alt 3] 100)
              (gen/tuple
                (gen/return "min-content")
                (gen/return " "))]
            [(get weights [:func-minmax :cat 6 :alt 4] 100)
              (gen/tuple
                (gen/return "max-content")
                (gen/return " "))]
            [(get weights [:func-minmax :cat 6 :alt 5] 100)
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-minmax gen-func-minmax)

        gen-nonprop-repeat-style
        (gen/frequency [
          [(get weights [:nonprop-repeat-style :alt 0] 100)
            (gen/tuple
              (gen/return "repeat-x")
              (gen/return " "))]
          [(get weights [:nonprop-repeat-style :alt 1] 100)
            (gen/tuple
              (gen/return "repeat-y")
              (gen/return " "))]
          [(get weights [:nonprop-repeat-style :alt 2] 100)
            (gen/tuple
              (gen/frequency [
                [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0] 100)
                  (gen/frequency [
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 0] 100)
                      (gen/tuple
                        (gen/return "repeat")
                        (gen/return " "))]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 1] 100)
                      (gen/tuple
                        (gen/return "space")
                        (gen/return " "))]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 2] 100)
                      (gen/tuple
                        (gen/return "round")
                        (gen/return " "))]
                    [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 0 :alt 3] 100)
                      (gen/tuple
                        (gen/return "no-repeat")
                        (gen/return " "))]])]
                [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (gen/frequency [
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                        (gen/tuple
                          (gen/return "repeat")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                        (gen/tuple
                          (gen/return "space")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 2] 100)
                        (gen/tuple
                          (gen/return "round")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 0 :alt 3] 100)
                        (gen/tuple
                          (gen/return "no-repeat")
                          (gen/return " "))]])
                    (gen/frequency [
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 1 :alt 0] 100)
                        (gen/tuple
                          (gen/return "repeat")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 1 :alt 1] 100)
                        (gen/tuple
                          (gen/return "space")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 1 :alt 2] 100)
                        (gen/tuple
                          (gen/return "round")
                          (gen/return " "))]
                      [(get weights [:nonprop-repeat-style :alt 2 :cat 0 :alt 1 :cat 1 :alt 3] 100)
                        (gen/tuple
                          (gen/return "no-repeat")
                          (gen/return " "))]]))]])
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-repeat-style gen-nonprop-repeat-style)

        gen-prop-font-synthesis
        (gen/frequency [
          [(get weights [:prop-font-synthesis :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-font-synthesis :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-font-synthesis :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/return "weight")
                      (gen/return " "))]
                  [(get weights [:prop-font-synthesis :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/return "style")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-synthesis gen-prop-font-synthesis)

        gen-prop-min-height
        (gen/frequency [
          [(get weights [:prop-min-height :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 4] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 5] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-min-height :alt 6] 100)
            (gen/tuple
              (gen/return "fill-available")
              (gen/return " "))]])
        gmap (assoc gmap :prop-min-height gen-prop-min-height)

        gen-prop--webkit-text-stroke-width
        (gen/tuple
          (:nonprop-length gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-text-stroke-width gen-prop--webkit-text-stroke-width)

        gen-nonprop-keyframe-selector
        (gen/frequency [
          [(get weights [:nonprop-keyframe-selector :alt 0] 100)
            (gen/tuple
              (gen/return "from")
              (gen/return " "))]
          [(get weights [:nonprop-keyframe-selector :alt 1] 100)
            (gen/tuple
              (gen/return "to")
              (gen/return " "))]
          [(get weights [:nonprop-keyframe-selector :alt 2] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-keyframe-selector gen-nonprop-keyframe-selector)

        gen-prop-grid-column-gap
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-column-gap gen-prop-grid-column-gap)

        gen-prop-border-right-style
        (gen/tuple
          (:nonprop-br-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-right-style gen-prop-border-right-style)

        gen-prop-transform-origin
        (gen/frequency [
          [(get weights [:prop-transform-origin :alt 0] 100)
            (gen/tuple
              (gen/frequency [
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (gen/return " "))]
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (gen/return "left")
                    (gen/return " "))]
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 2] 100)
                  (gen/tuple
                    (gen/return "center")
                    (gen/return " "))]
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 3] 100)
                  (gen/tuple
                    (gen/return "right")
                    (gen/return " "))]
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 4] 100)
                  (gen/tuple
                    (gen/return "top")
                    (gen/return " "))]
                [(get weights [:prop-transform-origin :alt 0 :cat 0 :alt 5] 100)
                  (gen/tuple
                    (gen/return "bottom")
                    (gen/return " "))]])
              (gen/return " "))]
          [(get weights [:prop-transform-origin :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 0 :alt 3] 100)
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]])
                (gen/return " ")
                (gen/frequency [
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "center")
                      (gen/return " "))]
                  [(get weights [:prop-transform-origin :alt 1 :cat 0 :cat 2 :alt 3] 100)
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]])
                (gen/return " "))
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (:nonprop-length gmap)])
              (gen/return " "))]])
        gmap (assoc gmap :prop-transform-origin gen-prop-transform-origin)

        gen-prop-font-size-adjust
        (gen/frequency [
          [(get weights [:prop-font-size-adjust :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-font-size-adjust :alt 1] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-size-adjust gen-prop-font-size-adjust)

        gen-prop-grid-auto-rows
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (:nonprop-track-size gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-grid-auto-rows gen-prop-grid-auto-rows)

        gen-nonprop-grid-auto-rows
        (:prop-grid-auto-rows gmap)
        gmap (assoc gmap :nonprop-grid-auto-rows gen-nonprop-grid-auto-rows)

        gen-prop-text-size-adjust
        (gen/frequency [
          [(get weights [:prop-text-size-adjust :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-size-adjust :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-text-size-adjust :alt 2] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-size-adjust gen-prop-text-size-adjust)

        gen-prop-align-items
        (gen/frequency [
          [(get weights [:prop-align-items :alt 0] 100)
            (gen/tuple
              (gen/return "flex-start")
              (gen/return " "))]
          [(get weights [:prop-align-items :alt 1] 100)
            (gen/tuple
              (gen/return "flex-end")
              (gen/return " "))]
          [(get weights [:prop-align-items :alt 2] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-align-items :alt 3] 100)
            (gen/tuple
              (gen/return "baseline")
              (gen/return " "))]
          [(get weights [:prop-align-items :alt 4] 100)
            (gen/tuple
              (gen/return "stretch")
              (gen/return " "))]])
        gmap (assoc gmap :prop-align-items gen-prop-align-items)

        gen-prop-border-right
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-right :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-right :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-right :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-right gen-prop-border-right)

        gen-prop-all
        (gen/frequency [
          [(get weights [:prop-all :alt 0] 100)
            (gen/tuple
              (gen/return "initial")
              (gen/return " "))]
          [(get weights [:prop-all :alt 1] 100)
            (gen/tuple
              (gen/return "inherit")
              (gen/return " "))]
          [(get weights [:prop-all :alt 2] 100)
            (gen/tuple
              (gen/return "unset")
              (gen/return " "))]])
        gmap (assoc gmap :prop-all gen-prop-all)

        gen-nonprop-box
        (gen/frequency [
          [(get weights [:nonprop-box :alt 0] 100)
            (gen/tuple
              (gen/return "border-box")
              (gen/return " "))]
          [(get weights [:nonprop-box :alt 1] 100)
            (gen/tuple
              (gen/return "padding-box")
              (gen/return " "))]
          [(get weights [:nonprop-box :alt 2] 100)
            (gen/tuple
              (gen/return "content-box")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-box gen-nonprop-box)

        gen-nonprop-shape-box
        (gen/frequency [
          [(get weights [:nonprop-shape-box :alt 0] 100)
            (gen/tuple
              (:nonprop-box gmap)
              (gen/return " "))]
          [(get weights [:nonprop-shape-box :alt 1] 100)
            (gen/tuple
              (gen/return "margin-box")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-shape-box gen-nonprop-shape-box)

        gen-nonprop-geometry-box
        (gen/frequency [
          [(get weights [:nonprop-geometry-box :alt 0] 100)
            (gen/tuple
              (:nonprop-shape-box gmap)
              (gen/return " "))]
          [(get weights [:nonprop-geometry-box :alt 1] 100)
            (gen/tuple
              (gen/return "fill-box")
              (gen/return " "))]
          [(get weights [:nonprop-geometry-box :alt 2] 100)
            (gen/tuple
              (gen/return "stroke-box")
              (gen/return " "))]
          [(get weights [:nonprop-geometry-box :alt 3] 100)
            (gen/tuple
              (gen/return "view-box")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-geometry-box gen-nonprop-geometry-box)

        gen-prop-column-fill
        (gen/frequency [
          [(get weights [:prop-column-fill :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-column-fill :alt 1] 100)
            (gen/tuple
              (gen/return "balance")
              (gen/return " "))]])
        gmap (assoc gmap :prop-column-fill gen-prop-column-fill)

        gen-func-rotate
        (gen/tuple
          (gen/return "rotate(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-rotate gen-func-rotate)

        gen-prop-column-rule-style
        (gen/tuple
          (:nonprop-br-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-column-rule-style gen-prop-column-rule-style)

        gen-prop-scroll-snap-type-x
        (gen/frequency [
          [(get weights [:prop-scroll-snap-type-x :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type-x :alt 1] 100)
            (gen/tuple
              (gen/return "mandatory")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type-x :alt 2] 100)
            (gen/tuple
              (gen/return "proximity")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-type-x gen-prop-scroll-snap-type-x)

        gen-nonprop-single-transition-property
        (gen/frequency [
          [(get weights [:nonprop-single-transition-property :alt 0] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-property :alt 1] 100)
            (gen/tuple
              (:nonprop-custom-ident gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-transition-property gen-nonprop-single-transition-property)

        gen-nonprop-side-or-corner
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:nonprop-side-or-corner :plus :alt 0] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-side-or-corner :plus :alt 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "left")
                      (gen/return " "))]
                  [(get weights [:nonprop-side-or-corner :plus :alt 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "right")
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:nonprop-side-or-corner :plus :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-side-or-corner :plus :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "top")
                      (gen/return " "))]
                  [(get weights [:nonprop-side-or-corner :plus :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "bottom")
                      (gen/return " "))]])
                (gen/return " "))]])))
        gmap (assoc gmap :nonprop-side-or-corner gen-nonprop-side-or-corner)

        gen-func-linear-gradient
        (gen/tuple
          (gen/return "linear-gradient(")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:func-linear-gradient :cat 2 :opt :alt 0] 100)
                (gen/tuple
                  (:nonprop-angle gmap)
                  (gen/return " "))]
              [(get weights [:func-linear-gradient :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "to")
                  (gen/return " ")
                  (:nonprop-side-or-corner gmap)
                  (gen/return " "))]])])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-color-stop-list gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-linear-gradient gen-func-linear-gradient)

        gen-nonprop-numeric-figure-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-numeric-figure-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "lining-nums")
                (gen/return " "))]
            [(get weights [:nonprop-numeric-figure-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "oldstyle-nums")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-numeric-figure-values gen-nonprop-numeric-figure-values)

        gen-nonprop-numeric-spacing-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-numeric-spacing-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "proportional-nums")
                (gen/return " "))]
            [(get weights [:nonprop-numeric-spacing-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "tabular-nums")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-numeric-spacing-values gen-nonprop-numeric-spacing-values)

        gen-nonprop-numeric-fraction-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-numeric-fraction-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "diagonal-fractions")
                (gen/return " "))]
            [(get weights [:nonprop-numeric-fraction-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "stacked-fractions")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-numeric-fraction-values gen-nonprop-numeric-fraction-values)

        gen-prop-font-variant-numeric
        (gen/frequency [
          [(get weights [:prop-font-variant-numeric :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-numeric :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-font-variant-numeric :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-numeric-figure-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-numeric :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-numeric-spacing-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-numeric :alt 1 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (:nonprop-numeric-fraction-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-numeric :alt 1 :cat 0 :plus :alt 3] 100)
                    (gen/tuple
                      (gen/return "ordinal")
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-numeric :alt 1 :cat 0 :plus :alt 4] 100)
                    (gen/tuple
                      (gen/return "slashed-zero")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-numeric gen-prop-font-variant-numeric)

        gen-prop-text-emphasis-style
        (gen/frequency [
          [(get weights [:prop-text-emphasis-style :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-emphasis-style :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "filled")
                            (gen/return " "))]
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "open")
                            (gen/return " "))]])
                      (gen/return " "))]
                  [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "dot")
                            (gen/return " "))]
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "circle")
                            (gen/return " "))]
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 2] 100)
                          (gen/tuple
                            (gen/return "double-circle")
                            (gen/return " "))]
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 3] 100)
                          (gen/tuple
                            (gen/return "triangle")
                            (gen/return " "))]
                        [(get weights [:prop-text-emphasis-style :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 4] 100)
                          (gen/tuple
                            (gen/return "sesame")
                            (gen/return " "))]])
                      (gen/return " "))]])))
              (gen/return " "))]
          [(get weights [:prop-text-emphasis-style :alt 2] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-emphasis-style gen-prop-text-emphasis-style)

        gen-nonprop-text-emphasis-style
        (:prop-text-emphasis-style gmap)
        gmap (assoc gmap :nonprop-text-emphasis-style gen-nonprop-text-emphasis-style)

        gen-func-leader
        (gen/frequency [
          [(get weights [:func-leader :alt 0] 100)
            (gen/tuple
              (gen/return "leader(")
              (gen/return " ")
              (gen/return "dotted")
              (gen/return " "))]
          [(get weights [:func-leader :alt 1] 100)
            (gen/tuple
              (gen/return "solid")
              (gen/return " "))]
          [(get weights [:func-leader :alt 2] 100)
            (gen/tuple
              (gen/return "space")
              (gen/return " "))]
          [(get weights [:func-leader :alt 3] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :func-leader gen-func-leader)

        gen-nonprop-grid-line
        (gen/frequency [
          [(get weights [:nonprop-grid-line :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:nonprop-grid-line :alt 1] 100)
            (gen/tuple
              (:nonprop-custom-ident gmap)
              (gen/return " "))]
          [(get weights [:nonprop-grid-line :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-integer gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-custom-ident gmap)])
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:nonprop-grid-line :alt 3] 100)
            (gen/tuple
              (gen/tuple
                (gen/return "span")
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:nonprop-grid-line :alt 3 :cat 0 :cat 2 :plus :alt 0] 100)
                      (gen/tuple
                        (:nonprop-integer gmap)
                        (gen/return " "))]
                    [(get weights [:nonprop-grid-line :alt 3 :cat 0 :cat 2 :plus :alt 1] 100)
                      (gen/tuple
                        (:nonprop-custom-ident gmap)
                        (gen/return " "))]])))
                (gen/return " "))
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-grid-line gen-nonprop-grid-line)]
    gmap))

(defn- css3-generators-part-3 [gmap weights]
  (let [
        gen-prop-grid-row-end
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-row-end gen-prop-grid-row-end)

        gen-prop--webkit-mask-repeat-x
        (gen/frequency [
          [(get weights [:prop--webkit-mask-repeat-x :alt 0] 100)
            (gen/tuple
              (gen/return "repeat")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-x :alt 1] 100)
            (gen/tuple
              (gen/return "no-repeat")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-x :alt 2] 100)
            (gen/tuple
              (gen/return "space")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-x :alt 3] 100)
            (gen/tuple
              (gen/return "round")
              (gen/return " "))]])
        gmap (assoc gmap :prop--webkit-mask-repeat-x gen-prop--webkit-mask-repeat-x)

        gen-prop-line-height
        (gen/frequency [
          [(get weights [:prop-line-height :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-line-height :alt 1] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:prop-line-height :alt 2] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-line-height :alt 3] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-line-height gen-prop-line-height)

        gen-nonprop-line-height
        (:prop-line-height gmap)
        gmap (assoc gmap :nonprop-line-height gen-nonprop-line-height)

        gen-prop--moz-user-input
        (gen/frequency [
          [(get weights [:prop--moz-user-input :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop--moz-user-input :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop--moz-user-input :alt 2] 100)
            (gen/tuple
              (gen/return "enabled")
              (gen/return " "))]
          [(get weights [:prop--moz-user-input :alt 3] 100)
            (gen/tuple
              (gen/return "disabled")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-user-input gen-prop--moz-user-input)

        gen-prop-scroll-snap-destination
        (gen/tuple
          (:nonprop-position gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-scroll-snap-destination gen-prop-scroll-snap-destination)

        gen-prop-clear
        (gen/frequency [
          [(get weights [:prop-clear :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-clear :alt 1] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-clear :alt 2] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-clear :alt 3] 100)
            (gen/tuple
              (gen/return "both")
              (gen/return " "))]
          [(get weights [:prop-clear :alt 4] 100)
            (gen/tuple
              (gen/return "inline-start")
              (gen/return " "))]
          [(get weights [:prop-clear :alt 5] 100)
            (gen/tuple
              (gen/return "inline-end")
              (gen/return " "))]])
        gmap (assoc gmap :prop-clear gen-prop-clear)

        gen-nonprop-east-asian-variant-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "jis78")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "jis83")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "jis90")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/return "jis04")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 4] 100)
              (gen/tuple
                (gen/return "simplified")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-variant-values :cat 0 :alt 5] 100)
              (gen/tuple
                (gen/return "traditional")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-east-asian-variant-values gen-nonprop-east-asian-variant-values)

        gen-prop-outline-offset
        (gen/tuple
          (:nonprop-length gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-outline-offset gen-prop-outline-offset)

        gen-nonprop-ratio
        (gen/tuple
          (:nonprop-positive-integer gmap)
          (gen/return "/")
          (:nonprop-positive-integer gmap))
        gmap (assoc gmap :nonprop-ratio gen-nonprop-ratio)

        gen-nonprop-viewport-length
        (gen/frequency [
          [(get weights [:nonprop-viewport-length :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:nonprop-viewport-length :alt 1] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-viewport-length gen-nonprop-viewport-length)

        gen-prop-column-rule-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-column-rule-width gen-prop-column-rule-width)

        gen-nonprop-column-rule-width
        (:prop-column-rule-width gmap)
        gmap (assoc gmap :nonprop-column-rule-width gen-nonprop-column-rule-width)

        gen-prop-column-rule-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-column-rule-color gen-prop-column-rule-color)

        gen-nonprop-column-rule-color
        (:prop-column-rule-color gmap)
        gmap (assoc gmap :nonprop-column-rule-color gen-nonprop-column-rule-color)

        gen-nonprop-column-rule-style
        (:prop-column-rule-style gmap)
        gmap (assoc gmap :nonprop-column-rule-style gen-nonprop-column-rule-style)

        gen-prop-column-rule
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-column-rule :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-column-rule-width gmap)
                (gen/return " "))]
            [(get weights [:prop-column-rule :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-column-rule-style gmap)
                (gen/return " "))]
            [(get weights [:prop-column-rule :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-column-rule-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-column-rule gen-prop-column-rule)

        gen-nonprop-bg-image
        (gen/frequency [
          [(get weights [:nonprop-bg-image :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:nonprop-bg-image :alt 1] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-bg-image gen-nonprop-bg-image)

        gen-func-skewY
        (gen/tuple
          (gen/return "skewY(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-skewY gen-func-skewY)

        gen-prop-border-style
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-style :cat 0 :alt 0] 100)
              (:nonprop-br-style gmap)]
            [(get weights [:prop-border-style :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap))]
            [(get weights [:prop-border-style :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap))]
            [(get weights [:prop-border-style :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap)
                (:nonprop-br-style gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-style gen-prop-border-style)

        gen-nonprop-border-style
        (:prop-border-style gmap)
        gmap (assoc gmap :nonprop-border-style gen-nonprop-border-style)

        gen-prop--webkit-border-before-style
        (gen/tuple
          (:nonprop-border-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-border-before-style gen-prop--webkit-border-before-style)

        gen-prop-orphans
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-orphans gen-prop-orphans)

        gen-prop-shape-image-threshold
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-shape-image-threshold gen-prop-shape-image-threshold)

        gen-func-scaleY
        (gen/tuple
          (gen/return "scaleY(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-scaleY gen-func-scaleY)

        gen-nonprop-discretionary-lig-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-discretionary-lig-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "discretionary-ligatures")
                (gen/return " "))]
            [(get weights [:nonprop-discretionary-lig-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "no-discretionary-ligatures")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-discretionary-lig-values gen-nonprop-discretionary-lig-values)

        gen-prop-border-block-start-style
        (gen/tuple
          (:nonprop-border-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-start-style gen-prop-border-block-start-style)

        gen-nonprop-blend-mode
        (gen/frequency [
          [(get weights [:nonprop-blend-mode :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 1] 100)
            (gen/tuple
              (gen/return "multiply")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 2] 100)
            (gen/tuple
              (gen/return "screen")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 3] 100)
            (gen/tuple
              (gen/return "overlay")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 4] 100)
            (gen/tuple
              (gen/return "darken")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 5] 100)
            (gen/tuple
              (gen/return "lighten")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 6] 100)
            (gen/tuple
              (gen/return "color-dodge")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 7] 100)
            (gen/tuple
              (gen/return "color-burn")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 8] 100)
            (gen/tuple
              (gen/return "hard-light")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 9] 100)
            (gen/tuple
              (gen/return "soft-light")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 10] 100)
            (gen/tuple
              (gen/return "difference")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 11] 100)
            (gen/tuple
              (gen/return "exclusion")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 12] 100)
            (gen/tuple
              (gen/return "hue")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 13] 100)
            (gen/tuple
              (gen/return "saturation")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 14] 100)
            (gen/tuple
              (gen/return "color")
              (gen/return " "))]
          [(get weights [:nonprop-blend-mode :alt 15] 100)
            (gen/tuple
              (gen/return "luminosity")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-blend-mode gen-nonprop-blend-mode)

        gen-prop-background-blend-mode
        (gen/tuple
          (:nonprop-blend-mode gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-blend-mode gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-blend-mode gen-prop-background-blend-mode)

        gen-prop-overflow-clip-box
        (gen/frequency [
          [(get weights [:prop-overflow-clip-box :alt 0] 100)
            (gen/tuple
              (gen/return "padding-box")
              (gen/return " "))]
          [(get weights [:prop-overflow-clip-box :alt 1] 100)
            (gen/tuple
              (gen/return "content-box")
              (gen/return " "))]])
        gmap (assoc gmap :prop-overflow-clip-box gen-prop-overflow-clip-box)

        gen-prop-box-lines
        (gen/frequency [
          [(get weights [:prop-box-lines :alt 0] 100)
            (gen/tuple
              (gen/return "single")
              (gen/return " "))]
          [(get weights [:prop-box-lines :alt 1] 100)
            (gen/tuple
              (gen/return "multiple")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-lines gen-prop-box-lines)

        gen-prop-border-width
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-width :cat 0 :alt 0] 100)
              (:nonprop-br-width gmap)]
            [(get weights [:prop-border-width :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap))]
            [(get weights [:prop-border-width :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap))]
            [(get weights [:prop-border-width :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap)
                (:nonprop-br-width gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-width gen-prop-border-width)

        gen-nonprop-border-width
        (:prop-border-width gmap)
        gmap (assoc gmap :nonprop-border-width gen-nonprop-border-width)

        gen-prop-border-inline-end-width
        (gen/tuple
          (:nonprop-border-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-end-width gen-prop-border-inline-end-width)

        gen-nonprop-custom-property-name
        (gen/return "STUB_custom_property")
        gmap (assoc gmap :nonprop-custom-property-name gen-nonprop-custom-property-name)

        gen-nonprop-declaration-value
        (gen/return "STUB_declaration_value")
        gmap (assoc gmap :nonprop-declaration-value gen-nonprop-declaration-value)

        gen-func-var
        (gen/tuple
          (gen/return "var(")
          (gen/return " ")
          (:nonprop-custom-property-name gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-declaration-value gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-var gen-func-var)

        gen-prop-border-image-source
        (gen/frequency [
          [(get weights [:prop-border-image-source :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-border-image-source :alt 1] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-border-image-source gen-prop-border-image-source)

        gen-prop-font-language-override
        (gen/frequency [
          [(get weights [:prop-font-language-override :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-language-override :alt 1] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-language-override gen-prop-font-language-override)

        gen-prop-word-spacing
        (gen/frequency [
          [(get weights [:prop-word-spacing :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-word-spacing :alt 1] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-word-spacing gen-prop-word-spacing)

        gen-prop-opacity
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-opacity gen-prop-opacity)

        gen-nonprop-attachment
        (gen/frequency [
          [(get weights [:nonprop-attachment :alt 0] 100)
            (gen/tuple
              (gen/return "scroll")
              (gen/return " "))]
          [(get weights [:nonprop-attachment :alt 1] 100)
            (gen/tuple
              (gen/return "fixed")
              (gen/return " "))]
          [(get weights [:nonprop-attachment :alt 2] 100)
            (gen/tuple
              (gen/return "local")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-attachment gen-nonprop-attachment)

        gen-nonprop-single-animation-fill-mode
        (gen/frequency [
          [(get weights [:nonprop-single-animation-fill-mode :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-fill-mode :alt 1] 100)
            (gen/tuple
              (gen/return "forwards")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-fill-mode :alt 2] 100)
            (gen/tuple
              (gen/return "backwards")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-fill-mode :alt 3] 100)
            (gen/tuple
              (gen/return "both")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-animation-fill-mode gen-nonprop-single-animation-fill-mode)

        gen-prop-display-list
        (gen/frequency [
          [(get weights [:prop-display-list :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-display-list :alt 1] 100)
            (gen/tuple
              (gen/return "list-item")
              (gen/return " "))]])
        gmap (assoc gmap :prop-display-list gen-prop-display-list)

        gen-prop-inline-size
        (gen/tuple
          (:nonprop-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-inline-size gen-prop-inline-size)

        gen-prop-grid-row-gap
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-row-gap gen-prop-grid-row-gap)

        gen-prop-grid-template-rows
        (gen/frequency [
          [(get weights [:prop-grid-template-rows :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-grid-template-rows :alt 1] 100)
            (gen/tuple
              (:nonprop-track-list gmap)
              (gen/return " "))]
          [(get weights [:prop-grid-template-rows :alt 2] 100)
            (gen/tuple
              (:nonprop-auto-track-list gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-grid-template-rows gen-prop-grid-template-rows)

        gen-nonprop-grid-template-rows
        (:prop-grid-template-rows gmap)
        gmap (assoc gmap :nonprop-grid-template-rows gen-nonprop-grid-template-rows)

        gen-nonprop-explicit-track-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/tuple
              (gen/one-of [
                (gen/return "")
                (:nonprop-line-names gmap)])
              (gen/return " ")
              (:nonprop-track-size gmap)
              (gen/return " "))))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-line-names gmap)])
          (gen/return " "))
        gmap (assoc gmap :nonprop-explicit-track-list gen-nonprop-explicit-track-list)

        gen-prop-grid-template
        (gen/frequency [
          [(get weights [:prop-grid-template :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-grid-template :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-grid-template-rows gmap)
                (gen/return " ")
                (gen/return "/")
                (gen/return " ")
                (:nonprop-grid-template-columns gmap)
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:prop-grid-template :alt 2] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-line-names gmap)])
                  (gen/return " ")
                  (:nonprop-string gmap)
                  (gen/return " ")
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-track-size gmap)])
                  (gen/return " ")
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-line-names gmap)])
                  (gen/return " "))))
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-explicit-track-list gmap)
                  (gen/return " "))])
              (gen/return " "))]])
        gmap (assoc gmap :prop-grid-template gen-prop-grid-template)]
    gmap))

(defn- css3-generators-part-4 [gmap weights]
  (let [
        gen-prop-outline-color
        (gen/frequency [
          [(get weights [:prop-outline-color :alt 0] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/return " "))]
          [(get weights [:prop-outline-color :alt 1] 100)
            (gen/tuple
              (gen/return "invert")
              (gen/return " "))]])
        gmap (assoc gmap :prop-outline-color gen-prop-outline-color)

        gen-nonprop-outline-color
        (:prop-outline-color gmap)
        gmap (assoc gmap :nonprop-outline-color gen-nonprop-outline-color)

        gen-prop-border-left-style
        (gen/tuple
          (:nonprop-br-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-left-style gen-prop-border-left-style)

        gen-prop-widows
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-widows gen-prop-widows)

        gen-prop-break-inside
        (gen/frequency [
          [(get weights [:prop-break-inside :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-break-inside :alt 1] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]
          [(get weights [:prop-break-inside :alt 2] 100)
            (gen/tuple
              (gen/return "avoid-page")
              (gen/return " "))]
          [(get weights [:prop-break-inside :alt 3] 100)
            (gen/tuple
              (gen/return "avoid-column")
              (gen/return " "))]
          [(get weights [:prop-break-inside :alt 4] 100)
            (gen/tuple
              (gen/return "avoid-region")
              (gen/return " "))]])
        gmap (assoc gmap :prop-break-inside gen-prop-break-inside)

        gen-nonprop-keyframes-name
        (gen/frequency [
          [(get weights [:nonprop-keyframes-name :alt 0] 100)
            (gen/tuple
              (:nonprop-custom-ident gmap)
              (gen/return " "))]
          [(get weights [:nonprop-keyframes-name :alt 1] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-keyframes-name gen-nonprop-keyframes-name)

        gen-prop-animation-name
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-animation-name :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "none")
                (gen/return " "))]
            [(get weights [:prop-animation-name :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-keyframes-name gmap)
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop-animation-name :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (gen/return "none")
                    (gen/return " "))]
                [(get weights [:prop-animation-name :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-keyframes-name gmap)
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-name gen-prop-animation-name)

        gen-prop-padding-block-end
        (gen/tuple
          (:nonprop-padding-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-padding-block-end gen-prop-padding-block-end)

        gen-func-target-counters
        (gen/tuple
          (gen/return "target-counters(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-target-counters :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-string gmap)
                (gen/return " "))]
            [(get weights [:func-target-counters :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-url gmap)
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-custom-ident gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-string gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-counter-style gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-target-counters gen-func-target-counters)

        gen-func-target-text
        (gen/tuple
          (gen/return "target-text(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-target-text :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-string gmap)
                (gen/return " "))]
            [(get weights [:func-target-text :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-url gmap)
                (gen/return " "))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (gen/frequency [
                [(get weights [:func-target-text :cat 4 :opt :cat 2 :alt 0] 100)
                  (gen/tuple
                    (gen/return "content")
                    (gen/return " "))]
                [(get weights [:func-target-text :cat 4 :opt :cat 2 :alt 1] 100)
                  (gen/tuple
                    (gen/return "before")
                    (gen/return " "))]
                [(get weights [:func-target-text :cat 4 :opt :cat 2 :alt 2] 100)
                  (gen/tuple
                    (gen/return "after")
                    (gen/return " "))]
                [(get weights [:func-target-text :cat 4 :opt :cat 2 :alt 3] 100)
                  (gen/tuple
                    (gen/return "first-letter")
                    (gen/return " "))]])
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-target-text gen-func-target-text)

        gen-func-target-counter
        (gen/tuple
          (gen/return "target-counter(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-target-counter :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-string gmap)
                (gen/return " "))]
            [(get weights [:func-target-counter :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-url gmap)
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-custom-ident gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-counter-style gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-target-counter gen-func-target-counter)

        gen-nonprop-target
        (gen/frequency [
          [(get weights [:nonprop-target :alt 0] 100)
            (gen/tuple
              (:func-target-counter gmap)
              (gen/return " "))]
          [(get weights [:nonprop-target :alt 1] 100)
            (gen/tuple
              (:func-target-counters gmap)
              (gen/return " "))]
          [(get weights [:nonprop-target :alt 2] 100)
            (gen/tuple
              (:func-target-text gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-target gen-nonprop-target)

        gen-func-rotateY
        (gen/tuple
          (gen/return "rotateY(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-rotateY gen-func-rotateY)

        gen-prop-mask-clip
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-mask-clip :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-geometry-box gmap)
                (gen/return " "))]
            [(get weights [:prop-mask-clip :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "no-clip")
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop-mask-clip :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-geometry-box gmap)
                    (gen/return " "))]
                [(get weights [:prop-mask-clip :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/return "no-clip")
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-clip gen-prop-mask-clip)

        gen-nonprop-mask-clip
        (:prop-mask-clip gmap)
        gmap (assoc gmap :nonprop-mask-clip gen-nonprop-mask-clip)

        gen-prop-flex-wrap
        (gen/frequency [
          [(get weights [:prop-flex-wrap :alt 0] 100)
            (gen/tuple
              (gen/return "nowrap")
              (gen/return " "))]
          [(get weights [:prop-flex-wrap :alt 1] 100)
            (gen/tuple
              (gen/return "wrap")
              (gen/return " "))]
          [(get weights [:prop-flex-wrap :alt 2] 100)
            (gen/tuple
              (gen/return "wrap-reverse")
              (gen/return " "))]])
        gmap (assoc gmap :prop-flex-wrap gen-prop-flex-wrap)

        gen-nonprop-flex-wrap
        (:prop-flex-wrap gmap)
        gmap (assoc gmap :nonprop-flex-wrap gen-nonprop-flex-wrap)

        gen-prop-outline-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-outline-width gen-prop-outline-width)

        gen-prop-grid-auto-columns
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (:nonprop-track-size gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-grid-auto-columns gen-prop-grid-auto-columns)

        gen-nonprop-grid-template
        (:prop-grid-template gmap)
        gmap (assoc gmap :nonprop-grid-template gen-nonprop-grid-template)

        gen-nonprop-grid-auto-columns
        (:prop-grid-auto-columns gmap)
        gmap (assoc gmap :nonprop-grid-auto-columns gen-nonprop-grid-auto-columns)

        gen-prop-grid
        (gen/frequency [
          [(get weights [:prop-grid :alt 0] 100)
            (gen/tuple
              (:nonprop-grid-template gmap)
              (gen/return " "))]
          [(get weights [:prop-grid :alt 1] 100)
            (gen/tuple
              (:nonprop-grid-template-rows gmap)
              (gen/return " ")
              (gen/return "/")
              (gen/return " ")
              (gen/tuple
                (gen/return "auto-flow")
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/return "dense")])
                (gen/return " "))
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (:nonprop-grid-auto-columns gmap)])
              (gen/return " "))]
          [(get weights [:prop-grid :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (gen/return "auto-flow")
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/return "dense")])
                (gen/return " "))
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (:nonprop-grid-auto-rows gmap)])
              (gen/return " ")
              (gen/return "/")
              (gen/return " ")
              (:nonprop-grid-template-columns gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-grid gen-prop-grid)

        gen-prop-padding-inline-end
        (gen/tuple
          (:nonprop-padding-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-padding-inline-end gen-prop-padding-inline-end)

        gen-prop-counter-reset
        (gen/frequency [
          [(get weights [:prop-counter-reset :alt 0] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/tuple
                  (:nonprop-custom-ident gmap)
                  (gen/return " ")
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-integer gmap)])
                  (gen/return " "))))
              (gen/return " "))]
          [(get weights [:prop-counter-reset :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-counter-reset gen-prop-counter-reset)

        gen-prop-text-align-last
        (gen/frequency [
          [(get weights [:prop-text-align-last :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 1] 100)
            (gen/tuple
              (gen/return "start")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 2] 100)
            (gen/tuple
              (gen/return "end")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 3] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 4] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 5] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-text-align-last :alt 6] 100)
            (gen/tuple
              (gen/return "justify")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-align-last gen-prop-text-align-last)

        gen-nonprop-display-inside
        (gen/frequency [
          [(get weights [:nonprop-display-inside :alt 0] 100)
            (gen/tuple
              (gen/return "flow")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 1] 100)
            (gen/tuple
              (gen/return "flow-root")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 2] 100)
            (gen/tuple
              (gen/return "table")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 3] 100)
            (gen/tuple
              (gen/return "flex")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 4] 100)
            (gen/tuple
              (gen/return "grid")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 5] 100)
            (gen/tuple
              (gen/return "subgrid")
              (gen/return " "))]
          [(get weights [:nonprop-display-inside :alt 6] 100)
            (gen/tuple
              (gen/return "ruby")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-display-inside gen-nonprop-display-inside)

        gen-nonprop-mask-attachment
        (gen/return "STUB_mask_attachment")
        gmap (assoc gmap :nonprop-mask-attachment gen-nonprop-mask-attachment)

        gen-nonprop-number-percentage
        (gen/frequency [
          [(get weights [:nonprop-number-percentage :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:nonprop-number-percentage :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-number-percentage gen-nonprop-number-percentage)

        gen-func-contrast
        (gen/tuple
          (gen/return "contrast(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-contrast gen-func-contrast)

        gen-func-brightness
        (gen/tuple
          (gen/return "brightness(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-brightness gen-func-brightness)

        gen-func-drop-shadow
        (gen/tuple
          (gen/return "drop-shadow(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-drop-shadow :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:nonprop-length gmap))]
            [(get weights [:func-drop-shadow :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (:nonprop-length gmap)
                (:nonprop-length gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-color gmap)])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-drop-shadow gen-func-drop-shadow)

        gen-func-saturate
        (gen/tuple
          (gen/return "saturate(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-saturate gen-func-saturate)

        gen-func-hue-rotate
        (gen/tuple
          (gen/return "hue-rotate(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-hue-rotate gen-func-hue-rotate)

        gen-func-blur
        (gen/tuple
          (gen/return "blur(")
          (gen/return " ")
          (:nonprop-length gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-blur gen-func-blur)

        gen-func-opacity
        (gen/tuple
          (gen/return "opacity(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-opacity gen-func-opacity)

        gen-func-grayscale
        (gen/tuple
          (gen/return "grayscale(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-grayscale gen-func-grayscale)

        gen-func-sepia
        (gen/tuple
          (gen/return "sepia(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-sepia gen-func-sepia)

        gen-func-invert
        (gen/tuple
          (gen/return "invert(")
          (gen/return " ")
          (:nonprop-number-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-invert gen-func-invert)

        gen-nonprop-filter-function
        (gen/frequency [
          [(get weights [:nonprop-filter-function :alt 0] 100)
            (gen/tuple
              (:func-blur gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 1] 100)
            (gen/tuple
              (:func-brightness gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 2] 100)
            (gen/tuple
              (:func-contrast gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 3] 100)
            (gen/tuple
              (:func-drop-shadow gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 4] 100)
            (gen/tuple
              (:func-grayscale gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 5] 100)
            (gen/tuple
              (:func-hue-rotate gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 6] 100)
            (gen/tuple
              (:func-invert gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 7] 100)
            (gen/tuple
              (:func-opacity gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 8] 100)
            (gen/tuple
              (:func-sepia gmap)
              (gen/return " "))]
          [(get weights [:nonprop-filter-function :alt 9] 100)
            (gen/tuple
              (:func-saturate gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-filter-function gen-nonprop-filter-function)

        gen-nonprop-filter-function-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-filter-function-list :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-filter-function gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-filter-function-list :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-url gmap)
                  (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :nonprop-filter-function-list gen-nonprop-filter-function-list)

        gen-prop-backdrop-filter
        (gen/frequency [
          [(get weights [:prop-backdrop-filter :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-backdrop-filter :alt 1] 100)
            (gen/tuple
              (:nonprop-filter-function-list gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-backdrop-filter gen-prop-backdrop-filter)

        gen-prop-display-inside
        (gen/frequency [
          [(get weights [:prop-display-inside :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-display-inside :alt 1] 100)
            (gen/tuple
              (gen/return "block")
              (gen/return " "))]
          [(get weights [:prop-display-inside :alt 2] 100)
            (gen/tuple
              (gen/return "table")
              (gen/return " "))]
          [(get weights [:prop-display-inside :alt 3] 100)
            (gen/tuple
              (gen/return "flex")
              (gen/return " "))]
          [(get weights [:prop-display-inside :alt 4] 100)
            (gen/tuple
              (gen/return "grid")
              (gen/return " "))]
          [(get weights [:prop-display-inside :alt 5] 100)
            (gen/tuple
              (gen/return "ruby")
              (gen/return " "))]])
        gmap (assoc gmap :prop-display-inside gen-prop-display-inside)

        gen-nonprop-attr-fallback
        (gen/return "STUB_attr_fallback")
        gmap (assoc gmap :nonprop-attr-fallback gen-nonprop-attr-fallback)

        gen-nonprop-attr-name
        (gen/return "STUB_attr_name")
        gmap (assoc gmap :nonprop-attr-name gen-nonprop-attr-name)

        gen-nonprop-type-or-unit
        (gen/frequency [
          [(get weights [:nonprop-type-or-unit :alt 0] 100)
            (gen/tuple
              (gen/return "string")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 1] 100)
            (gen/tuple
              (gen/return "integer")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 2] 100)
            (gen/tuple
              (gen/return "color")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 3] 100)
            (gen/tuple
              (gen/return "url")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 4] 100)
            (gen/tuple
              (gen/return "integer")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 5] 100)
            (gen/tuple
              (gen/return "number")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 6] 100)
            (gen/tuple
              (gen/return "length")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 7] 100)
            (gen/tuple
              (gen/return "angle")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 8] 100)
            (gen/tuple
              (gen/return "time")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 9] 100)
            (gen/tuple
              (gen/return "frequency")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 10] 100)
            (gen/tuple
              (gen/return "em")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 11] 100)
            (gen/tuple
              (gen/return "ex")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 12] 100)
            (gen/tuple
              (gen/return "px")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 13] 100)
            (gen/tuple
              (gen/return "rem")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 14] 100)
            (gen/tuple
              (gen/return "vw")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 15] 100)
            (gen/tuple
              (gen/return "vh")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 16] 100)
            (gen/tuple
              (gen/return "vmin")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 17] 100)
            (gen/tuple
              (gen/return "vmax")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 18] 100)
            (gen/tuple
              (gen/return "mm")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 19] 100)
            (gen/tuple
              (gen/return "q")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 20] 100)
            (gen/tuple
              (gen/return "cm")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 21] 100)
            (gen/tuple
              (gen/return "in")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 22] 100)
            (gen/tuple
              (gen/return "pt")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 23] 100)
            (gen/tuple
              (gen/return "pc")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 24] 100)
            (gen/tuple
              (gen/return "deg")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 25] 100)
            (gen/tuple
              (gen/return "grad")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 26] 100)
            (gen/tuple
              (gen/return "rad")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 27] 100)
            (gen/tuple
              (gen/return "ms")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 28] 100)
            (gen/tuple
              (gen/return "s")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 29] 100)
            (gen/tuple
              (gen/return "Hz")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 30] 100)
            (gen/tuple
              (gen/return "kHz")
              (gen/return " "))]
          [(get weights [:nonprop-type-or-unit :alt 31] 100)
            (gen/tuple
              (gen/return "%")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-type-or-unit gen-nonprop-type-or-unit)

        gen-func-attr
        (gen/tuple
          (gen/return "attr(")
          (gen/return " ")
          (:nonprop-attr-name gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-type-or-unit gmap)])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-attr-fallback gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-attr gen-func-attr)

        gen-prop--webkit-text-stroke-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-text-stroke-color gen-prop--webkit-text-stroke-color)

        gen-prop-animation-duration
        (gen/tuple
          (:nonprop-time gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-time gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-duration gen-prop-animation-duration)

        gen-prop-scroll-snap-points-y
        (gen/frequency [
          [(get weights [:prop-scroll-snap-points-y :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-points-y :alt 1] 100)
            (gen/tuple
              (gen/return "repeat(")
              (gen/return " ")
              (:nonprop-length-percentage gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-points-y gen-prop-scroll-snap-points-y)

        gen-prop-user-select
        (gen/frequency [
          [(get weights [:prop-user-select :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-user-select :alt 1] 100)
            (gen/tuple
              (gen/return "text")
              (gen/return " "))]
          [(get weights [:prop-user-select :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-user-select :alt 3] 100)
            (gen/tuple
              (gen/return "contain")
              (gen/return " "))]
          [(get weights [:prop-user-select :alt 4] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return " "))]])
        gmap (assoc gmap :prop-user-select gen-prop-user-select)]
    gmap))

(defn- css3-generators-part-5 [gmap weights]
  (let [
        gen-prop-border-block-start
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-block-start :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-border-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-block-start :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-border-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-block-start :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-block-start gen-prop-border-block-start)

        gen-nonprop-shadow-t
        (gen/tuple
          (gen/tuple
            (gen/frequency [
              [(get weights [:nonprop-shadow-t :cat 0 :cat 0 :alt 0] 100)
                (gen/tuple
                  (:nonprop-length gmap)
                  (:nonprop-length gmap))]
              [(get weights [:nonprop-shadow-t :cat 0 :cat 0 :alt 1] 100)
                (gen/tuple
                  (:nonprop-length gmap)
                  (:nonprop-length gmap)
                  (:nonprop-length gmap))]])
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              (:nonprop-color gmap)])
            (gen/return " "))
          (gen/return " "))
        gmap (assoc gmap :nonprop-shadow-t gen-nonprop-shadow-t)

        gen-prop-text-shadow
        (gen/frequency [
          [(get weights [:prop-text-shadow :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-shadow :alt 1] 100)
            (gen/tuple
              (:nonprop-shadow-t gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-shadow-t gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-shadow gen-prop-text-shadow)

        gen-nonprop-feature-value-name
        (gen/tuple
          (:nonprop-custom-ident gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-value-name gen-nonprop-feature-value-name)

        gen-prop--moz-window-shadow
        (gen/frequency [
          [(get weights [:prop--moz-window-shadow :alt 0] 100)
            (gen/tuple
              (gen/return "default")
              (gen/return " "))]
          [(get weights [:prop--moz-window-shadow :alt 1] 100)
            (gen/tuple
              (gen/return "menu")
              (gen/return " "))]
          [(get weights [:prop--moz-window-shadow :alt 2] 100)
            (gen/tuple
              (gen/return "tooltip")
              (gen/return " "))]
          [(get weights [:prop--moz-window-shadow :alt 3] 100)
            (gen/tuple
              (gen/return "sheet")
              (gen/return " "))]
          [(get weights [:prop--moz-window-shadow :alt 4] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-window-shadow gen-prop--moz-window-shadow)

        gen-prop--webkit-text-stroke
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop--webkit-text-stroke :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (gen/return " "))]
            [(get weights [:prop--webkit-text-stroke :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop--webkit-text-stroke gen-prop--webkit-text-stroke)

        gen-prop-border-left-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-left-color gen-prop-border-left-color)

        gen-prop-direction
        (gen/frequency [
          [(get weights [:prop-direction :alt 0] 100)
            (gen/tuple
              (gen/return "ltr")
              (gen/return " "))]
          [(get weights [:prop-direction :alt 1] 100)
            (gen/tuple
              (gen/return "rtl")
              (gen/return " "))]])
        gmap (assoc gmap :prop-direction gen-prop-direction)

        gen-prop-min-width
        (gen/frequency [
          [(get weights [:prop-min-width :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 4] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 5] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-min-width :alt 6] 100)
            (gen/tuple
              (gen/return "fill-available")
              (gen/return " "))]])
        gmap (assoc gmap :prop-min-width gen-prop-min-width)

        gen-nonprop-min-width
        (:prop-min-width gmap)
        gmap (assoc gmap :nonprop-min-width gen-nonprop-min-width)

        gen-prop-min-block-size
        (gen/tuple
          (:nonprop-min-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-min-block-size gen-prop-min-block-size)

        gen-nonprop-single-transition-timing-function
        (gen/frequency [
          [(get weights [:nonprop-single-transition-timing-function :alt 0] 100)
            (gen/tuple
              (gen/return "ease")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 1] 100)
            (gen/tuple
              (gen/return "linear")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 2] 100)
            (gen/tuple
              (gen/return "ease-in")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 3] 100)
            (gen/tuple
              (gen/return "ease-out")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 4] 100)
            (gen/tuple
              (gen/return "ease-in-out")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 5] 100)
            (gen/tuple
              (gen/return "step-start")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 6] 100)
            (gen/tuple
              (gen/return "step-end")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 7] 100)
            (gen/tuple
              (gen/return "steps(")
              (gen/return " ")
              (:nonprop-integer gmap)
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (gen/frequency [
                    [(get weights [:nonprop-single-transition-timing-function :alt 7 :cat 4 :opt :cat 2 :alt 0] 100)
                      (gen/tuple
                        (gen/return "start")
                        (gen/return " "))]
                    [(get weights [:nonprop-single-transition-timing-function :alt 7 :cat 4 :opt :cat 2 :alt 1] 100)
                      (gen/tuple
                        (gen/return "end")
                        (gen/return " "))]])
                  (gen/return " "))])
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]
          [(get weights [:nonprop-single-transition-timing-function :alt 8] 100)
            (gen/tuple
              (gen/return "cubic-bezier(")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " ")
              (gen/return ", ")
              (:nonprop-number gmap)
              (gen/return " ")
              (gen/return ", ")
              (:nonprop-number gmap)
              (gen/return " ")
              (gen/return ", ")
              (:nonprop-number gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-transition-timing-function gen-nonprop-single-transition-timing-function)

        gen-nonprop-single-transition
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:nonprop-single-transition :plus :alt 0] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-single-transition :plus :alt 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "none")
                      (gen/return " "))]
                  [(get weights [:nonprop-single-transition :plus :alt 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-single-transition-property gmap)
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:nonprop-single-transition :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-time gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-transition :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-single-transition-timing-function gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-transition :plus :alt 3] 100)
              (gen/tuple
                (:nonprop-time gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :nonprop-single-transition gen-nonprop-single-transition)

        gen-prop-marker-offset
        (gen/frequency [
          [(get weights [:prop-marker-offset :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-marker-offset :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-marker-offset gen-prop-marker-offset)

        gen-prop-image-resolution
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:prop-image-resolution :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (gen/return "from-image")
                  (gen/return " "))]
              [(get weights [:prop-image-resolution :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-resolution gmap)
                  (gen/return " "))]])))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "snap")])
          (gen/return " "))
        gmap (assoc gmap :prop-image-resolution gen-prop-image-resolution)

        gen-prop-offset-inline-start
        (gen/tuple
          (:nonprop-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-offset-inline-start gen-prop-offset-inline-start)

        gen-nonprop-mask-source
        (gen/tuple
          (:nonprop-url gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-mask-source gen-nonprop-mask-source)

        gen-nonprop-mask-reference
        (gen/frequency [
          [(get weights [:nonprop-mask-reference :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:nonprop-mask-reference :alt 1] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mask-reference :alt 2] 100)
            (gen/tuple
              (:nonprop-mask-source gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-mask-reference gen-nonprop-mask-reference)

        gen-prop-mask-image
        (gen/tuple
          (:nonprop-mask-reference gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-mask-reference gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-image gen-prop-mask-image)

        gen-nonprop-mask-image
        (:prop-mask-image gmap)
        gmap (assoc gmap :nonprop-mask-image gen-nonprop-mask-image)

        gen-prop--webkit-mask-image
        (gen/tuple
          (:nonprop-mask-image gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-mask-image gmap)
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-image gen-prop--webkit-mask-image)

        gen-prop-border-top-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-top-color gen-prop-border-top-color)

        gen-prop-border-right-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-right-color gen-prop-border-right-color)

        gen-nonprop-page-margin-box-type
        (gen/frequency [
          [(get weights [:nonprop-page-margin-box-type :alt 0] 100)
            (gen/tuple
              (gen/return "@top-left-corner")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 1] 100)
            (gen/tuple
              (gen/return "@top-left")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 2] 100)
            (gen/tuple
              (gen/return "@top-center")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 3] 100)
            (gen/tuple
              (gen/return "@top-right")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 4] 100)
            (gen/tuple
              (gen/return "@top-right-corner")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 5] 100)
            (gen/tuple
              (gen/return "@bottom-left-corner")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 6] 100)
            (gen/tuple
              (gen/return "@bottom-left")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 7] 100)
            (gen/tuple
              (gen/return "@bottom-center")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 8] 100)
            (gen/tuple
              (gen/return "@bottom-right")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 9] 100)
            (gen/tuple
              (gen/return "@bottom-right-corner")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 10] 100)
            (gen/tuple
              (gen/return "@left-top")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 11] 100)
            (gen/tuple
              (gen/return "@left-middle")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 12] 100)
            (gen/tuple
              (gen/return "@left-bottom")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 13] 100)
            (gen/tuple
              (gen/return "@right-top")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 14] 100)
            (gen/tuple
              (gen/return "@right-middle")
              (gen/return " "))]
          [(get weights [:nonprop-page-margin-box-type :alt 15] 100)
            (gen/tuple
              (gen/return "@right-bottom")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-page-margin-box-type gen-nonprop-page-margin-box-type)

        gen-nonprop-declaration-list
        (gen/return "STUB_declaration_list")
        gmap (assoc gmap :nonprop-declaration-list gen-nonprop-declaration-list)

        gen-nonprop-page-margin-box
        (gen/tuple
          (:nonprop-page-margin-box-type gmap)
          (gen/return " ")
          (gen/return "{")
          (:nonprop-declaration-list gmap)
          (gen/return " ")
          (gen/return "}")
          (gen/return " "))
        gmap (assoc gmap :nonprop-page-margin-box gen-nonprop-page-margin-box)

        gen-func-translateY
        (gen/tuple
          (gen/return "translateY(")
          (gen/return " ")
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-translateY gen-func-translateY)

        gen-func-scale
        (gen/tuple
          (gen/return "scale(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-scale gen-func-scale)

        gen-func-rotateZ
        (gen/tuple
          (gen/return "rotateZ(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-rotateZ gen-func-rotateZ)

        gen-func-rotate3d
        (gen/tuple
          (gen/return "rotate3d(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-rotate3d gen-func-rotate3d)

        gen-func-skewX
        (gen/tuple
          (gen/return "skewX(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-skewX gen-func-skewX)

        gen-func-matrix3d
        (gen/tuple
          (gen/return "matrix3d(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-matrix3d :cat 4 :alt 0] 100)
              (gen/tuple
                (gen/return ",")
                (gen/return " ")
                (:nonprop-number gmap)
                (gen/return " "))]
            [(get weights [:func-matrix3d :cat 4 :alt 1] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " ")))]
            [(get weights [:func-matrix3d :cat 4 :alt 2] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " ")))]
            [(get weights [:func-matrix3d :cat 4 :alt 3] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " ")))]
            [(get weights [:func-matrix3d :cat 4 :alt 4] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return ",")
                  (gen/return " ")
                  (:nonprop-number gmap)
                  (gen/return " ")))]])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-matrix3d gen-func-matrix3d)

        gen-func-translate
        (gen/tuple
          (gen/return "translate(")
          (gen/return " ")
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-length-percentage gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-translate gen-func-translate)

        gen-func-scaleZ
        (gen/tuple
          (gen/return "scaleZ(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-scaleZ gen-func-scaleZ)

        gen-func-scale3d
        (gen/tuple
          (gen/return "scale3d(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-scale3d gen-func-scale3d)

        gen-func-rotateX
        (gen/tuple
          (gen/return "rotateX(")
          (gen/return " ")
          (:nonprop-angle gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-rotateX gen-func-rotateX)

        gen-func-scaleX
        (gen/tuple
          (gen/return "scaleX(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-scaleX gen-func-scaleX)

        gen-func-matrix
        (gen/tuple
          (gen/return "matrix(")
          (gen/return " ")
          (:nonprop-number gmap)
          (gen/return " ")
          (gen/tuple
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " "))
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " "))
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " "))
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " "))
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-number gmap)
              (gen/return " ")))
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-matrix gen-func-matrix)

        gen-func-perspective
        (gen/tuple
          (gen/return "perspective(")
          (gen/return " ")
          (:nonprop-length gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-perspective gen-func-perspective)

        gen-func-translate3d
        (gen/tuple
          (gen/return "translate3d(")
          (gen/return " ")
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-length gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-translate3d gen-func-translate3d)

        gen-func-translateX
        (gen/tuple
          (gen/return "translateX(")
          (gen/return " ")
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-translateX gen-func-translateX)

        gen-func-translateZ
        (gen/tuple
          (gen/return "translateZ(")
          (gen/return " ")
          (:nonprop-length gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-translateZ gen-func-translateZ)

        gen-nonprop-transform-function
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 0] 100)
                  (gen/tuple
                    (:func-matrix gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 1] 100)
                  (gen/tuple
                    (:func-translate gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 2] 100)
                  (gen/tuple
                    (:func-translateX gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 3] 100)
                  (gen/tuple
                    (:func-translateY gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 4] 100)
                  (gen/tuple
                    (:func-scale gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 5] 100)
                  (gen/tuple
                    (:func-scaleX gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 6] 100)
                  (gen/tuple
                    (:func-scaleY gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 7] 100)
                  (gen/tuple
                    (:func-rotate gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 8] 100)
                  (gen/tuple
                    (:func-skew gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 9] 100)
                  (gen/tuple
                    (:func-skewX gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 10] 100)
                  (gen/tuple
                    (:func-skewY gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 11] 100)
                  (gen/tuple
                    (:func-matrix3d gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 12] 100)
                  (gen/tuple
                    (:func-translate3d gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 13] 100)
                  (gen/tuple
                    (:func-translateZ gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 14] 100)
                  (gen/tuple
                    (:func-scale3d gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 15] 100)
                  (gen/tuple
                    (:func-scaleZ gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 16] 100)
                  (gen/tuple
                    (:func-rotate3d gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 17] 100)
                  (gen/tuple
                    (:func-rotateX gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 18] 100)
                  (gen/tuple
                    (:func-rotateY gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 19] 100)
                  (gen/tuple
                    (:func-rotateZ gmap)
                    (gen/return " "))]
                [(get weights [:nonprop-transform-function :cat 0 :plus :plus :alt 20] 100)
                  (gen/tuple
                    (:func-perspective gmap)
                    (gen/return " "))]])))))
          (gen/return " "))
        gmap (assoc gmap :nonprop-transform-function gen-nonprop-transform-function)

        gen-nonprop-transform-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (:nonprop-transform-function gmap)))
          (gen/return " "))
        gmap (assoc gmap :nonprop-transform-list gen-nonprop-transform-list)

        gen-prop-transform
        (gen/frequency [
          [(get weights [:prop-transform :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-transform :alt 1] 100)
            (gen/tuple
              (:nonprop-transform-list gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-transform gen-prop-transform)

        gen-func-repeating-linear-gradient
        (gen/tuple
          (gen/return "repeating-linear-gradient(")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:func-repeating-linear-gradient :cat 2 :opt :alt 0] 100)
                (gen/tuple
                  (:nonprop-angle gmap)
                  (gen/return " "))]
              [(get weights [:func-repeating-linear-gradient :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "to")
                  (gen/return " ")
                  (:nonprop-side-or-corner gmap)
                  (gen/return " "))]])])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-color-stop-list gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-repeating-linear-gradient gen-func-repeating-linear-gradient)

        gen-func-radial-gradient
        (gen/tuple
          (gen/return "radial-gradient(")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [(get weights [:func-radial-gradient :cat 2 :opt :plus :alt 0] 100)
                  (gen/tuple
                    (:nonprop-ending-shape gmap)
                    (gen/return " "))]
                [(get weights [:func-radial-gradient :cat 2 :opt :plus :alt 1] 100)
                  (gen/tuple
                    (:nonprop-size gmap)
                    (gen/return " "))]])))])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (gen/return " ")
              (:nonprop-position gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (:nonprop-color-stop-list gmap)
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-radial-gradient gen-func-radial-gradient)

        gen-nonprop-gradient
        (gen/frequency [
          [(get weights [:nonprop-gradient :alt 0] 100)
            (gen/tuple
              (:func-linear-gradient gmap)
              (gen/return " "))]
          [(get weights [:nonprop-gradient :alt 1] 100)
            (gen/tuple
              (:func-repeating-linear-gradient gmap)
              (gen/return " "))]
          [(get weights [:nonprop-gradient :alt 2] 100)
            (gen/tuple
              (:func-radial-gradient gmap)
              (gen/return " "))]
          [(get weights [:nonprop-gradient :alt 3] 100)
            (gen/tuple
              (:func-repeating-radial-gradient gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-gradient gen-nonprop-gradient)

        gen-prop-border-inline-start
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-inline-start :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-border-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-inline-start :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-border-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-inline-start :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-inline-start gen-prop-border-inline-start)

        gen-prop-border-right-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-right-width gen-prop-border-right-width)]
    gmap))

(defn- css3-generators-part-6 [gmap weights]
  (let [
        gen-nonprop-east-asian-width-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-east-asian-width-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "full-width")
                (gen/return " "))]
            [(get weights [:nonprop-east-asian-width-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "proportional-width")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-east-asian-width-values gen-nonprop-east-asian-width-values)

        gen-nonprop-display-legacy
        (gen/frequency [
          [(get weights [:nonprop-display-legacy :alt 0] 100)
            (gen/tuple
              (gen/return "inline-block")
              (gen/return " "))]
          [(get weights [:nonprop-display-legacy :alt 1] 100)
            (gen/tuple
              (gen/return "inline-list-item")
              (gen/return " "))]
          [(get weights [:nonprop-display-legacy :alt 2] 100)
            (gen/tuple
              (gen/return "inline-table")
              (gen/return " "))]
          [(get weights [:nonprop-display-legacy :alt 3] 100)
            (gen/tuple
              (gen/return "inline-flex")
              (gen/return " "))]
          [(get weights [:nonprop-display-legacy :alt 4] 100)
            (gen/tuple
              (gen/return "inline-grid")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-display-legacy gen-nonprop-display-legacy)

        gen-nonprop-feature-tag-value
        (gen/tuple
          (:nonprop-string gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:nonprop-feature-tag-value :cat 2 :opt :alt 0] 100)
                (gen/tuple
                  (:nonprop-integer gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-feature-tag-value :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "on")
                  (gen/return " "))]
              [(get weights [:nonprop-feature-tag-value :cat 2 :opt :alt 2] 100)
                (gen/tuple
                  (gen/return "off")
                  (gen/return " "))]])])
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-tag-value gen-nonprop-feature-tag-value)

        gen-prop-margin-bottom
        (gen/frequency [
          [(get weights [:prop-margin-bottom :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-bottom :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-bottom :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-margin-bottom gen-prop-margin-bottom)

        gen-prop-shape-margin
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-shape-margin gen-prop-shape-margin)

        gen-prop-text-emphasis-position
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-text-emphasis-position :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "over")
                (gen/return " "))]
            [(get weights [:prop-text-emphasis-position :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "under")
                (gen/return " "))]])
          (gen/return " ")
          (gen/frequency [
            [(get weights [:prop-text-emphasis-position :cat 2 :alt 0] 100)
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]
            [(get weights [:prop-text-emphasis-position :cat 2 :alt 1] 100)
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :prop-text-emphasis-position gen-prop-text-emphasis-position)

        gen-nonprop-display-internal
        (gen/frequency [
          [(get weights [:nonprop-display-internal :alt 0] 100)
            (gen/tuple
              (gen/return "table-row-group")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 1] 100)
            (gen/tuple
              (gen/return "table-header-group")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 2] 100)
            (gen/tuple
              (gen/return "table-footer-group")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 3] 100)
            (gen/tuple
              (gen/return "table-row")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 4] 100)
            (gen/tuple
              (gen/return "table-cell")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 5] 100)
            (gen/tuple
              (gen/return "table-column-group")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 6] 100)
            (gen/tuple
              (gen/return "table-column")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 7] 100)
            (gen/tuple
              (gen/return "table-caption")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 8] 100)
            (gen/tuple
              (gen/return "ruby-base")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 9] 100)
            (gen/tuple
              (gen/return "ruby-text")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 10] 100)
            (gen/tuple
              (gen/return "ruby-base-container")
              (gen/return " "))]
          [(get weights [:nonprop-display-internal :alt 11] 100)
            (gen/tuple
              (gen/return "ruby-text-container")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-display-internal gen-nonprop-display-internal)

        gen-prop-ime-mode
        (gen/frequency [
          [(get weights [:prop-ime-mode :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-ime-mode :alt 1] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-ime-mode :alt 2] 100)
            (gen/tuple
              (gen/return "active")
              (gen/return " "))]
          [(get weights [:prop-ime-mode :alt 3] 100)
            (gen/tuple
              (gen/return "inactive")
              (gen/return " "))]
          [(get weights [:prop-ime-mode :alt 4] 100)
            (gen/tuple
              (gen/return "disabled")
              (gen/return " "))]])
        gmap (assoc gmap :prop-ime-mode gen-prop-ime-mode)

        gen-nonprop-frequency
        (gen/tuple
          (:nonprop-number gmap)
          (gen/frequency [
            [(get weights [:nonprop-frequency :cat 1 :alt 0] 100)
              (gen/return "Hz")]
            [(get weights [:nonprop-frequency :cat 1 :alt 1] 100)
              (gen/return "kHz")]]))
        gmap (assoc gmap :nonprop-frequency gen-nonprop-frequency)

        gen-nonprop-frequency-percentage
        (gen/frequency [
          [(get weights [:nonprop-frequency-percentage :alt 0] 100)
            (gen/tuple
              (:nonprop-frequency gmap)
              (gen/return " "))]
          [(get weights [:nonprop-frequency-percentage :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-frequency-percentage gen-nonprop-frequency-percentage)

        gen-prop-border-inline-start-width
        (gen/tuple
          (:nonprop-border-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-start-width gen-prop-border-inline-start-width)

        gen-nonprop-an-plus-b
        (gen/return "STUB_an_plus_b")
        gmap (assoc gmap :nonprop-an-plus-b gen-nonprop-an-plus-b)

        gen-prop-outline-style
        (gen/frequency [
          [(get weights [:prop-outline-style :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-outline-style :alt 1] 100)
            (gen/tuple
              (:nonprop-br-style gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-outline-style gen-prop-outline-style)

        gen-nonprop-outline-style
        (:prop-outline-style gmap)
        gmap (assoc gmap :nonprop-outline-style gen-nonprop-outline-style)

        gen-prop-border-inline-end-style
        (gen/tuple
          (:nonprop-border-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-end-style gen-prop-border-inline-end-style)

        gen-prop-backface-visibility
        (gen/frequency [
          [(get weights [:prop-backface-visibility :alt 0] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-backface-visibility :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]])
        gmap (assoc gmap :prop-backface-visibility gen-prop-backface-visibility)

        gen-prop-border-block-end
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-block-end :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-border-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-block-end :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-border-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-block-end :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-block-end gen-prop-border-block-end)

        gen-prop-background-position
        (gen/tuple
          (:nonprop-position gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-position gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-position gen-prop-background-position)

        gen-prop-margin-left
        (gen/frequency [
          [(get weights [:prop-margin-left :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-left :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-left :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-margin-left gen-prop-margin-left)

        gen-prop-border-inline-start-style
        (gen/tuple
          (:nonprop-border-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-start-style gen-prop-border-inline-start-style)

        gen-prop-border-bottom-style
        (gen/tuple
          (:nonprop-br-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-bottom-style gen-prop-border-bottom-style)

        gen-prop-max-width
        (gen/frequency [
          [(get weights [:prop-max-width :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 4] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 5] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-max-width :alt 6] 100)
            (gen/tuple
              (gen/return "fill-available")
              (gen/return " "))]])
        gmap (assoc gmap :prop-max-width gen-prop-max-width)

        gen-nonprop-max-width
        (:prop-max-width gmap)
        gmap (assoc gmap :nonprop-max-width gen-nonprop-max-width)

        gen-prop-max-inline-size
        (gen/tuple
          (:nonprop-max-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-max-inline-size gen-prop-max-inline-size)

        gen-prop-scroll-snap-points-x
        (gen/frequency [
          [(get weights [:prop-scroll-snap-points-x :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-points-x :alt 1] 100)
            (gen/tuple
              (gen/return "repeat(")
              (gen/return " ")
              (:nonprop-length-percentage gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-points-x gen-prop-scroll-snap-points-x)

        gen-prop-transition-delay
        (gen/tuple
          (:nonprop-time gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-time gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-transition-delay gen-prop-transition-delay)

        gen-prop--moz-user-modify
        (gen/frequency [
          [(get weights [:prop--moz-user-modify :alt 0] 100)
            (gen/tuple
              (gen/return "read-only")
              (gen/return " "))]
          [(get weights [:prop--moz-user-modify :alt 1] 100)
            (gen/tuple
              (gen/return "read-write")
              (gen/return " "))]
          [(get weights [:prop--moz-user-modify :alt 2] 100)
            (gen/tuple
              (gen/return "write-only")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-user-modify gen-prop--moz-user-modify)

        gen-nonprop-animateable-feature
        (gen/frequency [
          [(get weights [:nonprop-animateable-feature :alt 0] 100)
            (gen/tuple
              (gen/return "scroll-position")
              (gen/return " "))]
          [(get weights [:nonprop-animateable-feature :alt 1] 100)
            (gen/tuple
              (gen/return "contents")
              (gen/return " "))]
          [(get weights [:nonprop-animateable-feature :alt 2] 100)
            (gen/tuple
              (:nonprop-custom-ident gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-animateable-feature gen-nonprop-animateable-feature)

        gen-prop-will-change
        (gen/frequency [
          [(get weights [:prop-will-change :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-will-change :alt 1] 100)
            (gen/tuple
              (:nonprop-animateable-feature gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-animateable-feature gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-will-change gen-prop-will-change)

        gen-prop-overflow
        (gen/frequency [
          [(get weights [:prop-overflow :alt 0] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-overflow :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]
          [(get weights [:prop-overflow :alt 2] 100)
            (gen/tuple
              (gen/return "scroll")
              (gen/return " "))]
          [(get weights [:prop-overflow :alt 3] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-overflow gen-prop-overflow)

        gen-nonprop-grid-row-gap
        (:prop-grid-row-gap gmap)
        gmap (assoc gmap :nonprop-grid-row-gap gen-nonprop-grid-row-gap)

        gen-nonprop-grid-column-gap
        (:prop-grid-column-gap gmap)
        gmap (assoc gmap :nonprop-grid-column-gap gen-nonprop-grid-column-gap)

        gen-prop-grid-gap
        (gen/tuple
          (:nonprop-grid-row-gap gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-grid-column-gap gmap)])
          (gen/return " "))
        gmap (assoc gmap :prop-grid-gap gen-prop-grid-gap)

        gen-nonprop-x
        (gen/return "11")
        gmap (assoc gmap :nonprop-x gen-nonprop-x)

        gen-prop-visibility
        (gen/frequency [
          [(get weights [:prop-visibility :alt 0] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-visibility :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]
          [(get weights [:prop-visibility :alt 2] 100)
            (gen/tuple
              (gen/return "collapse")
              (gen/return " "))]])
        gmap (assoc gmap :prop-visibility gen-prop-visibility)

        gen-prop-ruby-position
        (gen/frequency [
          [(get weights [:prop-ruby-position :alt 0] 100)
            (gen/tuple
              (gen/return "over")
              (gen/return " "))]
          [(get weights [:prop-ruby-position :alt 1] 100)
            (gen/tuple
              (gen/return "under")
              (gen/return " "))]
          [(get weights [:prop-ruby-position :alt 2] 100)
            (gen/tuple
              (gen/return "inter-character")
              (gen/return " "))]])
        gmap (assoc gmap :prop-ruby-position gen-prop-ruby-position)

        gen-prop-text-orientation
        (gen/frequency [
          [(get weights [:prop-text-orientation :alt 0] 100)
            (gen/tuple
              (gen/return "mixed")
              (gen/return " "))]
          [(get weights [:prop-text-orientation :alt 1] 100)
            (gen/tuple
              (gen/return "upright")
              (gen/return " "))]
          [(get weights [:prop-text-orientation :alt 2] 100)
            (gen/tuple
              (gen/return "sideways")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-orientation gen-prop-text-orientation)

        gen-nonprop-margin-left
        (:prop-margin-left gmap)
        gmap (assoc gmap :nonprop-margin-left gen-nonprop-margin-left)

        gen-prop-margin-block-end
        (gen/tuple
          (:nonprop-margin-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-margin-block-end gen-prop-margin-block-end)

        gen-prop-background-image
        (gen/tuple
          (:nonprop-bg-image gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-bg-image gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-image gen-prop-background-image)

        gen-prop-border-spacing
        (gen/tuple
          (:nonprop-length gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-length gmap)])
          (gen/return " "))
        gmap (assoc gmap :prop-border-spacing gen-prop-border-spacing)

        gen-prop-border-top-style
        (gen/tuple
          (:nonprop-br-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-top-style gen-prop-border-top-style)

        gen-nonprop-outline-radius
        (gen/return "STUB_outline_radius")
        gmap (assoc gmap :nonprop-outline-radius gen-nonprop-outline-radius)

        gen-prop-grid-area
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " ")
          (gen/frequency [
            [(get weights [:prop-grid-area :cat 2 :alt 0] 100)
              (gen/return "\n")]
            [(get weights [:prop-grid-area :cat 2 :alt 1] 100)
              (gen/tuple
                (gen/return "/")
                (gen/return " ")
                (:nonprop-grid-line gmap)
                (gen/return " "))]
            [(get weights [:prop-grid-area :cat 2 :alt 2] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-grid-line gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-grid-line gmap)
                  (gen/return " ")))]
            [(get weights [:prop-grid-area :cat 2 :alt 3] 100)
              (gen/tuple
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-grid-line gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-grid-line gmap)
                  (gen/return " "))
                (gen/tuple
                  (gen/return "/")
                  (gen/return " ")
                  (:nonprop-grid-line gmap)
                  (gen/return " ")))]])
          (gen/return " "))
        gmap (assoc gmap :prop-grid-area gen-prop-grid-area)

        gen-nonprop-family-name
        (gen/frequency [
          [(get weights [:nonprop-family-name :alt 0] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]
          [(get weights [:nonprop-family-name :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (:nonprop-custom-ident gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-family-name gen-nonprop-family-name)

        gen-nonprop-generic-family
        (gen/frequency [
          [(get weights [:nonprop-generic-family :alt 0] 100)
            (gen/tuple
              (gen/return "serif")
              (gen/return " "))]
          [(get weights [:nonprop-generic-family :alt 1] 100)
            (gen/tuple
              (gen/return "sans-serif")
              (gen/return " "))]
          [(get weights [:nonprop-generic-family :alt 2] 100)
            (gen/tuple
              (gen/return "cursive")
              (gen/return " "))]
          [(get weights [:nonprop-generic-family :alt 3] 100)
            (gen/tuple
              (gen/return "fantasy")
              (gen/return " "))]
          [(get weights [:nonprop-generic-family :alt 4] 100)
            (gen/tuple
              (gen/return "monospace")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-generic-family gen-nonprop-generic-family)

        gen-prop-font-family
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-font-family :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-family-name gmap)
                (gen/return " "))]
            [(get weights [:prop-font-family :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-generic-family gmap)
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop-font-family :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-family-name gmap)
                    (gen/return " "))]
                [(get weights [:prop-font-family :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-generic-family gmap)
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-font-family gen-prop-font-family)

        gen-func-ellipse
        (gen/tuple
          (gen/return "ellipse(")
          (gen/return " ")
          (gen/tuple
            (:nonprop-shape-radius gmap)
            (:nonprop-shape-radius gmap))
          (gen/one-of [
            (gen/return "")
            (gen/return " ")])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "at")
              (gen/return " ")
              (:nonprop-position gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-ellipse gen-func-ellipse)

        gen-prop-border-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-radius :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:prop-border-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:prop-border-radius :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:prop-border-radius :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (gen/frequency [
                [(get weights [:prop-border-radius :cat 2 :opt :cat 2 :alt 0] 100)
                  (:nonprop-length-percentage gmap)]
                [(get weights [:prop-border-radius :cat 2 :opt :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap))]
                [(get weights [:prop-border-radius :cat 2 :opt :cat 2 :alt 2] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap))]
                [(get weights [:prop-border-radius :cat 2 :opt :cat 2 :alt 3] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap)
                    (:nonprop-length-percentage gmap))]])
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop-border-radius gen-prop-border-radius)

        gen-nonprop-border-radius
        (:prop-border-radius gmap)
        gmap (assoc gmap :nonprop-border-radius gen-nonprop-border-radius)]
    gmap))

(defn- css3-generators-part-7 [gmap weights]
  (let [
        gen-nonprop-fill-rule
        (gen/frequency [
          [(get weights [:nonprop-fill-rule :alt 0] 100)
            (gen/tuple
              (gen/return "nonzero")
              (gen/return " "))]
          [(get weights [:nonprop-fill-rule :alt 1] 100)
            (gen/tuple
              (gen/return "evenodd")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-fill-rule gen-nonprop-fill-rule)

        gen-func-polygon
        (gen/tuple
          (gen/return "polygon(")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-fill-rule gmap)])
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/tuple
            (:nonprop-length-percentage gmap)
            (gen/return " ")
            (:nonprop-length-percentage gmap)
            (gen/return " "))
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (gen/return " ")
                (:nonprop-length-percentage gmap)
                (gen/return " "))))
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-polygon gen-func-polygon)

        gen-func-path
        (gen/return "STUB_func_path")
        gmap (assoc gmap :func-path gen-func-path)

        gen-func-inset
        (gen/tuple
          (gen/return "inset(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-inset :cat 2 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:func-inset :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:func-inset :cat 2 :alt 2] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]
            [(get weights [:func-inset :cat 2 :alt 3] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "round")
              (gen/return " ")
              (:nonprop-border-radius gmap)
              (gen/return " "))])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-inset gen-func-inset)

        gen-nonprop-basic-shape
        (gen/frequency [
          [(get weights [:nonprop-basic-shape :alt 0] 100)
            (gen/tuple
              (:func-inset gmap)
              (gen/return " "))]
          [(get weights [:nonprop-basic-shape :alt 1] 100)
            (gen/tuple
              (:func-circle gmap)
              (gen/return " "))]
          [(get weights [:nonprop-basic-shape :alt 2] 100)
            (gen/tuple
              (:func-ellipse gmap)
              (gen/return " "))]
          [(get weights [:nonprop-basic-shape :alt 3] 100)
            (gen/tuple
              (:func-polygon gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-basic-shape gen-nonprop-basic-shape)

        gen-prop-offset-path
        (gen/frequency [
          [(get weights [:prop-offset-path :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-offset-path :alt 1] 100)
            (gen/tuple
              (gen/return "ray(")
              (gen/return " ")
              (gen/tuple
                (:nonprop-angle gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-size gmap)])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/return "contain")])
                (gen/return " "))
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]
          [(get weights [:prop-offset-path :alt 2] 100)
            (gen/tuple
              (:func-path gmap)
              (gen/return " "))]
          [(get weights [:prop-offset-path :alt 3] 100)
            (gen/tuple
              (:nonprop-url gmap)
              (gen/return " "))]
          [(get weights [:prop-offset-path :alt 4] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-offset-path :alt 4 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-basic-shape gmap)
                      (gen/return " "))]
                  [(get weights [:prop-offset-path :alt 4 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-geometry-box gmap)
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-offset-path gen-prop-offset-path)

        gen-prop-offset-inline-end
        (gen/tuple
          (:nonprop-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-offset-inline-end gen-prop-offset-inline-end)

        gen-nonprop-single-animation-play-state
        (gen/frequency [
          [(get weights [:nonprop-single-animation-play-state :alt 0] 100)
            (gen/tuple
              (gen/return "running")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-play-state :alt 1] 100)
            (gen/tuple
              (gen/return "paused")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-animation-play-state gen-nonprop-single-animation-play-state)

        gen-prop-animation-play-state
        (gen/tuple
          (:nonprop-single-animation-play-state gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-animation-play-state gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-play-state gen-prop-animation-play-state)

        gen-nonprop-feature-type
        (gen/frequency [
          [(get weights [:nonprop-feature-type :alt 0] 100)
            (gen/tuple
              (gen/return "@stylistic")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 1] 100)
            (gen/tuple
              (gen/return "@historical-forms")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 2] 100)
            (gen/tuple
              (gen/return "@styleset")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 3] 100)
            (gen/tuple
              (gen/return "@character-variant")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 4] 100)
            (gen/tuple
              (gen/return "@swash")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 5] 100)
            (gen/tuple
              (gen/return "@ornaments")
              (gen/return " "))]
          [(get weights [:nonprop-feature-type :alt 6] 100)
            (gen/tuple
              (gen/return "@annotation")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-feature-type gen-nonprop-feature-type)

        gen-prop--moz-outline-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop--moz-outline-radius :cat 0 :alt 0] 100)
              (:nonprop-outline-radius gmap)]
            [(get weights [:prop--moz-outline-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap))]
            [(get weights [:prop--moz-outline-radius :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap))]
            [(get weights [:prop--moz-outline-radius :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap)
                (:nonprop-outline-radius gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (gen/frequency [
                [(get weights [:prop--moz-outline-radius :cat 2 :opt :cat 2 :alt 0] 100)
                  (:nonprop-outline-radius gmap)]
                [(get weights [:prop--moz-outline-radius :cat 2 :opt :cat 2 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap))]
                [(get weights [:prop--moz-outline-radius :cat 2 :opt :cat 2 :alt 2] 100)
                  (gen/tuple
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap))]
                [(get weights [:prop--moz-outline-radius :cat 2 :opt :cat 2 :alt 3] 100)
                  (gen/tuple
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap)
                    (:nonprop-outline-radius gmap))]])
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop--moz-outline-radius gen-prop--moz-outline-radius)

        gen-prop-tab-size
        (gen/frequency [
          [(get weights [:prop-tab-size :alt 0] 100)
            (gen/tuple
              (:nonprop-integer gmap)
              (gen/return " "))]
          [(get weights [:prop-tab-size :alt 1] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-tab-size gen-prop-tab-size)

        gen-prop-column-gap
        (gen/frequency [
          [(get weights [:prop-column-gap :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-column-gap :alt 1] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]])
        gmap (assoc gmap :prop-column-gap gen-prop-column-gap)

        gen-prop-grid-row
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (:nonprop-grid-line gmap)
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop-grid-row gen-prop-grid-row)

        gen-prop-white-space
        (gen/frequency [
          [(get weights [:prop-white-space :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-white-space :alt 1] 100)
            (gen/tuple
              (gen/return "pre")
              (gen/return " "))]
          [(get weights [:prop-white-space :alt 2] 100)
            (gen/tuple
              (gen/return "nowrap")
              (gen/return " "))]
          [(get weights [:prop-white-space :alt 3] 100)
            (gen/tuple
              (gen/return "pre-wrap")
              (gen/return " "))]
          [(get weights [:prop-white-space :alt 4] 100)
            (gen/tuple
              (gen/return "pre-line")
              (gen/return " "))]])
        gmap (assoc gmap :prop-white-space gen-prop-white-space)

        gen-nonprop-font-family
        (:prop-font-family gmap)
        gmap (assoc gmap :nonprop-font-family gen-nonprop-font-family)

        gen-nonprop-common-lig-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-common-lig-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "common-ligatures")
                (gen/return " "))]
            [(get weights [:nonprop-common-lig-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "no-common-ligatures")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-common-lig-values gen-nonprop-common-lig-values)

        gen-nonprop-historical-lig-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-historical-lig-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "historical-ligatures")
                (gen/return " "))]
            [(get weights [:nonprop-historical-lig-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "no-historical-ligatures")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-historical-lig-values gen-nonprop-historical-lig-values)

        gen-nonprop-contextual-alt-values
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-contextual-alt-values :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "contextual")
                (gen/return " "))]
            [(get weights [:nonprop-contextual-alt-values :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "no-contextual")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-contextual-alt-values gen-nonprop-contextual-alt-values)

        gen-prop-font-variant-ligatures
        (gen/frequency [
          [(get weights [:prop-font-variant-ligatures :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-ligatures :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-font-variant-ligatures :alt 2] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-font-variant-ligatures :alt 2 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-common-lig-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-ligatures :alt 2 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-discretionary-lig-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-ligatures :alt 2 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (:nonprop-historical-lig-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-ligatures :alt 2 :cat 0 :plus :alt 3] 100)
                    (gen/tuple
                      (:nonprop-contextual-alt-values gmap)
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-ligatures gen-prop-font-variant-ligatures)

        gen-prop--webkit-touch-callout
        (gen/frequency [
          [(get weights [:prop--webkit-touch-callout :alt 0] 100)
            (gen/tuple
              (gen/return "default")
              (gen/return " "))]
          [(get weights [:prop--webkit-touch-callout :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--webkit-touch-callout gen-prop--webkit-touch-callout)

        gen-prop-appearance
        (gen/frequency [
          [(get weights [:prop-appearance :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-appearance :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-appearance gen-prop-appearance)

        gen-prop-transform-box
        (gen/frequency [
          [(get weights [:prop-transform-box :alt 0] 100)
            (gen/tuple
              (gen/return "border-box")
              (gen/return " "))]
          [(get weights [:prop-transform-box :alt 1] 100)
            (gen/tuple
              (gen/return "fill-box")
              (gen/return " "))]
          [(get weights [:prop-transform-box :alt 2] 100)
            (gen/tuple
              (gen/return "view-box")
              (gen/return " "))]])
        gmap (assoc gmap :prop-transform-box gen-prop-transform-box)

        gen-prop-scroll-behavior
        (gen/frequency [
          [(get weights [:prop-scroll-behavior :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-scroll-behavior :alt 1] 100)
            (gen/tuple
              (gen/return "smooth")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-behavior gen-prop-scroll-behavior)

        gen-prop-ruby-merge
        (gen/frequency [
          [(get weights [:prop-ruby-merge :alt 0] 100)
            (gen/tuple
              (gen/return "separate")
              (gen/return " "))]
          [(get weights [:prop-ruby-merge :alt 1] 100)
            (gen/tuple
              (gen/return "collapse")
              (gen/return " "))]
          [(get weights [:prop-ruby-merge :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-ruby-merge gen-prop-ruby-merge)

        gen-prop-grid-template-areas
        (gen/frequency [
          [(get weights [:prop-grid-template-areas :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-grid-template-areas :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (:nonprop-string gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-grid-template-areas gen-prop-grid-template-areas)

        gen-prop-filter
        (gen/frequency [
          [(get weights [:prop-filter :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-filter :alt 1] 100)
            (gen/tuple
              (:nonprop-filter-function-list gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-filter gen-prop-filter)

        gen-prop-flex-direction
        (gen/frequency [
          [(get weights [:prop-flex-direction :alt 0] 100)
            (gen/tuple
              (gen/return "row")
              (gen/return " "))]
          [(get weights [:prop-flex-direction :alt 1] 100)
            (gen/tuple
              (gen/return "row-reverse")
              (gen/return " "))]
          [(get weights [:prop-flex-direction :alt 2] 100)
            (gen/tuple
              (gen/return "column")
              (gen/return " "))]
          [(get weights [:prop-flex-direction :alt 3] 100)
            (gen/tuple
              (gen/return "column-reverse")
              (gen/return " "))]])
        gmap (assoc gmap :prop-flex-direction gen-prop-flex-direction)

        gen-nonprop-flex-direction
        (:prop-flex-direction gmap)
        gmap (assoc gmap :nonprop-flex-direction gen-nonprop-flex-direction)

        gen-prop-flex-flow
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-flex-flow :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-flex-direction gmap)
                (gen/return " "))]
            [(get weights [:prop-flex-flow :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-flex-wrap gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-flex-flow gen-prop-flex-flow)

        gen-prop-background-repeat
        (gen/tuple
          (:nonprop-repeat-style gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-repeat-style gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-repeat gen-prop-background-repeat)

        gen-nonprop-absolute-size
        (gen/frequency [
          [(get weights [:nonprop-absolute-size :alt 0] 100)
            (gen/tuple
              (gen/return "xx-small")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 1] 100)
            (gen/tuple
              (gen/return "x-small")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 2] 100)
            (gen/tuple
              (gen/return "small")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 3] 100)
            (gen/tuple
              (gen/return "medium")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 4] 100)
            (gen/tuple
              (gen/return "large")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 5] 100)
            (gen/tuple
              (gen/return "x-large")
              (gen/return " "))]
          [(get weights [:nonprop-absolute-size :alt 6] 100)
            (gen/tuple
              (gen/return "xx-large")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-absolute-size gen-nonprop-absolute-size)

        gen-nonprop-relative-size
        (gen/frequency [
          [(get weights [:nonprop-relative-size :alt 0] 100)
            (gen/tuple
              (gen/return "larger")
              (gen/return " "))]
          [(get weights [:nonprop-relative-size :alt 1] 100)
            (gen/tuple
              (gen/return "smaller")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-relative-size gen-nonprop-relative-size)

        gen-prop-font-size
        (gen/frequency [
          [(get weights [:prop-font-size :alt 0] 100)
            (gen/tuple
              (:nonprop-absolute-size gmap)
              (gen/return " "))]
          [(get weights [:prop-font-size :alt 1] 100)
            (gen/tuple
              (:nonprop-relative-size gmap)
              (gen/return " "))]
          [(get weights [:prop-font-size :alt 2] 100)
            (gen/tuple
              (:nonprop-length-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-size gen-prop-font-size)

        gen-prop-border-inline-end
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-inline-end :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-border-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-inline-end :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-border-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-inline-end :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-inline-end gen-prop-border-inline-end)

        gen-nonprop-feature-value-declaration
        (gen/tuple
          (:nonprop-custom-ident gmap)
          (gen/return " ")
          (gen/return ":")
          (gen/return " ")
          (gen/such-that not-empty (gen/vector
            (:nonprop-integer gmap)))
          (gen/return " ")
          (gen/return ";")
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-value-declaration gen-nonprop-feature-value-declaration)

        gen-nonprop-feature-value-declaration-list
        (gen/tuple
          (:nonprop-feature-value-declaration gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-value-declaration-list gen-nonprop-feature-value-declaration-list)

        gen-nonprop-bg-size
        (gen/frequency [
          [(get weights [:nonprop-bg-size :alt 0] 100)
            (gen/tuple
              (gen/frequency [
                [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0] 100)
                  (gen/frequency [
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0 :alt 0] 100)
                      (gen/tuple
                        (:nonprop-length-percentage gmap)
                        (gen/return " "))]
                    [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 0 :alt 1] 100)
                      (gen/tuple
                        (gen/return "auto")
                        (gen/return " "))]])]
                [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (gen/frequency [
                      [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 0 :alt 0] 100)
                        (gen/tuple
                          (:nonprop-length-percentage gmap)
                          (gen/return " "))]
                      [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 0 :alt 1] 100)
                        (gen/tuple
                          (gen/return "auto")
                          (gen/return " "))]])
                    (gen/frequency [
                      [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 1 :alt 0] 100)
                        (gen/tuple
                          (:nonprop-length-percentage gmap)
                          (gen/return " "))]
                      [(get weights [:nonprop-bg-size :alt 0 :cat 0 :alt 1 :cat 1 :alt 1] 100)
                        (gen/tuple
                          (gen/return "auto")
                          (gen/return " "))]]))]])
              (gen/return " "))]
          [(get weights [:nonprop-bg-size :alt 1] 100)
            (gen/tuple
              (gen/return "cover")
              (gen/return " "))]
          [(get weights [:nonprop-bg-size :alt 2] 100)
            (gen/tuple
              (gen/return "contain")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-bg-size gen-nonprop-bg-size)

        gen-prop-mask-size
        (gen/tuple
          (:nonprop-bg-size gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-bg-size gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-size gen-prop-mask-size)

        gen-prop-float
        (gen/frequency [
          [(get weights [:prop-float :alt 0] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-float :alt 1] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-float :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-float :alt 3] 100)
            (gen/tuple
              (gen/return "inline-start")
              (gen/return " "))]
          [(get weights [:prop-float :alt 4] 100)
            (gen/tuple
              (gen/return "inline-end")
              (gen/return " "))]])
        gmap (assoc gmap :prop-float gen-prop-float)

        gen-nonprop-keyframe-block
        (gen/tuple
          (:nonprop-keyframe-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-keyframe-selector gmap)))
          (gen/return " ")
          (gen/return "{")
          (:nonprop-declaration-list gmap)
          (gen/return " ")
          (gen/return "}")
          (gen/return " "))
        gmap (assoc gmap :nonprop-keyframe-block gen-nonprop-keyframe-block)

        gen-nonprop-keyframe-block-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (:nonprop-keyframe-block gmap)))
          (gen/return " "))
        gmap (assoc gmap :nonprop-keyframe-block-list gen-nonprop-keyframe-block-list)

        gen-prop-initial-letter-align
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-initial-letter-align :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "auto")
                (gen/return " "))]
            [(get weights [:prop-initial-letter-align :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "alphabetic")
                (gen/return " "))]
            [(get weights [:prop-initial-letter-align :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "hanging")
                (gen/return " "))]
            [(get weights [:prop-initial-letter-align :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/return "ideographic")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :prop-initial-letter-align gen-prop-initial-letter-align)

        gen-prop-display-outside
        (gen/frequency [
          [(get weights [:prop-display-outside :alt 0] 100)
            (gen/tuple
              (gen/return "block-level")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 1] 100)
            (gen/tuple
              (gen/return "inline-level")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 2] 100)
            (gen/tuple
              (gen/return "run-in")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 3] 100)
            (gen/tuple
              (gen/return "contents")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 4] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 5] 100)
            (gen/tuple
              (gen/return "table-row-group")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 6] 100)
            (gen/tuple
              (gen/return "table-header-group")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 7] 100)
            (gen/tuple
              (gen/return "table-footer-group")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 8] 100)
            (gen/tuple
              (gen/return "table-row")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 9] 100)
            (gen/tuple
              (gen/return "table-cell")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 10] 100)
            (gen/tuple
              (gen/return "table-column-group")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 11] 100)
            (gen/tuple
              (gen/return "table-column")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 12] 100)
            (gen/tuple
              (gen/return "table-caption")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 13] 100)
            (gen/tuple
              (gen/return "ruby-base")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 14] 100)
            (gen/tuple
              (gen/return "ruby-text")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 15] 100)
            (gen/tuple
              (gen/return "ruby-base-container")
              (gen/return " "))]
          [(get weights [:prop-display-outside :alt 16] 100)
            (gen/tuple
              (gen/return "ruby-text-container")
              (gen/return " "))]])
        gmap (assoc gmap :prop-display-outside gen-prop-display-outside)

        gen-nonprop-masking-mode
        (gen/frequency [
          [(get weights [:nonprop-masking-mode :alt 0] 100)
            (gen/tuple
              (gen/return "alpha")
              (gen/return " "))]
          [(get weights [:nonprop-masking-mode :alt 1] 100)
            (gen/tuple
              (gen/return "luminance")
              (gen/return " "))]
          [(get weights [:nonprop-masking-mode :alt 2] 100)
            (gen/tuple
              (gen/return "match-source")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-masking-mode gen-nonprop-masking-mode)

        gen-prop-mask-mode
        (gen/tuple
          (:nonprop-masking-mode gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-masking-mode gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-mode gen-prop-mask-mode)

        gen-prop-box-pack
        (gen/frequency [
          [(get weights [:prop-box-pack :alt 0] 100)
            (gen/tuple
              (gen/return "start")
              (gen/return " "))]
          [(get weights [:prop-box-pack :alt 1] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-box-pack :alt 2] 100)
            (gen/tuple
              (gen/return "end")
              (gen/return " "))]
          [(get weights [:prop-box-pack :alt 3] 100)
            (gen/tuple
              (gen/return "justify")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-pack gen-prop-box-pack)

        gen-nonprop-quote
        (gen/frequency [
          [(get weights [:nonprop-quote :alt 0] 100)
            (gen/tuple
              (gen/return "open-quote")
              (gen/return " "))]
          [(get weights [:nonprop-quote :alt 1] 100)
            (gen/tuple
              (gen/return "close-quote")
              (gen/return " "))]
          [(get weights [:nonprop-quote :alt 2] 100)
            (gen/tuple
              (gen/return "no-open-quote")
              (gen/return " "))]
          [(get weights [:nonprop-quote :alt 3] 100)
            (gen/tuple
              (gen/return "no-close-quote")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-quote gen-nonprop-quote)

        gen-prop--moz-stack-sizing
        (gen/frequency [
          [(get weights [:prop--moz-stack-sizing :alt 0] 100)
            (gen/tuple
              (gen/return "ignore")
              (gen/return " "))]
          [(get weights [:prop--moz-stack-sizing :alt 1] 100)
            (gen/tuple
              (gen/return "stretch-to-fit")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-stack-sizing gen-prop--moz-stack-sizing)

        gen-prop-letter-spacing
        (gen/frequency [
          [(get weights [:prop-letter-spacing :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-letter-spacing :alt 1] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-letter-spacing gen-prop-letter-spacing)]
    gmap))

(defn- css3-generators-part-8 [gmap weights]
  (let [
        gen-nonprop-clip-style
        (gen/return "STUB_clip_style")
        gmap (assoc gmap :nonprop-clip-style gen-nonprop-clip-style)

        gen-prop-border-top
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-top :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-top :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-top :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-top gen-prop-border-top)

        gen-prop-text-combine-upright
        (gen/frequency [
          [(get weights [:prop-text-combine-upright :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-combine-upright :alt 1] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return " "))]
          [(get weights [:prop-text-combine-upright :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (gen/return "digits")
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-integer gmap)])
                (gen/return " "))
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-combine-upright gen-prop-text-combine-upright)

        gen-prop-border-bottom-right-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-bottom-right-radius :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:prop-border-bottom-right-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-bottom-right-radius gen-prop-border-bottom-right-radius)

        gen-prop-align-self
        (gen/frequency [
          [(get weights [:prop-align-self :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-align-self :alt 1] 100)
            (gen/tuple
              (gen/return "flex-start")
              (gen/return " "))]
          [(get weights [:prop-align-self :alt 2] 100)
            (gen/tuple
              (gen/return "flex-end")
              (gen/return " "))]
          [(get weights [:prop-align-self :alt 3] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-align-self :alt 4] 100)
            (gen/tuple
              (gen/return "baseline")
              (gen/return " "))]
          [(get weights [:prop-align-self :alt 5] 100)
            (gen/tuple
              (gen/return "stretch")
              (gen/return " "))]])
        gmap (assoc gmap :prop-align-self gen-prop-align-self)

        gen-prop-page-break-after
        (gen/frequency [
          [(get weights [:prop-page-break-after :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-page-break-after :alt 1] 100)
            (gen/tuple
              (gen/return "always")
              (gen/return " "))]
          [(get weights [:prop-page-break-after :alt 2] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]
          [(get weights [:prop-page-break-after :alt 3] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-page-break-after :alt 4] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]])
        gmap (assoc gmap :prop-page-break-after gen-prop-page-break-after)

        gen-nonprop-feature-value-block
        (gen/tuple
          (:nonprop-feature-type gmap)
          (gen/return " ")
          (gen/return "{")
          (:nonprop-feature-value-declaration-list gmap)
          (gen/return " ")
          (gen/return "}")
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-value-block gen-nonprop-feature-value-block)

        gen-nonprop-feature-value-block-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (:nonprop-feature-value-block gmap)))
          (gen/return " "))
        gmap (assoc gmap :nonprop-feature-value-block-list gen-nonprop-feature-value-block-list)

        gen-prop-border-image-slice
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-image-slice :cat 0 :alt 0] 100)
              (:nonprop-number-percentage gmap)]
            [(get weights [:prop-border-image-slice :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap))]
            [(get weights [:prop-border-image-slice :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap))]
            [(get weights [:prop-border-image-slice :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap)
                (:nonprop-number-percentage gmap))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "fill")])
          (gen/return " "))
        gmap (assoc gmap :prop-border-image-slice gen-prop-border-image-slice)

        gen-nonprop-border-image-slice
        (:prop-border-image-slice gmap)
        gmap (assoc gmap :nonprop-border-image-slice gen-nonprop-border-image-slice)

        gen-prop-border-inline-start-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-start-color gen-prop-border-inline-start-color)

        gen-prop-mask-position
        (gen/tuple
          (:nonprop-position gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-position gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-position gen-prop-mask-position)

        gen-prop-hyphens
        (gen/frequency [
          [(get weights [:prop-hyphens :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-hyphens :alt 1] 100)
            (gen/tuple
              (gen/return "manual")
              (gen/return " "))]
          [(get weights [:prop-hyphens :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-hyphens gen-prop-hyphens)

        gen-prop-transition
        (gen/tuple
          (:nonprop-single-transition gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-transition gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-transition gen-prop-transition)

        gen-prop-caret-color
        (gen/frequency [
          [(get weights [:prop-caret-color :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-caret-color :alt 1] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-caret-color gen-prop-caret-color)

        gen-prop-pointer-events
        (gen/frequency [
          [(get weights [:prop-pointer-events :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 2] 100)
            (gen/tuple
              (gen/return "visiblePainted")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 3] 100)
            (gen/tuple
              (gen/return "visibleFill")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 4] 100)
            (gen/tuple
              (gen/return "visibleStroke")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 5] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 6] 100)
            (gen/tuple
              (gen/return "painted")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 7] 100)
            (gen/tuple
              (gen/return "fill")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 8] 100)
            (gen/tuple
              (gen/return "stroke")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 9] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return " "))]
          [(get weights [:prop-pointer-events :alt 10] 100)
            (gen/tuple
              (gen/return "inherit")
              (gen/return " "))]])
        gmap (assoc gmap :prop-pointer-events gen-prop-pointer-events)

        gen-prop-animation-fill-mode
        (gen/tuple
          (:nonprop-single-animation-fill-mode gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-animation-fill-mode gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-fill-mode gen-prop-animation-fill-mode)

        gen-prop-margin-top
        (gen/frequency [
          [(get weights [:prop-margin-top :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-top :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-top :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-margin-top gen-prop-margin-top)

        gen-prop-touch-action
        (gen/frequency [
          [(get weights [:prop-touch-action :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-touch-action :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-touch-action :alt 2] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 0 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "pan-x")
                            (gen/return " "))]
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 0 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "pan-left")
                            (gen/return " "))]
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 0 :cat 0 :alt 2] 100)
                          (gen/tuple
                            (gen/return "pan-right")
                            (gen/return " "))]])
                      (gen/return " "))]
                  [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "pan-y")
                            (gen/return " "))]
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "pan-up")
                            (gen/return " "))]
                        [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 1 :cat 0 :alt 2] 100)
                          (gen/tuple
                            (gen/return "pan-down")
                            (gen/return " "))]])
                      (gen/return " "))]
                  [(get weights [:prop-touch-action :alt 2 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (gen/return "pinch-zoom")
                      (gen/return " "))]])))
              (gen/return " "))]
          [(get weights [:prop-touch-action :alt 3] 100)
            (gen/tuple
              (gen/return "manipulation")
              (gen/return " "))]])
        gmap (assoc gmap :prop-touch-action gen-prop-touch-action)

        gen-prop-text-underline-position
        (gen/frequency [
          [(get weights [:prop-text-underline-position :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-text-underline-position :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-text-underline-position :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/return "under")
                      (gen/return " "))]
                  [(get weights [:prop-text-underline-position :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-text-underline-position :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "left")
                            (gen/return " "))]
                        [(get weights [:prop-text-underline-position :alt 1 :cat 0 :plus :alt 1 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "right")
                            (gen/return " "))]])
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-underline-position gen-prop-text-underline-position)

        gen-prop--moz-float-edge
        (gen/frequency [
          [(get weights [:prop--moz-float-edge :alt 0] 100)
            (gen/tuple
              (gen/return "border-box")
              (gen/return " "))]
          [(get weights [:prop--moz-float-edge :alt 1] 100)
            (gen/tuple
              (gen/return "content-box")
              (gen/return " "))]
          [(get weights [:prop--moz-float-edge :alt 2] 100)
            (gen/tuple
              (gen/return "margin-box")
              (gen/return " "))]
          [(get weights [:prop--moz-float-edge :alt 3] 100)
            (gen/tuple
              (gen/return "padding-box")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-float-edge gen-prop--moz-float-edge)

        gen-prop-offset-anchor
        (gen/frequency [
          [(get weights [:prop-offset-anchor :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-offset-anchor :alt 1] 100)
            (gen/tuple
              (:nonprop-position gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-offset-anchor gen-prop-offset-anchor)

        gen-nonprop-offset-anchor
        (:prop-offset-anchor gmap)
        gmap (assoc gmap :nonprop-offset-anchor gen-nonprop-offset-anchor)

        gen-prop-line-break
        (gen/frequency [
          [(get weights [:prop-line-break :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-line-break :alt 1] 100)
            (gen/tuple
              (gen/return "loose")
              (gen/return " "))]
          [(get weights [:prop-line-break :alt 2] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-line-break :alt 3] 100)
            (gen/tuple
              (gen/return "strict")
              (gen/return " "))]])
        gmap (assoc gmap :prop-line-break gen-prop-line-break)

        gen-nonprop-pseudo-page
        (gen/tuple
          (gen/return ":")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:nonprop-pseudo-page :cat 2 :alt 0] 100)
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [(get weights [:nonprop-pseudo-page :cat 2 :alt 1] 100)
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]
            [(get weights [:nonprop-pseudo-page :cat 2 :alt 2] 100)
              (gen/tuple
                (gen/return "first")
                (gen/return " "))]
            [(get weights [:nonprop-pseudo-page :cat 2 :alt 3] 100)
              (gen/tuple
                (gen/return "blank")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-pseudo-page gen-nonprop-pseudo-page)

        gen-nonprop-page-selector
        (gen/frequency [
          [(get weights [:nonprop-page-selector :alt 0] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (:nonprop-pseudo-page gmap)))
              (gen/return " "))]
          [(get weights [:nonprop-page-selector :alt 1] 100)
            (gen/tuple
              (:nonprop-ident gmap)
              (gen/return " ")
              (gen/vector
                (:nonprop-pseudo-page gmap))
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-page-selector gen-nonprop-page-selector)

        gen-nonprop-page-selector-list
        (gen/tuple
          (:nonprop-page-selector gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-page-selector gmap)))
          (gen/one-of [
            (gen/return "")
            (gen/return " ")])
          (gen/return " "))
        gmap (assoc gmap :nonprop-page-selector-list gen-nonprop-page-selector-list)

        gen-prop--webkit-text-fill-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-text-fill-color gen-prop--webkit-text-fill-color)

        gen-prop--webkit-mask-repeat
        (gen/tuple
          (:nonprop-repeat-style gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-repeat-style gmap)
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-repeat gen-prop--webkit-mask-repeat)

        gen-nonprop-dimension
        (gen/return "STUB_dimension")
        gmap (assoc gmap :nonprop-dimension gen-nonprop-dimension)

        gen-nonprop-mf-value
        (gen/frequency [
          [(get weights [:nonprop-mf-value :alt 0] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-value :alt 1] 100)
            (gen/tuple
              (:nonprop-dimension gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-value :alt 2] 100)
            (gen/tuple
              (:nonprop-ident gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-value :alt 3] 100)
            (gen/tuple
              (:nonprop-ratio gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-mf-value gen-nonprop-mf-value)

        gen-nonprop-mf-name
        (gen/tuple
          (:nonprop-ident gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-mf-name gen-nonprop-mf-name)

        gen-nonprop-mf-range
        (gen/frequency [
          [(get weights [:nonprop-mf-range :alt 0] 100)
            (gen/tuple
              (:nonprop-mf-name gmap)
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [(get weights [:nonprop-mf-range :alt 0 :cat 2 :opt :alt 0] 100)
                    (gen/tuple
                      (gen/return "<")
                      (gen/return " "))]
                  [(get weights [:nonprop-mf-range :alt 0 :cat 2 :opt :alt 1] 100)
                    (gen/tuple
                      (gen/return ">")
                      (gen/return " "))]])])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-value gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-range :alt 1] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [(get weights [:nonprop-mf-range :alt 1 :cat 2 :opt :alt 0] 100)
                    (gen/tuple
                      (gen/return "<")
                      (gen/return " "))]
                  [(get weights [:nonprop-mf-range :alt 1 :cat 2 :opt :alt 1] 100)
                    (gen/tuple
                      (gen/return ">")
                      (gen/return " "))]])])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-name gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-range :alt 2] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/return " ")
              (gen/return "<")
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-name gmap)
              (gen/return " ")
              (gen/return "<")
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-value gmap)
              (gen/return " "))]
          [(get weights [:nonprop-mf-range :alt 3] 100)
            (gen/tuple
              (:nonprop-mf-value gmap)
              (gen/return " ")
              (gen/return ">")
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-name gmap)
              (gen/return " ")
              (gen/return ">")
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/return "=")])
              (gen/return " ")
              (:nonprop-mf-value gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-mf-range gen-nonprop-mf-range)

        gen-prop--webkit-box-reflect
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:prop--webkit-box-reflect :cat 0 :opt :alt 0] 100)
                (gen/tuple
                  (gen/return "above")
                  (gen/return " "))]
              [(get weights [:prop--webkit-box-reflect :cat 0 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "below")
                  (gen/return " "))]
              [(get weights [:prop--webkit-box-reflect :cat 0 :opt :alt 2] 100)
                (gen/tuple
                  (gen/return "right")
                  (gen/return " "))]
              [(get weights [:prop--webkit-box-reflect :cat 0 :opt :alt 3] 100)
                (gen/tuple
                  (gen/return "left")
                  (gen/return " "))]])])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-length gmap)])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-image gmap)])
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-box-reflect gen-prop--webkit-box-reflect)

        gen-nonprop-mf-plain
        (gen/tuple
          (:nonprop-mf-name gmap)
          (gen/return " ")
          (gen/return ":")
          (gen/return " ")
          (:nonprop-mf-value gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-mf-plain gen-nonprop-mf-plain)

        gen-func-fit-content
        (gen/tuple
          (gen/return "fit-content(")
          (gen/return " ")
          (gen/frequency [
            [(get weights [:func-fit-content :cat 2 :alt 0] 100)
              (gen/tuple
                (:nonprop-length gmap)
                (gen/return " "))]
            [(get weights [:func-fit-content :cat 2 :alt 1] 100)
              (gen/tuple
                (:nonprop-percentage gmap)
                (gen/return " "))]])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-fit-content gen-func-fit-content)

        gen-prop--ms-overflow-style
        (gen/frequency [
          [(get weights [:prop--ms-overflow-style :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop--ms-overflow-style :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop--ms-overflow-style :alt 2] 100)
            (gen/tuple
              (gen/return "scrollbar")
              (gen/return " "))]
          [(get weights [:prop--ms-overflow-style :alt 3] 100)
            (gen/tuple
              (gen/return "-ms-autohiding-scrollbar")
              (gen/return " "))]])
        gmap (assoc gmap :prop--ms-overflow-style gen-prop--ms-overflow-style)

        gen-prop-padding-top
        (gen/frequency [
          [(get weights [:prop-padding-top :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-padding-top :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-padding-top gen-prop-padding-top)

        gen-nonprop-clip-source
        (gen/tuple
          (:nonprop-url gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-clip-source gen-nonprop-clip-source)

        gen-prop-shape-outside
        (gen/frequency [
          [(get weights [:prop-shape-outside :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-shape-outside :alt 1] 100)
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [(get weights [:prop-shape-outside :alt 1 :plus :alt 0] 100)
                  (gen/tuple
                    (:nonprop-shape-box gmap)
                    (gen/return " "))]
                [(get weights [:prop-shape-outside :alt 1 :plus :alt 1] 100)
                  (gen/tuple
                    (:nonprop-basic-shape gmap)
                    (gen/return " "))]])))]
          [(get weights [:prop-shape-outside :alt 2] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-shape-outside gen-prop-shape-outside)

        gen-prop-block-size
        (gen/tuple
          (:nonprop-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-block-size gen-prop-block-size)

        gen-prop-clip-path
        (gen/frequency [
          [(get weights [:prop-clip-path :alt 0] 100)
            (gen/tuple
              (:nonprop-clip-source gmap)
              (gen/return " "))]
          [(get weights [:prop-clip-path :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-clip-path :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-basic-shape gmap)
                      (gen/return " "))]
                  [(get weights [:prop-clip-path :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-geometry-box gmap)
                      (gen/return " "))]])))
              (gen/return " "))]
          [(get weights [:prop-clip-path :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-clip-path gen-prop-clip-path)

        gen-nonprop-y
        (gen/return "11")
        gmap (assoc gmap :nonprop-y gen-nonprop-y)

        gen-nonprop-mask-position
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-mask-position :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (gen/return " "))]
            [(get weights [:nonprop-mask-position :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [(get weights [:nonprop-mask-position :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [(get weights [:nonprop-mask-position :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/frequency [
              [(get weights [:nonprop-mask-position :cat 2 :opt :alt 0] 100)
                (gen/tuple
                  (:nonprop-length-percentage gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-mask-position :cat 2 :opt :alt 1] 100)
                (gen/tuple
                  (gen/return "top")
                  (gen/return " "))]
              [(get weights [:nonprop-mask-position :cat 2 :opt :alt 2] 100)
                (gen/tuple
                  (gen/return "center")
                  (gen/return " "))]
              [(get weights [:nonprop-mask-position :cat 2 :opt :alt 3] 100)
                (gen/tuple
                  (gen/return "bottom")
                  (gen/return " "))]])])
          (gen/return " "))
        gmap (assoc gmap :nonprop-mask-position gen-nonprop-mask-position)

        gen-prop--webkit-mask-position
        (gen/tuple
          (:nonprop-mask-position gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-mask-position gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-position gen-prop--webkit-mask-position)

        gen-prop-word-break
        (gen/frequency [
          [(get weights [:prop-word-break :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-word-break :alt 1] 100)
            (gen/tuple
              (gen/return "break-all")
              (gen/return " "))]
          [(get weights [:prop-word-break :alt 2] 100)
            (gen/tuple
              (gen/return "keep-all")
              (gen/return " "))]])
        gmap (assoc gmap :prop-word-break gen-prop-word-break)

        gen-prop-transition-property
        (gen/frequency [
          [(get weights [:prop-transition-property :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-transition-property :alt 1] 100)
            (gen/tuple
              (:nonprop-single-transition-property gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-single-transition-property gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-transition-property gen-prop-transition-property)

        gen-prop-list-style-image
        (gen/frequency [
          [(get weights [:prop-list-style-image :alt 0] 100)
            (gen/tuple
              (:nonprop-url gmap)
              (gen/return " "))]
          [(get weights [:prop-list-style-image :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-list-style-image gen-prop-list-style-image)

        gen-prop-border-bottom-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-bottom-color gen-prop-border-bottom-color)

        gen-nonprop-list-style-image
        (:prop-list-style-image gmap)
        gmap (assoc gmap :nonprop-list-style-image gen-nonprop-list-style-image)]
    gmap))

(defn- css3-generators-part-9 [gmap weights]
  (let [
        gen-prop-list-style
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-list-style :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-list-style-type gmap)
                (gen/return " "))]
            [(get weights [:prop-list-style :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-list-style-position gmap)
                (gen/return " "))]
            [(get weights [:prop-list-style :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-list-style-image gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-list-style gen-prop-list-style)

        gen-nonprop-offset-path
        (:prop-offset-path gmap)
        gmap (assoc gmap :nonprop-offset-path gen-nonprop-offset-path)

        gen-prop-border-collapse
        (gen/frequency [
          [(get weights [:prop-border-collapse :alt 0] 100)
            (gen/tuple
              (gen/return "collapse")
              (gen/return " "))]
          [(get weights [:prop-border-collapse :alt 1] 100)
            (gen/tuple
              (gen/return "separate")
              (gen/return " "))]])
        gmap (assoc gmap :prop-border-collapse gen-prop-border-collapse)

        gen-nonprop-namespace-prefix
        (gen/tuple
          (:nonprop-ident gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-namespace-prefix gen-nonprop-namespace-prefix)

        gen-prop-offset-rotate
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-offset-rotate :plus :alt 0] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-offset-rotate :plus :alt 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]
                  [(get weights [:prop-offset-rotate :plus :alt 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "reverse")
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:prop-offset-rotate :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-angle gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-offset-rotate gen-prop-offset-rotate)

        gen-nonprop-offset-rotate
        (:prop-offset-rotate gmap)
        gmap (assoc gmap :nonprop-offset-rotate gen-nonprop-offset-rotate)

        gen-prop-break-before
        (gen/frequency [
          [(get weights [:prop-break-before :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 1] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 2] 100)
            (gen/tuple
              (gen/return "avoid-page")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 3] 100)
            (gen/tuple
              (gen/return "page")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 4] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 5] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 6] 100)
            (gen/tuple
              (gen/return "recto")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 7] 100)
            (gen/tuple
              (gen/return "verso")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 8] 100)
            (gen/tuple
              (gen/return "avoid-column")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 9] 100)
            (gen/tuple
              (gen/return "column")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 10] 100)
            (gen/tuple
              (gen/return "avoid-region")
              (gen/return " "))]
          [(get weights [:prop-break-before :alt 11] 100)
            (gen/tuple
              (gen/return "region")
              (gen/return " "))]])
        gmap (assoc gmap :prop-break-before gen-prop-break-before)

        gen-prop-background-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-background-color gen-prop-background-color)

        gen-prop-transition-timing-function
        (gen/tuple
          (:nonprop-single-transition-timing-function gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-transition-timing-function gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-transition-timing-function gen-prop-transition-timing-function)

        gen-nonprop-single-timing-function
        (gen/tuple
          (:nonprop-single-transition-timing-function gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-single-timing-function gen-nonprop-single-timing-function)

        gen-prop-background-clip
        (gen/tuple
          (:nonprop-box gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-box gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-clip gen-prop-background-clip)

        gen-prop--moz-border-left-colors
        (gen/frequency [
          [(get weights [:prop--moz-border-left-colors :alt 0] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/vector
                (gen/return " "))
              (gen/return " ")
              (:nonprop-color gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-border-left-colors :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-border-left-colors gen-prop--moz-border-left-colors)

        gen-prop-word-wrap
        (gen/frequency [
          [(get weights [:prop-word-wrap :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-word-wrap :alt 1] 100)
            (gen/tuple
              (gen/return "break-word")
              (gen/return " "))]])
        gmap (assoc gmap :prop-word-wrap gen-prop-word-wrap)

        gen-prop--webkit-mask-attachment
        (gen/tuple
          (:nonprop-attachment gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-attachment gmap)
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-attachment gen-prop--webkit-mask-attachment)

        gen-prop-font-variant-alternates
        (gen/frequency [
          [(get weights [:prop-font-variant-alternates :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-alternates :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (gen/return "stylistic(")
                (gen/return " ")
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 4 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 4 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "historical-forms")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 4 :plus :alt 2] 100)
                      (gen/tuple
                        (gen/return "styleset(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/vector
                  (gen/tuple
                    (gen/return ", ")
                    (:nonprop-feature-value-name gmap)))
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 8 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 8 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "character-variant(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/vector
                  (gen/tuple
                    (gen/return ", ")
                    (:nonprop-feature-value-name gmap)))
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 12 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 12 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "swash(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 15 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 15 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "ornaments(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 18 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant-alternates :alt 1 :cat 0 :cat 18 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "annotation(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/return ")")
                (gen/return " "))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-alternates gen-prop-font-variant-alternates)

        gen-prop-box-direction
        (gen/frequency [
          [(get weights [:prop-box-direction :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-box-direction :alt 1] 100)
            (gen/tuple
              (gen/return "reverse")
              (gen/return " "))]
          [(get weights [:prop-box-direction :alt 2] 100)
            (gen/tuple
              (gen/return "inherit")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-direction gen-prop-box-direction)

        gen-prop-scroll-snap-coordinate
        (gen/frequency [
          [(get weights [:prop-scroll-snap-coordinate :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-coordinate :alt 1] 100)
            (gen/tuple
              (:nonprop-position gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-position gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-coordinate gen-prop-scroll-snap-coordinate)

        gen-nonprop-cf-mixing-image
        (gen/tuple
          (gen/one-of [
            (gen/return "")
            (:nonprop-percentage gmap)])
          (gen/return " ")
          (:nonprop-image gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-cf-mixing-image gen-nonprop-cf-mixing-image)

        gen-nonprop-cf-final-image
        (gen/frequency [
          [(get weights [:nonprop-cf-final-image :alt 0] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]
          [(get weights [:nonprop-cf-final-image :alt 1] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-cf-final-image gen-nonprop-cf-final-image)

        gen-func-cross-fade
        (gen/tuple
          (gen/return "cross-fade(")
          (gen/return " ")
          (:nonprop-cf-mixing-image gmap)
          (gen/return " ")
          (gen/return ",")
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (:nonprop-cf-final-image gmap)])
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-cross-fade gen-func-cross-fade)

        gen-nonprop-function-token
        (gen/return "STUB_flex_function_token")
        gmap (assoc gmap :nonprop-function-token gen-nonprop-function-token)

        gen-prop-azimuth
        (gen/frequency [
          [(get weights [:prop-azimuth :alt 0] 100)
            (gen/tuple
              (:nonprop-angle gmap)
              (gen/return " "))]
          [(get weights [:prop-azimuth :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/frequency [
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 0] 100)
                          (gen/tuple
                            (gen/return "left-side")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 1] 100)
                          (gen/tuple
                            (gen/return "far-left")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 2] 100)
                          (gen/tuple
                            (gen/return "left")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 3] 100)
                          (gen/tuple
                            (gen/return "center-left")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 4] 100)
                          (gen/tuple
                            (gen/return "center")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 5] 100)
                          (gen/tuple
                            (gen/return "center-right")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 6] 100)
                          (gen/tuple
                            (gen/return "right")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 7] 100)
                          (gen/tuple
                            (gen/return "far-right")
                            (gen/return " "))]
                        [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 0 :cat 0 :alt 8] 100)
                          (gen/tuple
                            (gen/return "right-side")
                            (gen/return " "))]])
                      (gen/return " "))]
                  [(get weights [:prop-azimuth :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/return "behind")
                      (gen/return " "))]])))
              (gen/return " "))]
          [(get weights [:prop-azimuth :alt 2] 100)
            (gen/tuple
              (gen/return "leftwards")
              (gen/return " "))]
          [(get weights [:prop-azimuth :alt 3] 100)
            (gen/tuple
              (gen/return "rightwards")
              (gen/return " "))]])
        gmap (assoc gmap :prop-azimuth gen-prop-azimuth)

        gen-prop-image-orientation
        (gen/frequency [
          [(get weights [:prop-image-orientation :alt 0] 100)
            (gen/tuple
              (gen/return "from-image")
              (gen/return " "))]
          [(get weights [:prop-image-orientation :alt 1] 100)
            (gen/tuple
              (:nonprop-angle gmap)
              (gen/return " "))]
          [(get weights [:prop-image-orientation :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-angle gmap)])
                (gen/return " ")
                (gen/return "flip")
                (gen/return " "))
              (gen/return " "))]])
        gmap (assoc gmap :prop-image-orientation gen-prop-image-orientation)

        gen-prop-initial-letter
        (gen/frequency [
          [(get weights [:prop-initial-letter :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-initial-letter :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-number gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-integer gmap)])
                (gen/return " "))
              (gen/return " "))]])
        gmap (assoc gmap :prop-initial-letter gen-prop-initial-letter)

        gen-prop-grid-column
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (:nonprop-grid-line gmap)
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop-grid-column gen-prop-grid-column)

        gen-prop--moz-outline-radius-bottomright
        (gen/tuple
          (:nonprop-outline-radius gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--moz-outline-radius-bottomright gen-prop--moz-outline-radius-bottomright)

        gen-prop-position
        (gen/frequency [
          [(get weights [:prop-position :alt 0] 100)
            (gen/tuple
              (gen/return "static")
              (gen/return " "))]
          [(get weights [:prop-position :alt 1] 100)
            (gen/tuple
              (gen/return "relative")
              (gen/return " "))]
          [(get weights [:prop-position :alt 2] 100)
            (gen/tuple
              (gen/return "absolute")
              (gen/return " "))]
          [(get weights [:prop-position :alt 3] 100)
            (gen/tuple
              (gen/return "sticky")
              (gen/return " "))]
          [(get weights [:prop-position :alt 4] 100)
            (gen/tuple
              (gen/return "fixed")
              (gen/return " "))]])
        gmap (assoc gmap :prop-position gen-prop-position)

        gen-prop-grid-row-start
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-row-start gen-prop-grid-row-start)

        gen-prop-border-top-left-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-top-left-radius :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:prop-border-top-left-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-top-left-radius gen-prop-border-top-left-radius)

        gen-prop-margin-inline-end
        (gen/tuple
          (:nonprop-margin-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-margin-inline-end gen-prop-margin-inline-end)

        gen-prop--webkit-tap-highlight-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-tap-highlight-color gen-prop--webkit-tap-highlight-color)

        gen-nonprop-composite-style
        (gen/frequency [
          [(get weights [:nonprop-composite-style :alt 0] 100)
            (gen/tuple
              (gen/return "clear")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 1] 100)
            (gen/tuple
              (gen/return "copy")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 2] 100)
            (gen/tuple
              (gen/return "source-over")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 3] 100)
            (gen/tuple
              (gen/return "source-in")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 4] 100)
            (gen/tuple
              (gen/return "source-out")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 5] 100)
            (gen/tuple
              (gen/return "source-atop")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 6] 100)
            (gen/tuple
              (gen/return "destination-over")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 7] 100)
            (gen/tuple
              (gen/return "destination-in")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 8] 100)
            (gen/tuple
              (gen/return "destination-out")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 9] 100)
            (gen/tuple
              (gen/return "destination-atop")
              (gen/return " "))]
          [(get weights [:nonprop-composite-style :alt 10] 100)
            (gen/tuple
              (gen/return "xor")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-composite-style gen-nonprop-composite-style)

        gen-prop--webkit-mask-composite
        (gen/tuple
          (:nonprop-composite-style gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-composite-style gmap)
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-composite gen-prop--webkit-mask-composite)

        gen-prop--webkit-mask-clip
        (gen/tuple
          (:nonprop-clip-style gmap)
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (:nonprop-clip-style gmap)
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-clip gen-prop--webkit-mask-clip)

        gen-prop--moz-border-bottom-colors
        (gen/frequency [
          [(get weights [:prop--moz-border-bottom-colors :alt 0] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/vector
                (gen/return " "))
              (gen/return " ")
              (:nonprop-color gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-border-bottom-colors :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-border-bottom-colors gen-prop--moz-border-bottom-colors)

        gen-prop-background-attachment
        (gen/tuple
          (:nonprop-attachment gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-attachment gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-attachment gen-prop-background-attachment)

        gen-func-image-set
        (gen/tuple
          (gen/return "image-set(")
          (gen/return " ")
          (:nonprop-image-set-option gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-image-set-option gmap)))
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-image-set gen-func-image-set)

        gen-prop-table-layout
        (gen/frequency [
          [(get weights [:prop-table-layout :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-table-layout :alt 1] 100)
            (gen/tuple
              (gen/return "fixed")
              (gen/return " "))]])
        gmap (assoc gmap :prop-table-layout gen-prop-table-layout)

        gen-prop-border-left-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-left-width gen-prop-border-left-width)

        gen-prop-font-weight
        (gen/frequency [
          [(get weights [:prop-font-weight :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 1] 100)
            (gen/tuple
              (gen/return "bold")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 2] 100)
            (gen/tuple
              (gen/return "bolder")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 3] 100)
            (gen/tuple
              (gen/return "lighter")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 4] 100)
            (gen/tuple
              (gen/return "100")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 5] 100)
            (gen/tuple
              (gen/return "200")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 6] 100)
            (gen/tuple
              (gen/return "300")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 7] 100)
            (gen/tuple
              (gen/return "400")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 8] 100)
            (gen/tuple
              (gen/return "500")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 9] 100)
            (gen/tuple
              (gen/return "600")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 10] 100)
            (gen/tuple
              (gen/return "700")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 11] 100)
            (gen/tuple
              (gen/return "800")
              (gen/return " "))]
          [(get weights [:prop-font-weight :alt 12] 100)
            (gen/tuple
              (gen/return "900")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-weight gen-prop-font-weight)

        gen-prop--webkit-mask-repeat-y
        (gen/frequency [
          [(get weights [:prop--webkit-mask-repeat-y :alt 0] 100)
            (gen/tuple
              (gen/return "repeat")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-y :alt 1] 100)
            (gen/tuple
              (gen/return "no-repeat")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-y :alt 2] 100)
            (gen/tuple
              (gen/return "space")
              (gen/return " "))]
          [(get weights [:prop--webkit-mask-repeat-y :alt 3] 100)
            (gen/tuple
              (gen/return "round")
              (gen/return " "))]])
        gmap (assoc gmap :prop--webkit-mask-repeat-y gen-prop--webkit-mask-repeat-y)

        gen-prop-text-decoration-skip
        (gen/frequency [
          [(get weights [:prop-text-decoration-skip :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-text-decoration-skip :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-text-decoration-skip :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/return "objects")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-skip :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/return "spaces")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-skip :alt 1 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (gen/return "ink")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-skip :alt 1 :cat 0 :plus :alt 3] 100)
                    (gen/tuple
                      (gen/return "edges")
                      (gen/return " "))]
                  [(get weights [:prop-text-decoration-skip :alt 1 :cat 0 :plus :alt 4] 100)
                    (gen/tuple
                      (gen/return "box-decoration")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-decoration-skip gen-prop-text-decoration-skip)

        gen-prop-max-block-size
        (gen/tuple
          (:nonprop-max-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-max-block-size gen-prop-max-block-size)

        gen-prop--moz-user-focus
        (gen/frequency [
          [(get weights [:prop--moz-user-focus :alt 0] 100)
            (gen/tuple
              (gen/return "ignore")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 1] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 2] 100)
            (gen/tuple
              (gen/return "select-after")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 3] 100)
            (gen/tuple
              (gen/return "select-before")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 4] 100)
            (gen/tuple
              (gen/return "select-menu")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 5] 100)
            (gen/tuple
              (gen/return "select-same")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 6] 100)
            (gen/tuple
              (gen/return "select-all")
              (gen/return " "))]
          [(get weights [:prop--moz-user-focus :alt 7] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-user-focus gen-prop--moz-user-focus)

        gen-prop-border-top-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-top-width gen-prop-border-top-width)

        gen-prop-animation-timing-function
        (gen/tuple
          (:nonprop-single-timing-function gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-timing-function gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-timing-function gen-prop-animation-timing-function)

        gen-prop--webkit-border-before
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop--webkit-border-before :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-border-width gmap)
                (gen/return " "))]
            [(get weights [:prop--webkit-border-before :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-border-style gmap)
                (gen/return " "))]
            [(get weights [:prop--webkit-border-before :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop--webkit-border-before gen-prop--webkit-border-before)

        gen-prop-page-break-before
        (gen/frequency [
          [(get weights [:prop-page-break-before :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-page-break-before :alt 1] 100)
            (gen/tuple
              (gen/return "always")
              (gen/return " "))]
          [(get weights [:prop-page-break-before :alt 2] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]
          [(get weights [:prop-page-break-before :alt 3] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-page-break-before :alt 4] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]])
        gmap (assoc gmap :prop-page-break-before gen-prop-page-break-before)

        gen-nonprop-single-animation-iteration-count
        (gen/frequency [
          [(get weights [:nonprop-single-animation-iteration-count :alt 0] 100)
            (gen/tuple
              (gen/return "infinite")
              (gen/return " "))]
          [(get weights [:nonprop-single-animation-iteration-count :alt 1] 100)
            (gen/tuple
              (:nonprop-number gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-single-animation-iteration-count gen-nonprop-single-animation-iteration-count)

        gen-nonprop-single-animation
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:nonprop-single-animation :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-time gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-single-timing-function gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-time gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 3] 100)
              (gen/tuple
                (:nonprop-single-animation-iteration-count gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 4] 100)
              (gen/tuple
                (:nonprop-single-animation-direction gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 5] 100)
              (gen/tuple
                (:nonprop-single-animation-fill-mode gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 6] 100)
              (gen/tuple
                (:nonprop-single-animation-play-state gmap)
                (gen/return " "))]
            [(get weights [:nonprop-single-animation :plus :alt 7] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:nonprop-single-animation :plus :alt 7 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "none")
                      (gen/return " "))]
                  [(get weights [:nonprop-single-animation :plus :alt 7 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-keyframes-name gmap)
                      (gen/return " "))]])
                (gen/return " "))]])))
        gmap (assoc gmap :nonprop-single-animation gen-nonprop-single-animation)]
    gmap))

(defn- css3-generators-part-10 [gmap weights]
  (let [
        gen-prop-grid-column-start
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-column-start gen-prop-grid-column-start)

        gen-prop-align-content
        (gen/frequency [
          [(get weights [:prop-align-content :alt 0] 100)
            (gen/tuple
              (gen/return "flex-start")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 1] 100)
            (gen/tuple
              (gen/return "flex-end")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 2] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 3] 100)
            (gen/tuple
              (gen/return "space-between")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 4] 100)
            (gen/tuple
              (gen/return "space-around")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 5] 100)
            (gen/tuple
              (gen/return "space-evenly")
              (gen/return " "))]
          [(get weights [:prop-align-content :alt 6] 100)
            (gen/tuple
              (gen/return "stretch")
              (gen/return " "))]])
        gmap (assoc gmap :prop-align-content gen-prop-align-content)

        gen-prop-border-color
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-color :cat 0 :alt 0] 100)
              (:nonprop-color gmap)]
            [(get weights [:prop-border-color :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (:nonprop-color gmap))]
            [(get weights [:prop-border-color :cat 0 :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (:nonprop-color gmap)
                (:nonprop-color gmap))]
            [(get weights [:prop-border-color :cat 0 :alt 3] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (:nonprop-color gmap)
                (:nonprop-color gmap)
                (:nonprop-color gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-color gen-prop-border-color)

        gen-nonprop-bg-layer
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-bg-layer :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-bg-image gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-bg-layer :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-position gmap)
                  (gen/return " "))]])))
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 0] 100)
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (gen/tuple
                      (gen/return "/")
                      (gen/return " ")
                      (:nonprop-bg-size gmap)
                      (gen/return " "))])
                  (gen/return " "))]
              [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-repeat-style gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 2] 100)
                (gen/tuple
                  (:nonprop-attachment gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 3] 100)
                (gen/tuple
                  (gen/frequency [
                    [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 3 :cat 0 :alt 0] 100)
                      (:nonprop-box gmap)]
                    [(get weights [:nonprop-bg-layer :cat 1 :plus :alt 3 :cat 0 :alt 1] 100)
                      (gen/tuple
                        (:nonprop-box gmap)
                        (:nonprop-box gmap))]])
                  (gen/return " "))]]))))
        gmap (assoc gmap :nonprop-bg-layer gen-nonprop-bg-layer)

        gen-prop-font-variant-position
        (gen/frequency [
          [(get weights [:prop-font-variant-position :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-position :alt 1] 100)
            (gen/tuple
              (gen/return "sub")
              (gen/return " "))]
          [(get weights [:prop-font-variant-position :alt 2] 100)
            (gen/tuple
              (gen/return "super")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-position gen-prop-font-variant-position)

        gen-prop-grid-column-end
        (gen/tuple
          (:nonprop-grid-line gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-grid-column-end gen-prop-grid-column-end)

        gen-prop-text-emphasis-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-text-emphasis-color gen-prop-text-emphasis-color)

        gen-prop-background-size
        (gen/tuple
          (:nonprop-bg-size gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-bg-size gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-size gen-prop-background-size)

        gen-prop-font-variant-east-asian
        (gen/frequency [
          [(get weights [:prop-font-variant-east-asian :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant-east-asian :alt 1] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-font-variant-east-asian :alt 1 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-east-asian-variant-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-east-asian :alt 1 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-east-asian-width-values gmap)
                      (gen/return " "))]
                  [(get weights [:prop-font-variant-east-asian :alt 1 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (gen/return "ruby")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant-east-asian gen-prop-font-variant-east-asian)

        gen-prop-perspective-origin
        (gen/tuple
          (:nonprop-position gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-perspective-origin gen-prop-perspective-origin)

        gen-prop-animation
        (gen/tuple
          (:nonprop-single-animation gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-animation gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation gen-prop-animation)

        gen-prop-offset-position
        (gen/frequency [
          [(get weights [:prop-offset-position :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-offset-position :alt 1] 100)
            (gen/tuple
              (:nonprop-position gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-offset-position gen-prop-offset-position)

        gen-prop-mask-origin
        (gen/tuple
          (:nonprop-geometry-box gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-geometry-box gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-origin gen-prop-mask-origin)

        gen-nonprop-mask-origin
        (:prop-mask-origin gmap)
        gmap (assoc gmap :nonprop-mask-origin gen-nonprop-mask-origin)

        gen-prop-margin-block-start
        (gen/tuple
          (:nonprop-margin-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-margin-block-start gen-prop-margin-block-start)

        gen-prop--moz-text-blink
        (gen/frequency [
          [(get weights [:prop--moz-text-blink :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop--moz-text-blink :alt 1] 100)
            (gen/tuple
              (gen/return "blink")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-text-blink gen-prop--moz-text-blink)

        gen-prop--moz-outline-radius-topleft
        (gen/tuple
          (:nonprop-outline-radius gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--moz-outline-radius-topleft gen-prop--moz-outline-radius-topleft)

        gen-prop-transform-style
        (gen/frequency [
          [(get weights [:prop-transform-style :alt 0] 100)
            (gen/tuple
              (gen/return "flat")
              (gen/return " "))]
          [(get weights [:prop-transform-style :alt 1] 100)
            (gen/tuple
              (gen/return "preserve-3d")
              (gen/return " "))]])
        gmap (assoc gmap :prop-transform-style gen-prop-transform-style)

        gen-prop-animation-direction
        (gen/tuple
          (:nonprop-single-animation-direction gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-animation-direction gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-direction gen-prop-animation-direction)

        gen-prop-border-image-outset
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-image-outset :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-border-image-outset :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:prop-border-image-outset :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-number gmap)
                    (gen/return " "))]])]
            [(get weights [:prop-border-image-outset :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]]))]
            [(get weights [:prop-border-image-outset :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 2 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]]))]
            [(get weights [:prop-border-image-outset :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 3 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-outset :cat 0 :alt 3 :cat 3 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-image-outset gen-prop-border-image-outset)

        gen-prop-margin-inline-start
        (gen/tuple
          (:nonprop-margin-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-margin-inline-start gen-prop-margin-inline-start)

        gen-prop--webkit-mask-origin
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop--webkit-mask-origin :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "padding")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-origin :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "border")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-origin :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "content")
                (gen/return " "))]])
          (gen/return " ")
          (gen/vector
            (gen/tuple
              (gen/return ",")
              (gen/return " ")
              (gen/frequency [
                [(get weights [:prop--webkit-mask-origin :cat 2 :star :cat 2 :alt 0] 100)
                  (gen/tuple
                    (gen/return "border")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-origin :cat 2 :star :cat 2 :alt 1] 100)
                  (gen/tuple
                    (gen/return "padding")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-origin :cat 2 :star :cat 2 :alt 2] 100)
                  (gen/tuple
                    (gen/return "content")
                    (gen/return " "))]])
              (gen/return " ")))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-origin gen-prop--webkit-mask-origin)

        gen-prop-scroll-snap-type
        (gen/frequency [
          [(get weights [:prop-scroll-snap-type :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type :alt 1] 100)
            (gen/tuple
              (gen/return "mandatory")
              (gen/return " "))]
          [(get weights [:prop-scroll-snap-type :alt 2] 100)
            (gen/tuple
              (gen/return "proximity")
              (gen/return " "))]])
        gmap (assoc gmap :prop-scroll-snap-type gen-prop-scroll-snap-type)

        gen-prop-max-height
        (gen/frequency [
          [(get weights [:prop-max-height :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 4] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 5] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-max-height :alt 6] 100)
            (gen/tuple
              (gen/return "fill-available")
              (gen/return " "))]])
        gmap (assoc gmap :prop-max-height gen-prop-max-height)

        gen-prop-offset-distance
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-offset-distance gen-prop-offset-distance)

        gen-prop-ruby-align
        (gen/frequency [
          [(get weights [:prop-ruby-align :alt 0] 100)
            (gen/tuple
              (gen/return "start")
              (gen/return " "))]
          [(get weights [:prop-ruby-align :alt 1] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-ruby-align :alt 2] 100)
            (gen/tuple
              (gen/return "space-between")
              (gen/return " "))]
          [(get weights [:prop-ruby-align :alt 3] 100)
            (gen/tuple
              (gen/return "space-around")
              (gen/return " "))]])
        gmap (assoc gmap :prop-ruby-align gen-prop-ruby-align)

        gen-prop-border-image-repeat
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-image-repeat :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-border-image-repeat :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (gen/return "stretch")
                    (gen/return " "))]
                [(get weights [:prop-border-image-repeat :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (gen/return "repeat")
                    (gen/return " "))]
                [(get weights [:prop-border-image-repeat :cat 0 :alt 0 :alt 2] 100)
                  (gen/tuple
                    (gen/return "round")
                    (gen/return " "))]
                [(get weights [:prop-border-image-repeat :cat 0 :alt 0 :alt 3] 100)
                  (gen/tuple
                    (gen/return "space")
                    (gen/return " "))]])]
            [(get weights [:prop-border-image-repeat :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "stretch")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "repeat")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "round")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 0 :alt 3] 100)
                    (gen/tuple
                      (gen/return "space")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (gen/return "stretch")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (gen/return "repeat")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "round")
                      (gen/return " "))]
                  [(get weights [:prop-border-image-repeat :cat 0 :alt 1 :cat 1 :alt 3] 100)
                    (gen/tuple
                      (gen/return "space")
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-image-repeat gen-prop-border-image-repeat)

        gen-nonprop-border-image-repeat
        (:prop-border-image-repeat gmap)
        gmap (assoc gmap :nonprop-border-image-repeat gen-nonprop-border-image-repeat)

        gen-prop-border-image-width
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-image-width :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-border-image-width :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (gen/return " "))]
                [(get weights [:prop-border-image-width :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-number gmap)
                    (gen/return " "))]
                [(get weights [:prop-border-image-width :cat 0 :alt 0 :alt 2] 100)
                  (gen/tuple
                    (gen/return "auto")
                    (gen/return " "))]])]
            [(get weights [:prop-border-image-width :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 1 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]
            [(get weights [:prop-border-image-width :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 2 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]
            [(get weights [:prop-border-image-width :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 3 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 3 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-number gmap)
                      (gen/return " "))]
                  [(get weights [:prop-border-image-width :cat 0 :alt 3 :cat 3 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-image-width gen-prop-border-image-width)

        gen-nonprop-border-image-width
        (:prop-border-image-width gmap)
        gmap (assoc gmap :nonprop-border-image-width gen-nonprop-border-image-width)

        gen-nonprop-border-image-outset
        (:prop-border-image-outset gmap)
        gmap (assoc gmap :nonprop-border-image-outset gen-nonprop-border-image-outset)

        gen-nonprop-border-image-source
        (:prop-border-image-source gmap)
        gmap (assoc gmap :nonprop-border-image-source gen-nonprop-border-image-source)

        gen-prop-border-image
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:prop-border-image :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-border-image-source gmap)
                  (gen/return " "))]
              [(get weights [:prop-border-image :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-border-image-slice gmap)
                  (gen/return " "))]])))
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:prop-border-image :cat 1 :plus :alt 0] 100)
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (gen/frequency [
                      [(get weights [:prop-border-image :cat 1 :plus :alt 0 :cat 0 :opt :alt 0] 100)
                        (gen/tuple
                          (gen/return "/")
                          (gen/return " ")
                          (:nonprop-border-image-width gmap)
                          (gen/return " "))]
                      [(get weights [:prop-border-image :cat 1 :plus :alt 0 :cat 0 :opt :alt 1] 100)
                        (gen/tuple
                          (gen/return "/")
                          (gen/return " ")
                          (gen/one-of [
                            (gen/return "")
                            (:nonprop-border-image-width gmap)])
                          (gen/return " ")
                          (gen/return "/")
                          (gen/return " ")
                          (:nonprop-border-image-outset gmap)
                          (gen/return " "))]])])
                  (gen/return " "))]
              [(get weights [:prop-border-image :cat 1 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-border-image-repeat gmap)
                  (gen/return " "))]]))))
        gmap (assoc gmap :prop-border-image gen-prop-border-image)

        gen-nonprop-font-weight
        (:prop-font-weight gmap)
        gmap (assoc gmap :nonprop-font-weight gen-nonprop-font-weight)

        gen-prop-margin
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-margin :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-margin :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:prop-margin :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-percentage gmap)
                    (gen/return " "))]
                [(get weights [:prop-margin :cat 0 :alt 0 :alt 2] 100)
                  (gen/tuple
                    (gen/return "auto")
                    (gen/return " "))]])]
            [(get weights [:prop-margin :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 1 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]
            [(get weights [:prop-margin :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 2 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]
            [(get weights [:prop-margin :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 2 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 3 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 3 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]
                  [(get weights [:prop-margin :cat 0 :alt 3 :cat 3 :alt 2] 100)
                    (gen/tuple
                      (gen/return "auto")
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-margin gen-prop-margin)

        gen-prop--moz-appearance
        (gen/frequency [
          [(get weights [:prop--moz-appearance :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 1] 100)
            (gen/tuple
              (gen/return "button")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 2] 100)
            (gen/tuple
              (gen/return "button-arrow-down")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 3] 100)
            (gen/tuple
              (gen/return "button-arrow-next")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 4] 100)
            (gen/tuple
              (gen/return "button-arrow-previous")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 5] 100)
            (gen/tuple
              (gen/return "button-arrow-up")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 6] 100)
            (gen/tuple
              (gen/return "button-bevel")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 7] 100)
            (gen/tuple
              (gen/return "button-focus")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 8] 100)
            (gen/tuple
              (gen/return "caret")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 9] 100)
            (gen/tuple
              (gen/return "checkbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 10] 100)
            (gen/tuple
              (gen/return "checkbox-container")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 11] 100)
            (gen/tuple
              (gen/return "checkbox-label")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 12] 100)
            (gen/tuple
              (gen/return "checkmenuitem")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 13] 100)
            (gen/tuple
              (gen/return "dualbutton")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 14] 100)
            (gen/tuple
              (gen/return "groupbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 15] 100)
            (gen/tuple
              (gen/return "listbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 16] 100)
            (gen/tuple
              (gen/return "listitem")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 17] 100)
            (gen/tuple
              (gen/return "menuarrow")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 18] 100)
            (gen/tuple
              (gen/return "menubar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 19] 100)
            (gen/tuple
              (gen/return "menucheckbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 20] 100)
            (gen/tuple
              (gen/return "menuimage")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 21] 100)
            (gen/tuple
              (gen/return "menuitem")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 22] 100)
            (gen/tuple
              (gen/return "menuitemtext")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 23] 100)
            (gen/tuple
              (gen/return "menulist")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 24] 100)
            (gen/tuple
              (gen/return "menulist-button")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 25] 100)
            (gen/tuple
              (gen/return "menulist-text")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 26] 100)
            (gen/tuple
              (gen/return "menulist-textfield")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 27] 100)
            (gen/tuple
              (gen/return "menupopup")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 28] 100)
            (gen/tuple
              (gen/return "menuradio")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 29] 100)
            (gen/tuple
              (gen/return "menuseparator")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 30] 100)
            (gen/tuple
              (gen/return "meterbar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 31] 100)
            (gen/tuple
              (gen/return "meterchunk")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 32] 100)
            (gen/tuple
              (gen/return "progressbar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 33] 100)
            (gen/tuple
              (gen/return "progressbar-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 34] 100)
            (gen/tuple
              (gen/return "progresschunk")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 35] 100)
            (gen/tuple
              (gen/return "progresschunk-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 36] 100)
            (gen/tuple
              (gen/return "radio")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 37] 100)
            (gen/tuple
              (gen/return "radio-container")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 38] 100)
            (gen/tuple
              (gen/return "radio-label")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 39] 100)
            (gen/tuple
              (gen/return "radiomenuitem")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 40] 100)
            (gen/tuple
              (gen/return "range")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 41] 100)
            (gen/tuple
              (gen/return "range-thumb")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 42] 100)
            (gen/tuple
              (gen/return "resizer")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 43] 100)
            (gen/tuple
              (gen/return "resizerpanel")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 44] 100)
            (gen/tuple
              (gen/return "scale-horizontal")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 45] 100)
            (gen/tuple
              (gen/return "scalethumbend")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 46] 100)
            (gen/tuple
              (gen/return "scalethumb-horizontal")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 47] 100)
            (gen/tuple
              (gen/return "scalethumbstart")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 48] 100)
            (gen/tuple
              (gen/return "scalethumbtick")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 49] 100)
            (gen/tuple
              (gen/return "scalethumb-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 50] 100)
            (gen/tuple
              (gen/return "scale-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 51] 100)
            (gen/tuple
              (gen/return "scrollbarbutton-down")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 52] 100)
            (gen/tuple
              (gen/return "scrollbarbutton-left")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 53] 100)
            (gen/tuple
              (gen/return "scrollbarbutton-right")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 54] 100)
            (gen/tuple
              (gen/return "scrollbarbutton-up")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 55] 100)
            (gen/tuple
              (gen/return "scrollbarthumb-horizontal")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 56] 100)
            (gen/tuple
              (gen/return "scrollbarthumb-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 57] 100)
            (gen/tuple
              (gen/return "scrollbartrack-horizontal")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 58] 100)
            (gen/tuple
              (gen/return "scrollbartrack-vertical")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 59] 100)
            (gen/tuple
              (gen/return "searchfield")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 60] 100)
            (gen/tuple
              (gen/return "separator")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 61] 100)
            (gen/tuple
              (gen/return "sheet")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 62] 100)
            (gen/tuple
              (gen/return "spinner")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 63] 100)
            (gen/tuple
              (gen/return "spinner-downbutton")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 64] 100)
            (gen/tuple
              (gen/return "spinner-textfield")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 65] 100)
            (gen/tuple
              (gen/return "spinner-upbutton")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 66] 100)
            (gen/tuple
              (gen/return "splitter")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 67] 100)
            (gen/tuple
              (gen/return "statusbar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 68] 100)
            (gen/tuple
              (gen/return "statusbarpanel")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 69] 100)
            (gen/tuple
              (gen/return "tab")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 70] 100)
            (gen/tuple
              (gen/return "tabpanel")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 71] 100)
            (gen/tuple
              (gen/return "tabpanels")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 72] 100)
            (gen/tuple
              (gen/return "tab-scroll-arrow-back")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 73] 100)
            (gen/tuple
              (gen/return "tab-scroll-arrow-forward")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 74] 100)
            (gen/tuple
              (gen/return "textfield")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 75] 100)
            (gen/tuple
              (gen/return "textfield-multiline")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 76] 100)
            (gen/tuple
              (gen/return "toolbar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 77] 100)
            (gen/tuple
              (gen/return "toolbarbutton")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 78] 100)
            (gen/tuple
              (gen/return "toolbarbutton-dropdown")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 79] 100)
            (gen/tuple
              (gen/return "toolbargripper")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 80] 100)
            (gen/tuple
              (gen/return "toolbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 81] 100)
            (gen/tuple
              (gen/return "tooltip")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 82] 100)
            (gen/tuple
              (gen/return "treeheader")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 83] 100)
            (gen/tuple
              (gen/return "treeheadercell")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 84] 100)
            (gen/tuple
              (gen/return "treeheadersortarrow")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 85] 100)
            (gen/tuple
              (gen/return "treeitem")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 86] 100)
            (gen/tuple
              (gen/return "treeline")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 87] 100)
            (gen/tuple
              (gen/return "treetwisty")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 88] 100)
            (gen/tuple
              (gen/return "treetwistyopen")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 89] 100)
            (gen/tuple
              (gen/return "treeview")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 90] 100)
            (gen/tuple
              (gen/return "-moz-mac-unified-toolbar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 91] 100)
            (gen/tuple
              (gen/return "-moz-win-borderless-glass")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 92] 100)
            (gen/tuple
              (gen/return "-moz-win-browsertabbar-toolbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 93] 100)
            (gen/tuple
              (gen/return "-moz-win-communicationstext")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 94] 100)
            (gen/tuple
              (gen/return "-moz-win-communications-toolbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 95] 100)
            (gen/tuple
              (gen/return "-moz-win-exclude-glass")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 96] 100)
            (gen/tuple
              (gen/return "-moz-win-glass")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 97] 100)
            (gen/tuple
              (gen/return "-moz-win-mediatext")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 98] 100)
            (gen/tuple
              (gen/return "-moz-win-media-toolbox")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 99] 100)
            (gen/tuple
              (gen/return "-moz-window-button-box")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 100] 100)
            (gen/tuple
              (gen/return "-moz-window-button-box-maximized")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 101] 100)
            (gen/tuple
              (gen/return "-moz-window-button-close")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 102] 100)
            (gen/tuple
              (gen/return "-moz-window-button-maximize")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 103] 100)
            (gen/tuple
              (gen/return "-moz-window-button-minimize")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 104] 100)
            (gen/tuple
              (gen/return "-moz-window-button-restore")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 105] 100)
            (gen/tuple
              (gen/return "-moz-window-frame-bottom")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 106] 100)
            (gen/tuple
              (gen/return "-moz-window-frame-left")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 107] 100)
            (gen/tuple
              (gen/return "-moz-window-frame-right")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 108] 100)
            (gen/tuple
              (gen/return "-moz-window-titlebar")
              (gen/return " "))]
          [(get weights [:prop--moz-appearance :alt 109] 100)
            (gen/tuple
              (gen/return "-moz-window-titlebar-maximized")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-appearance gen-prop--moz-appearance)

        gen-prop-box-align
        (gen/frequency [
          [(get weights [:prop-box-align :alt 0] 100)
            (gen/tuple
              (gen/return "start")
              (gen/return " "))]
          [(get weights [:prop-box-align :alt 1] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-box-align :alt 2] 100)
            (gen/tuple
              (gen/return "end")
              (gen/return " "))]
          [(get weights [:prop-box-align :alt 3] 100)
            (gen/tuple
              (gen/return "baseline")
              (gen/return " "))]
          [(get weights [:prop-box-align :alt 4] 100)
            (gen/tuple
              (gen/return "stretch")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-align gen-prop-box-align)

        gen-nonprop-compositing-operator
        (gen/frequency [
          [(get weights [:nonprop-compositing-operator :alt 0] 100)
            (gen/tuple
              (gen/return "add")
              (gen/return " "))]
          [(get weights [:nonprop-compositing-operator :alt 1] 100)
            (gen/tuple
              (gen/return "subtract")
              (gen/return " "))]
          [(get weights [:nonprop-compositing-operator :alt 2] 100)
            (gen/tuple
              (gen/return "intersect")
              (gen/return " "))]
          [(get weights [:nonprop-compositing-operator :alt 3] 100)
            (gen/tuple
              (gen/return "exclude")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-compositing-operator gen-nonprop-compositing-operator)

        gen-nonprop-mask-layer
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-mask-layer :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-mask-reference gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-position gmap)
                  (gen/return " "))]])))
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 0] 100)
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (gen/tuple
                      (gen/return "/")
                      (gen/return " ")
                      (:nonprop-bg-size gmap)
                      (gen/return " "))])
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-repeat-style gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 2] 100)
                (gen/tuple
                  (:nonprop-geometry-box gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 3] 100)
                (gen/tuple
                  (gen/frequency [
                    [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 3 :cat 0 :alt 0] 100)
                      (gen/tuple
                        (:nonprop-geometry-box gmap)
                        (gen/return " "))]
                    [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 3 :cat 0 :alt 1] 100)
                      (gen/tuple
                        (gen/return "no-clip")
                        (gen/return " "))]])
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 4] 100)
                (gen/tuple
                  (:nonprop-compositing-operator gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-mask-layer :cat 1 :plus :alt 5] 100)
                (gen/tuple
                  (:nonprop-masking-mode gmap)
                  (gen/return " "))]]))))
        gmap (assoc gmap :nonprop-mask-layer gen-nonprop-mask-layer)

        gen-prop-mask-repeat
        (gen/tuple
          (:nonprop-repeat-style gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-repeat-style gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-repeat gen-prop-mask-repeat)

        gen-prop-overflow-wrap
        (gen/frequency [
          [(get weights [:prop-overflow-wrap :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-overflow-wrap :alt 1] 100)
            (gen/tuple
              (gen/return "break-word")
              (gen/return " "))]])
        gmap (assoc gmap :prop-overflow-wrap gen-prop-overflow-wrap)

        gen-prop-border-inline-end-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-inline-end-color gen-prop-border-inline-end-color)

        gen-prop-font-kerning
        (gen/frequency [
          [(get weights [:prop-font-kerning :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-font-kerning :alt 1] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-kerning :alt 2] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-kerning gen-prop-font-kerning)

        gen-prop-text-overflow
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-text-overflow :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-text-overflow :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (gen/return "clip")
                    (gen/return " "))]
                [(get weights [:prop-text-overflow :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (gen/return "ellipsis")
                    (gen/return " "))]
                [(get weights [:prop-text-overflow :cat 0 :alt 0 :alt 2] 100)
                  (gen/tuple
                    (:nonprop-string gmap)
                    (gen/return " "))]])]
            [(get weights [:prop-text-overflow :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "clip")
                      (gen/return " "))]
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "ellipsis")
                      (gen/return " "))]
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 0 :alt 2] 100)
                    (gen/tuple
                      (:nonprop-string gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (gen/return "clip")
                      (gen/return " "))]
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (gen/return "ellipsis")
                      (gen/return " "))]
                  [(get weights [:prop-text-overflow :cat 0 :alt 1 :cat 1 :alt 2] 100)
                    (gen/tuple
                      (:nonprop-string gmap)
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-text-overflow gen-prop-text-overflow)

        gen-prop-order
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-order gen-prop-order)

        gen-prop--webkit-border-before-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-border-before-color gen-prop--webkit-border-before-color)

        gen-nonprop-text-emphasis-color
        (:prop-text-emphasis-color gmap)
        gmap (assoc gmap :nonprop-text-emphasis-color gen-nonprop-text-emphasis-color)

        gen-nonprop-mask-repeat
        (:prop-mask-repeat gmap)
        gmap (assoc gmap :nonprop-mask-repeat gen-nonprop-mask-repeat)

        gen-prop-object-position
        (gen/tuple
          (:nonprop-position gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-object-position gen-prop-object-position)

        gen-prop-writing-mode
        (gen/frequency [
          [(get weights [:prop-writing-mode :alt 0] 100)
            (gen/tuple
              (gen/return "horizontal-tb")
              (gen/return " "))]
          [(get weights [:prop-writing-mode :alt 1] 100)
            (gen/tuple
              (gen/return "vertical-rl")
              (gen/return " "))]
          [(get weights [:prop-writing-mode :alt 2] 100)
            (gen/tuple
              (gen/return "vertical-lr")
              (gen/return " "))]
          [(get weights [:prop-writing-mode :alt 3] 100)
            (gen/tuple
              (gen/return "sideways-rl")
              (gen/return " "))]
          [(get weights [:prop-writing-mode :alt 4] 100)
            (gen/tuple
              (gen/return "sideways-lr")
              (gen/return " "))]])
        gmap (assoc gmap :prop-writing-mode gen-prop-writing-mode)]
    gmap))

(defn- css3-generators-part-11 [gmap weights]
  (let [
        gen-prop-overflow-y
        (gen/frequency [
          [(get weights [:prop-overflow-y :alt 0] 100)
            (gen/tuple
              (gen/return "visible")
              (gen/return " "))]
          [(get weights [:prop-overflow-y :alt 1] 100)
            (gen/tuple
              (gen/return "hidden")
              (gen/return " "))]
          [(get weights [:prop-overflow-y :alt 2] 100)
            (gen/tuple
              (gen/return "scroll")
              (gen/return " "))]
          [(get weights [:prop-overflow-y :alt 3] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-overflow-y gen-prop-overflow-y)

        gen-prop-border-block-end-style
        (gen/tuple
          (:nonprop-border-style gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-end-style gen-prop-border-block-end-style)

        gen-prop-border-bottom-width
        (gen/tuple
          (:nonprop-br-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-bottom-width gen-prop-border-bottom-width)

        gen-prop-border-block-end-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-end-color gen-prop-border-block-end-color)

        gen-prop-border-bottom
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-bottom :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-bottom :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-bottom :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-bottom gen-prop-border-bottom)

        gen-prop--moz-border-right-colors
        (gen/frequency [
          [(get weights [:prop--moz-border-right-colors :alt 0] 100)
            (gen/tuple
              (:nonprop-color gmap)
              (gen/vector
                (gen/return " "))
              (gen/return " ")
              (:nonprop-color gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-border-right-colors :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-border-right-colors gen-prop--moz-border-right-colors)

        gen-nonprop-mf-boolean
        (gen/tuple
          (:nonprop-mf-name gmap)
          (gen/return " "))
        gmap (assoc gmap :nonprop-mf-boolean gen-nonprop-mf-boolean)

        gen-prop--webkit-mask-position-y
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop--webkit-mask-position-y :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-y :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "top")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-y :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-y :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/return "bottom")
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop--webkit-mask-position-y :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-y :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/return "top")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-y :cat 1 :star :cat 1 :alt 2] 100)
                  (gen/tuple
                    (gen/return "center")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-y :cat 1 :star :cat 1 :alt 3] 100)
                  (gen/tuple
                    (gen/return "bottom")
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-position-y gen-prop--webkit-mask-position-y)

        gen-prop-page-break-inside
        (gen/frequency [
          [(get weights [:prop-page-break-inside :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-page-break-inside :alt 1] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]])
        gmap (assoc gmap :prop-page-break-inside gen-prop-page-break-inside)

        gen-nonprop-offset-position
        (:prop-offset-position gmap)
        gmap (assoc gmap :nonprop-offset-position gen-nonprop-offset-position)

        gen-prop-font-stretch
        (gen/frequency [
          [(get weights [:prop-font-stretch :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 1] 100)
            (gen/tuple
              (gen/return "ultra-condensed")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 2] 100)
            (gen/tuple
              (gen/return "extra-condensed")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 3] 100)
            (gen/tuple
              (gen/return "condensed")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 4] 100)
            (gen/tuple
              (gen/return "semi-condensed")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 5] 100)
            (gen/tuple
              (gen/return "semi-expanded")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 6] 100)
            (gen/tuple
              (gen/return "expanded")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 7] 100)
            (gen/tuple
              (gen/return "extra-expanded")
              (gen/return " "))]
          [(get weights [:prop-font-stretch :alt 8] 100)
            (gen/tuple
              (gen/return "ultra-expanded")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-stretch gen-prop-font-stretch)

        gen-nonprop-font-stretch
        (:prop-font-stretch gmap)
        gmap (assoc gmap :nonprop-font-stretch gen-nonprop-font-stretch)

        gen-prop-text-indent
        (gen/tuple
          (:nonprop-length-percentage gmap)
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "hanging")])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/return "each-line")])
          (gen/return " "))
        gmap (assoc gmap :prop-text-indent gen-prop-text-indent)

        gen-prop-min-inline-size
        (gen/tuple
          (:nonprop-min-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-min-inline-size gen-prop-min-inline-size)

        gen-prop-padding-inline-start
        (gen/tuple
          (:nonprop-padding-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-padding-inline-start gen-prop-padding-inline-start)

        gen-prop-font-style
        (gen/frequency [
          [(get weights [:prop-font-style :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-style :alt 1] 100)
            (gen/tuple
              (gen/return "italic")
              (gen/return " "))]
          [(get weights [:prop-font-style :alt 2] 100)
            (gen/tuple
              (gen/return "oblique")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-style gen-prop-font-style)

        gen-prop--moz-force-broken-image-icon
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--moz-force-broken-image-icon gen-prop--moz-force-broken-image-icon)

        gen-prop--webkit-mask-position-x
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop--webkit-mask-position-x :cat 0 :alt 0] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-x :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "left")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-x :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [(get weights [:prop--webkit-mask-position-x :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/return "right")
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop--webkit-mask-position-x :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length-percentage gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-x :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/return "left")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-x :cat 1 :star :cat 1 :alt 2] 100)
                  (gen/tuple
                    (gen/return "center")
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask-position-x :cat 1 :star :cat 1 :alt 3] 100)
                  (gen/tuple
                    (gen/return "right")
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask-position-x gen-prop--webkit-mask-position-x)

        gen-prop--moz-orient
        (gen/frequency [
          [(get weights [:prop--moz-orient :alt 0] 100)
            (gen/tuple
              (gen/return "inline")
              (gen/return " "))]
          [(get weights [:prop--moz-orient :alt 1] 100)
            (gen/tuple
              (gen/return "block")
              (gen/return " "))]
          [(get weights [:prop--moz-orient :alt 2] 100)
            (gen/tuple
              (gen/return "horizontal")
              (gen/return " "))]
          [(get weights [:prop--moz-orient :alt 3] 100)
            (gen/tuple
              (gen/return "vertical")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-orient gen-prop--moz-orient)

        gen-prop-padding
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-padding :cat 0 :alt 0] 100)
              (gen/frequency [
                [(get weights [:prop-padding :cat 0 :alt 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:prop-padding :cat 0 :alt 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-percentage gmap)
                    (gen/return " "))]])]
            [(get weights [:prop-padding :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 1 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 1 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 1 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 1 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]]))]
            [(get weights [:prop-padding :cat 0 :alt 2] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 2 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]]))]
            [(get weights [:prop-padding :cat 0 :alt 3] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 1 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 1 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 2 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 2 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]])
                (gen/frequency [
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 3 :alt 0] 100)
                    (gen/tuple
                      (:nonprop-length gmap)
                      (gen/return " "))]
                  [(get weights [:prop-padding :cat 0 :alt 3 :cat 3 :alt 1] 100)
                    (gen/tuple
                      (:nonprop-percentage gmap)
                      (gen/return " "))]]))]])
          (gen/return " "))
        gmap (assoc gmap :prop-padding gen-prop-padding)

        gen-prop-padding-bottom
        (gen/frequency [
          [(get weights [:prop-padding-bottom :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-padding-bottom :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-padding-bottom gen-prop-padding-bottom)

        gen-prop-cursor
        (gen/tuple
          (gen/tuple
            (gen/vector
              (gen/tuple
                (:nonprop-url gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (:nonprop-x gmap)
                    (gen/return " ")
                    (:nonprop-y gmap)
                    (gen/return " "))])
                (gen/return " ")
                (gen/return ",")
                (gen/return " ")))
            (gen/return " ")
            (gen/frequency [
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 0] 100)
                (gen/tuple
                  (gen/return "auto")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 1] 100)
                (gen/tuple
                  (gen/return "default")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 2] 100)
                (gen/tuple
                  (gen/return "none")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 3] 100)
                (gen/tuple
                  (gen/return "context-menu")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 4] 100)
                (gen/tuple
                  (gen/return "help")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 5] 100)
                (gen/tuple
                  (gen/return "pointer")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 6] 100)
                (gen/tuple
                  (gen/return "progress")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 7] 100)
                (gen/tuple
                  (gen/return "wait")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 8] 100)
                (gen/tuple
                  (gen/return "cell")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 9] 100)
                (gen/tuple
                  (gen/return "crosshair")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 10] 100)
                (gen/tuple
                  (gen/return "text")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 11] 100)
                (gen/tuple
                  (gen/return "vertical-text")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 12] 100)
                (gen/tuple
                  (gen/return "alias")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 13] 100)
                (gen/tuple
                  (gen/return "copy")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 14] 100)
                (gen/tuple
                  (gen/return "move")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 15] 100)
                (gen/tuple
                  (gen/return "no-drop")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 16] 100)
                (gen/tuple
                  (gen/return "not-allowed")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 17] 100)
                (gen/tuple
                  (gen/return "e-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 18] 100)
                (gen/tuple
                  (gen/return "n-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 19] 100)
                (gen/tuple
                  (gen/return "ne-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 20] 100)
                (gen/tuple
                  (gen/return "nw-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 21] 100)
                (gen/tuple
                  (gen/return "s-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 22] 100)
                (gen/tuple
                  (gen/return "se-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 23] 100)
                (gen/tuple
                  (gen/return "sw-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 24] 100)
                (gen/tuple
                  (gen/return "w-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 25] 100)
                (gen/tuple
                  (gen/return "ew-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 26] 100)
                (gen/tuple
                  (gen/return "ns-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 27] 100)
                (gen/tuple
                  (gen/return "nesw-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 28] 100)
                (gen/tuple
                  (gen/return "nwse-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 29] 100)
                (gen/tuple
                  (gen/return "col-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 30] 100)
                (gen/tuple
                  (gen/return "row-resize")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 31] 100)
                (gen/tuple
                  (gen/return "all-scroll")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 32] 100)
                (gen/tuple
                  (gen/return "zoom-in")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 33] 100)
                (gen/tuple
                  (gen/return "zoom-out")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 34] 100)
                (gen/tuple
                  (gen/return "grab")
                  (gen/return " "))]
              [(get weights [:prop-cursor :cat 0 :cat 2 :alt 35] 100)
                (gen/tuple
                  (gen/return "grabbing")
                  (gen/return " "))]])
            (gen/return " "))
          (gen/return " "))
        gmap (assoc gmap :prop-cursor gen-prop-cursor)

        gen-prop-animation-iteration-count
        (gen/tuple
          (:nonprop-single-animation-iteration-count gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-single-animation-iteration-count gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-animation-iteration-count gen-prop-animation-iteration-count)

        gen-prop-font-feature-settings
        (gen/frequency [
          [(get weights [:prop-font-feature-settings :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-feature-settings :alt 1] 100)
            (gen/tuple
              (:nonprop-feature-tag-value gmap)
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (:nonprop-feature-tag-value gmap)))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-feature-settings gen-prop-font-feature-settings)

        gen-prop-perspective
        (gen/frequency [
          [(get weights [:prop-perspective :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-perspective :alt 1] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-perspective gen-prop-perspective)

        gen-nonprop-time-percentage
        (gen/frequency [
          [(get weights [:nonprop-time-percentage :alt 0] 100)
            (gen/tuple
              (:nonprop-time gmap)
              (gen/return " "))]
          [(get weights [:nonprop-time-percentage :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-time-percentage gen-nonprop-time-percentage)

        gen-prop-border-top-right-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-top-right-radius :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:prop-border-top-right-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-top-right-radius gen-prop-border-top-right-radius)

        gen-nonprop-font-size
        (:prop-font-size gmap)
        gmap (assoc gmap :nonprop-font-size gen-nonprop-font-size)

        gen-nonprop-background-color
        (:prop-background-color gmap)
        gmap (assoc gmap :nonprop-background-color gen-nonprop-background-color)

        gen-nonprop-final-bg-layer
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-final-bg-layer :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-bg-image gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-position gmap)
                  (gen/return " "))]])))
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 0] 100)
                (gen/tuple
                  (gen/one-of [
                    (gen/return "")
                    (gen/tuple
                      (gen/return "/")
                      (gen/return " ")
                      (:nonprop-bg-size gmap)
                      (gen/return " "))])
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-repeat-style gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 2] 100)
                (gen/tuple
                  (:nonprop-attachment gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 3] 100)
                (gen/tuple
                  (:nonprop-box gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 4] 100)
                (gen/tuple
                  (:nonprop-box gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-final-bg-layer :cat 1 :plus :alt 5] 100)
                (gen/tuple
                  (:nonprop-background-color gmap)
                  (gen/return " "))]]))))
        gmap (assoc gmap :nonprop-final-bg-layer gen-nonprop-final-bg-layer)

        gen-prop-box-orient
        (gen/frequency [
          [(get weights [:prop-box-orient :alt 0] 100)
            (gen/tuple
              (gen/return "horizontal")
              (gen/return " "))]
          [(get weights [:prop-box-orient :alt 1] 100)
            (gen/tuple
              (gen/return "vertical")
              (gen/return " "))]
          [(get weights [:prop-box-orient :alt 2] 100)
            (gen/tuple
              (gen/return "inline-axis")
              (gen/return " "))]
          [(get weights [:prop-box-orient :alt 3] 100)
            (gen/tuple
              (gen/return "block-axis")
              (gen/return " "))]
          [(get weights [:prop-box-orient :alt 4] 100)
            (gen/tuple
              (gen/return "inherit")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-orient gen-prop-box-orient)

        gen-prop-margin-right
        (gen/frequency [
          [(get weights [:prop-margin-right :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-right :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]
          [(get weights [:prop-margin-right :alt 2] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-margin-right gen-prop-margin-right)

        gen-nonprop-outline-width
        (:prop-outline-width gmap)
        gmap (assoc gmap :nonprop-outline-width gen-nonprop-outline-width)

        gen-prop-outline
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:prop-outline :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-outline-color gmap)
                  (gen/return " "))]
              [(get weights [:prop-outline :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-outline-style gmap)
                  (gen/return " "))]
              [(get weights [:prop-outline :cat 0 :plus :alt 2] 100)
                (gen/tuple
                  (:nonprop-outline-width gmap)
                  (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-outline gen-prop-outline)

        gen-prop-text-rendering
        (gen/frequency [
          [(get weights [:prop-text-rendering :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-text-rendering :alt 1] 100)
            (gen/tuple
              (gen/return "optimizeSpeed")
              (gen/return " "))]
          [(get weights [:prop-text-rendering :alt 2] 100)
            (gen/tuple
              (gen/return "optimizeLegibility")
              (gen/return " "))]
          [(get weights [:prop-text-rendering :alt 3] 100)
            (gen/tuple
              (gen/return "geometricPrecision")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-rendering gen-prop-text-rendering)

        gen-nonprop-offset-distance
        (:prop-offset-distance gmap)
        gmap (assoc gmap :nonprop-offset-distance gen-nonprop-offset-distance)

        gen-prop--webkit-mask
        (gen/tuple
          (:nonprop-mask-image gmap)
          (gen/return " ")
          (gen/vector
            (gen/such-that not-empty (gen/vector
              (gen/frequency [
                [(get weights [:prop--webkit-mask :cat 2 :star :plus :alt 0] 100)
                  (gen/tuple
                    (:nonprop-mask-repeat gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask :cat 2 :star :plus :alt 1] 100)
                  (gen/tuple
                    (:nonprop-mask-attachment gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask :cat 2 :star :plus :alt 2] 100)
                  (gen/tuple
                    (:nonprop-mask-position gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask :cat 2 :star :plus :alt 3] 100)
                  (gen/tuple
                    (:nonprop-mask-origin gmap)
                    (gen/return " "))]
                [(get weights [:prop--webkit-mask :cat 2 :star :plus :alt 4] 100)
                  (gen/tuple
                    (:nonprop-mask-clip gmap)
                    (gen/return " "))]]))))
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-mask gen-prop--webkit-mask)

        gen-prop-border-block-start-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-start-color gen-prop-border-block-start-color)

        gen-prop-mask
        (gen/tuple
          (:nonprop-mask-layer gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-mask-layer gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask gen-prop-mask)

        gen-nonprop-name-repeat
        (gen/return "STUB_name_repeat")
        gmap (assoc gmap :nonprop-name-repeat gen-nonprop-name-repeat)

        gen-func-image
        (gen/tuple
          (gen/return "image(")
          (gen/return " ")
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (gen/frequency [
                [(get weights [:func-image :cat 2 :cat 0 :opt :alt 0] 100)
                  (gen/tuple
                    (:nonprop-image gmap)
                    (gen/return " "))]
                [(get weights [:func-image :cat 2 :cat 0 :opt :alt 1] 100)
                  (gen/tuple
                    (:nonprop-string gmap)
                    (gen/return " "))]])])
            (gen/return " ")
            (gen/return ",")
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              (:nonprop-color gmap)])
            (gen/return " "))
          (gen/return " ")
          (gen/return ")")
          (gen/return " "))
        gmap (assoc gmap :func-image gen-func-image)

        gen-prop-offset-block-start
        (gen/tuple
          (:nonprop-left gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-offset-block-start gen-prop-offset-block-start)

        gen-prop-mix-blend-mode
        (gen/tuple
          (:nonprop-blend-mode gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-mix-blend-mode gen-prop-mix-blend-mode)

        gen-prop-background-origin
        (gen/tuple
          (:nonprop-box gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-box gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-background-origin gen-prop-background-origin)

        gen-nonprop-general-enclosed
        (gen/frequency [
          [(get weights [:nonprop-general-enclosed :alt 0] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-function-token gmap)
                (gen/return " ")
                (:nonprop-any-value gmap)
                (gen/return " ")
                (gen/return ")")
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:nonprop-general-enclosed :alt 1] 100)
            (gen/tuple
              (gen/return "(")
              (gen/return " ")
              (:nonprop-ident gmap)
              (gen/return " ")
              (:nonprop-any-value gmap)
              (gen/return " ")
              (gen/return ")")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-general-enclosed gen-nonprop-general-enclosed)

        gen-prop-border-block-start-width
        (gen/tuple
          (:nonprop-border-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-start-width gen-prop-border-block-start-width)

        gen-nonprop-font-style
        (:prop-font-style gmap)
        gmap (assoc gmap :nonprop-font-style gen-nonprop-font-style)

        gen-prop--moz-outline-radius-bottomleft
        (gen/tuple
          (:nonprop-outline-radius gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--moz-outline-radius-bottomleft gen-prop--moz-outline-radius-bottomleft)

        gen-nonprop-display-box
        (gen/frequency [
          [(get weights [:nonprop-display-box :alt 0] 100)
            (gen/tuple
              (gen/return "contents")
              (gen/return " "))]
          [(get weights [:nonprop-display-box :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-display-box gen-nonprop-display-box)

        gen-prop-display
        (gen/frequency [
          [(get weights [:prop-display :alt 0] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-display :alt 0 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (:nonprop-display-outside gmap)
                      (gen/return " "))]
                  [(get weights [:prop-display :alt 0 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (:nonprop-display-inside gmap)
                      (gen/return " "))]])))
              (gen/return " "))]
          [(get weights [:prop-display :alt 1] 100)
            (gen/tuple
              (:nonprop-display-listitem gmap)
              (gen/return " "))]
          [(get weights [:prop-display :alt 2] 100)
            (gen/tuple
              (:nonprop-display-internal gmap)
              (gen/return " "))]
          [(get weights [:prop-display :alt 3] 100)
            (gen/tuple
              (:nonprop-display-box gmap)
              (gen/return " "))]
          [(get weights [:prop-display :alt 4] 100)
            (gen/tuple
              (:nonprop-display-legacy gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-display gen-prop-display)]
    gmap))

(defn- css3-generators-part-12 [gmap weights]
  (let [
        gen-prop-isolation
        (gen/frequency [
          [(get weights [:prop-isolation :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-isolation :alt 1] 100)
            (gen/tuple
              (gen/return "isolate")
              (gen/return " "))]])
        gmap (assoc gmap :prop-isolation gen-prop-isolation)

        gen-nonprop-content-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-string gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (gen/return "contents")
                  (gen/return " "))]
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 2] 100)
                (gen/tuple
                  (:nonprop-url gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 3] 100)
                (gen/tuple
                  (:nonprop-quote gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 4] 100)
                (gen/tuple
                  (:nonprop-target gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-content-list :cat 0 :plus :alt 5] 100)
                (gen/tuple
                  (:func-leader gmap)
                  (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :nonprop-content-list gen-nonprop-content-list)

        gen-prop-content
        (gen/tuple
          (gen/vector
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " ")
              (gen/return ",")
              (gen/return " ")))
          (gen/return " ")
          (gen/frequency [
            [(get weights [:prop-content :cat 2 :alt 0] 100)
              (gen/tuple
                (gen/return "normal")
                (gen/return " "))]
            [(get weights [:prop-content :cat 2 :alt 1] 100)
              (gen/tuple
                (gen/return "none")
                (gen/return " "))]
            [(get weights [:prop-content :cat 2 :alt 2] 100)
              (gen/tuple
                (:nonprop-content-list gmap)
                (gen/return " "))]])
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (:nonprop-string gmap)
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop-content gen-prop-content)

        gen-prop-text-align
        (gen/frequency [
          [(get weights [:prop-text-align :alt 0] 100)
            (gen/tuple
              (gen/return "start")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 1] 100)
            (gen/tuple
              (gen/return "end")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 2] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 3] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 4] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 5] 100)
            (gen/tuple
              (gen/return "justify")
              (gen/return " "))]
          [(get weights [:prop-text-align :alt 6] 100)
            (gen/tuple
              (gen/return "match-parent")
              (gen/return " "))]])
        gmap (assoc gmap :prop-text-align gen-prop-text-align)

        gen-prop-mask-type
        (gen/frequency [
          [(get weights [:prop-mask-type :alt 0] 100)
            (gen/tuple
              (gen/return "luminance")
              (gen/return " "))]
          [(get weights [:prop-mask-type :alt 1] 100)
            (gen/tuple
              (gen/return "alpha")
              (gen/return " "))]])
        gmap (assoc gmap :prop-mask-type gen-prop-mask-type)

        gen-prop-counter-increment
        (gen/frequency [
          [(get weights [:prop-counter-increment :alt 0] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/tuple
                  (:nonprop-custom-ident gmap)
                  (gen/return " ")
                  (gen/one-of [
                    (gen/return "")
                    (:nonprop-integer gmap)])
                  (gen/return " "))))
              (gen/return " "))]
          [(get weights [:prop-counter-increment :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-counter-increment gen-prop-counter-increment)

        gen-nonprop-line-name-list
        (gen/tuple
          (gen/such-that not-empty (gen/vector
            (gen/frequency [
              [(get weights [:nonprop-line-name-list :cat 0 :plus :alt 0] 100)
                (gen/tuple
                  (:nonprop-line-names gmap)
                  (gen/return " "))]
              [(get weights [:nonprop-line-name-list :cat 0 :plus :alt 1] 100)
                (gen/tuple
                  (:nonprop-name-repeat gmap)
                  (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :nonprop-line-name-list gen-nonprop-line-name-list)

        gen-prop-box-suppress
        (gen/frequency [
          [(get weights [:prop-box-suppress :alt 0] 100)
            (gen/tuple
              (gen/return "show")
              (gen/return " "))]
          [(get weights [:prop-box-suppress :alt 1] 100)
            (gen/tuple
              (gen/return "discard")
              (gen/return " "))]
          [(get weights [:prop-box-suppress :alt 2] 100)
            (gen/tuple
              (gen/return "hide")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-suppress gen-prop-box-suppress)

        gen-prop-contain
        (gen/frequency [
          [(get weights [:prop-contain :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-contain :alt 1] 100)
            (gen/tuple
              (gen/return "strict")
              (gen/return " "))]
          [(get weights [:prop-contain :alt 2] 100)
            (gen/tuple
              (gen/return "content")
              (gen/return " "))]
          [(get weights [:prop-contain :alt 3] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/frequency [
                  [(get weights [:prop-contain :alt 3 :cat 0 :plus :alt 0] 100)
                    (gen/tuple
                      (gen/return "size")
                      (gen/return " "))]
                  [(get weights [:prop-contain :alt 3 :cat 0 :plus :alt 1] 100)
                    (gen/tuple
                      (gen/return "layout")
                      (gen/return " "))]
                  [(get weights [:prop-contain :alt 3 :cat 0 :plus :alt 2] 100)
                    (gen/tuple
                      (gen/return "style")
                      (gen/return " "))]
                  [(get weights [:prop-contain :alt 3 :cat 0 :plus :alt 3] 100)
                    (gen/tuple
                      (gen/return "paint")
                      (gen/return " "))]])))
              (gen/return " "))]])
        gmap (assoc gmap :prop-contain gen-prop-contain)

        gen-prop-color
        (gen/tuple
          (:nonprop-color gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-color gen-prop-color)

        gen-prop-box-flex-group
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-box-flex-group gen-prop-box-flex-group)

        gen-prop--moz-image-region
        (gen/frequency [
          [(get weights [:prop--moz-image-region :alt 0] 100)
            (gen/tuple
              (:nonprop-shape gmap)
              (gen/return " "))]
          [(get weights [:prop--moz-image-region :alt 1] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop--moz-image-region gen-prop--moz-image-region)

        gen-prop-font-variation-settings
        (gen/frequency [
          [(get weights [:prop-font-variation-settings :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variation-settings :alt 1] 100)
            (gen/tuple
              (gen/tuple
                (:nonprop-string gmap)
                (gen/return " ")
                (:nonprop-number gmap)
                (gen/return " "))
              (gen/vector
                (gen/tuple
                  (gen/return ", ")
                  (gen/tuple
                    (:nonprop-string gmap)
                    (gen/return " ")
                    (:nonprop-number gmap)
                    (gen/return " "))))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variation-settings gen-prop-font-variation-settings)

        gen-prop-quotes
        (gen/frequency [
          [(get weights [:prop-quotes :alt 0] 100)
            (gen/tuple
              (gen/such-that not-empty (gen/vector
                (gen/tuple
                  (:nonprop-string gmap)
                  (gen/return " ")
                  (:nonprop-string gmap)
                  (gen/return " "))))
              (gen/return " "))]
          [(get weights [:prop-quotes :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]])
        gmap (assoc gmap :prop-quotes gen-prop-quotes)

        gen-prop-unicode-bidi
        (gen/frequency [
          [(get weights [:prop-unicode-bidi :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-unicode-bidi :alt 1] 100)
            (gen/tuple
              (gen/return "embed")
              (gen/return " "))]
          [(get weights [:prop-unicode-bidi :alt 2] 100)
            (gen/tuple
              (gen/return "isolate")
              (gen/return " "))]
          [(get weights [:prop-unicode-bidi :alt 3] 100)
            (gen/tuple
              (gen/return "bidi-override")
              (gen/return " "))]
          [(get weights [:prop-unicode-bidi :alt 4] 100)
            (gen/tuple
              (gen/return "isolate-override")
              (gen/return " "))]
          [(get weights [:prop-unicode-bidi :alt 5] 100)
            (gen/tuple
              (gen/return "plaintext")
              (gen/return " "))]])
        gmap (assoc gmap :prop-unicode-bidi gen-prop-unicode-bidi)

        gen-prop-grid-auto-flow
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-grid-auto-flow :plus :alt 0] 100)
              (gen/tuple
                (gen/frequency [
                  [(get weights [:prop-grid-auto-flow :plus :alt 0 :cat 0 :alt 0] 100)
                    (gen/tuple
                      (gen/return "row")
                      (gen/return " "))]
                  [(get weights [:prop-grid-auto-flow :plus :alt 0 :cat 0 :alt 1] 100)
                    (gen/tuple
                      (gen/return "column")
                      (gen/return " "))]])
                (gen/return " "))]
            [(get weights [:prop-grid-auto-flow :plus :alt 1] 100)
              (gen/tuple
                (gen/return "dense")
                (gen/return " "))]])))
        gmap (assoc gmap :prop-grid-auto-flow gen-prop-grid-auto-flow)

        gen-prop-box-flex
        (gen/tuple
          (:nonprop-number gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-box-flex gen-prop-box-flex)

        gen-prop-border-bottom-left-radius
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-border-bottom-left-radius :cat 0 :alt 0] 100)
              (:nonprop-length-percentage gmap)]
            [(get weights [:prop-border-bottom-left-radius :cat 0 :alt 1] 100)
              (gen/tuple
                (:nonprop-length-percentage gmap)
                (:nonprop-length-percentage gmap))]])
          (gen/return " "))
        gmap (assoc gmap :prop-border-bottom-left-radius gen-prop-border-bottom-left-radius)

        gen-prop-border-block-end-width
        (gen/tuple
          (:nonprop-border-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-border-block-end-width gen-prop-border-block-end-width)

        gen-nonprop-generic-name
        (gen/frequency [
          [(get weights [:nonprop-generic-name :alt 0] 100)
            (gen/tuple
              (gen/return "serif")
              (gen/return " "))]
          [(get weights [:nonprop-generic-name :alt 1] 100)
            (gen/tuple
              (gen/return "sans-serif")
              (gen/return " "))]
          [(get weights [:nonprop-generic-name :alt 2] 100)
            (gen/tuple
              (gen/return "cursive")
              (gen/return " "))]
          [(get weights [:nonprop-generic-name :alt 3] 100)
            (gen/tuple
              (gen/return "fantasy")
              (gen/return " "))]
          [(get weights [:nonprop-generic-name :alt 4] 100)
            (gen/tuple
              (gen/return "monospace")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-generic-name gen-nonprop-generic-name)

        gen-prop-background
        (gen/tuple
          (gen/vector
            (gen/tuple
              (:nonprop-bg-layer gmap)
              (gen/return " ")
              (gen/return ",")
              (gen/return " ")))
          (gen/return " ")
          (:nonprop-final-bg-layer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-background gen-prop-background)

        gen-prop-z-index
        (gen/frequency [
          [(get weights [:prop-z-index :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-z-index :alt 1] 100)
            (gen/tuple
              (:nonprop-integer gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-z-index gen-prop-z-index)

        gen-prop-height
        (gen/frequency [
          [(get weights [:prop-height :alt 0] 100)
            (gen/tuple
              (gen/frequency [
                [(get weights [:prop-height :alt 0 :cat 0 :alt 0] 100)
                  (gen/tuple
                    (:nonprop-length gmap)
                    (gen/return " "))]
                [(get weights [:prop-height :alt 0 :cat 0 :alt 1] 100)
                  (gen/tuple
                    (:nonprop-percentage gmap)
                    (gen/return " "))]])
              (gen/return " ")
              (gen/one-of [
                (gen/return "")
                (gen/frequency [
                  [(get weights [:prop-height :alt 0 :cat 2 :opt :alt 0] 100)
                    (gen/tuple
                      (gen/return "border-box")
                      (gen/return " "))]
                  [(get weights [:prop-height :alt 0 :cat 2 :opt :alt 1] 100)
                    (gen/tuple
                      (gen/return "content-box")
                      (gen/return " "))]])])
              (gen/return " "))]
          [(get weights [:prop-height :alt 1] 100)
            (gen/tuple
              (gen/return "available")
              (gen/return " "))]
          [(get weights [:prop-height :alt 2] 100)
            (gen/tuple
              (gen/return "min-content")
              (gen/return " "))]
          [(get weights [:prop-height :alt 3] 100)
            (gen/tuple
              (gen/return "max-content")
              (gen/return " "))]
          [(get weights [:prop-height :alt 4] 100)
            (gen/tuple
              (gen/return "fit-content")
              (gen/return " "))]
          [(get weights [:prop-height :alt 5] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]])
        gmap (assoc gmap :prop-height gen-prop-height)

        gen-prop-background-position-y
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-background-position-y :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [(get weights [:prop-background-position-y :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/one-of [
                  (gen/return "")
                  (gen/frequency [
                    [(get weights [:prop-background-position-y :cat 0 :alt 1 :cat 0 :opt :alt 0] 100)
                      (gen/tuple
                        (gen/return "top")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-y :cat 0 :alt 1 :cat 0 :opt :alt 1] 100)
                      (gen/tuple
                        (gen/return "bottom")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-y :cat 0 :alt 1 :cat 0 :opt :alt 2] 100)
                      (gen/tuple
                        (gen/return "y-start")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-y :cat 0 :alt 1 :cat 0 :opt :alt 3] 100)
                      (gen/tuple
                        (gen/return "y-end")
                        (gen/return " "))]])])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-length-percentage gmap)])
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (gen/return "center")
                    (gen/return " "))]
                [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/one-of [
                      (gen/return "")
                      (gen/frequency [
                        [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 0] 100)
                          (gen/tuple
                            (gen/return "top")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 1] 100)
                          (gen/tuple
                            (gen/return "bottom")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 2] 100)
                          (gen/tuple
                            (gen/return "y-start")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-y :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 3] 100)
                          (gen/tuple
                            (gen/return "y-end")
                            (gen/return " "))]])])
                    (gen/return " ")
                    (gen/one-of [
                      (gen/return "")
                      (:nonprop-length-percentage gmap)])
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-background-position-y gen-prop-background-position-y)

        gen-prop-font-variant
        (gen/frequency [
          [(get weights [:prop-font-variant :alt 0] 100)
            (gen/tuple
              (gen/return "normal")
              (gen/return " "))]
          [(get weights [:prop-font-variant :alt 1] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-font-variant :alt 2] 100)
            (gen/tuple
              (gen/tuple
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 0 :plus :alt 0] 100)
                      (gen/tuple
                        (:nonprop-common-lig-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 0 :plus :alt 1] 100)
                      (gen/tuple
                        (:nonprop-discretionary-lig-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 0 :plus :alt 2] 100)
                      (gen/tuple
                        (:nonprop-historical-lig-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 0 :plus :alt 3] 100)
                      (gen/tuple
                        (:nonprop-contextual-alt-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 0 :plus :alt 4] 100)
                      (gen/tuple
                        (gen/return "stylistic(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 3 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 3 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "historical-forms")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 3 :plus :alt 2] 100)
                      (gen/tuple
                        (gen/return "styleset(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/vector
                  (gen/tuple
                    (gen/return ", ")
                    (:nonprop-feature-value-name gmap)))
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 7 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 7 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "character-variant(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/vector
                  (gen/tuple
                    (gen/return ", ")
                    (:nonprop-feature-value-name gmap)))
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 11 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 11 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "swash(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 14 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 14 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "ornaments(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 17 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 17 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/return "annotation(")
                        (gen/return " "))]])))
                (:nonprop-feature-value-name gmap)
                (gen/return " ")
                (gen/such-that not-empty (gen/vector
                  (gen/frequency [
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 0] 100)
                      (gen/tuple
                        (gen/return ")")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1] 100)
                      (gen/tuple
                        (gen/frequency [
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 0] 100)
                            (gen/tuple
                              (gen/return "small-caps")
                              (gen/return " "))]
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 1] 100)
                            (gen/tuple
                              (gen/return "all-small-caps")
                              (gen/return " "))]
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 2] 100)
                            (gen/tuple
                              (gen/return "petite-caps")
                              (gen/return " "))]
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 3] 100)
                            (gen/tuple
                              (gen/return "all-petite-caps")
                              (gen/return " "))]
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 4] 100)
                            (gen/tuple
                              (gen/return "unicase")
                              (gen/return " "))]
                          [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 1 :cat 0 :alt 5] 100)
                            (gen/tuple
                              (gen/return "titling-caps")
                              (gen/return " "))]])
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 2] 100)
                      (gen/tuple
                        (:nonprop-numeric-figure-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 3] 100)
                      (gen/tuple
                        (:nonprop-numeric-spacing-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 4] 100)
                      (gen/tuple
                        (:nonprop-numeric-fraction-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 5] 100)
                      (gen/tuple
                        (gen/return "ordinal")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 6] 100)
                      (gen/tuple
                        (gen/return "slashed-zero")
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 7] 100)
                      (gen/tuple
                        (:nonprop-east-asian-variant-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 8] 100)
                      (gen/tuple
                        (:nonprop-east-asian-width-values gmap)
                        (gen/return " "))]
                    [(get weights [:prop-font-variant :alt 2 :cat 0 :cat 20 :plus :alt 9] 100)
                      (gen/tuple
                        (gen/return "ruby")
                        (gen/return " "))]]))))
              (gen/return " "))]])
        gmap (assoc gmap :prop-font-variant gen-prop-font-variant)

        gen-prop-mask-composite
        (gen/tuple
          (:nonprop-compositing-operator gmap)
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (:nonprop-compositing-operator gmap)))
          (gen/return " "))
        gmap (assoc gmap :prop-mask-composite gen-prop-mask-composite)

        gen-prop-justify-content
        (gen/frequency [
          [(get weights [:prop-justify-content :alt 0] 100)
            (gen/tuple
              (gen/return "flex-start")
              (gen/return " "))]
          [(get weights [:prop-justify-content :alt 1] 100)
            (gen/tuple
              (gen/return "flex-end")
              (gen/return " "))]
          [(get weights [:prop-justify-content :alt 2] 100)
            (gen/tuple
              (gen/return "center")
              (gen/return " "))]
          [(get weights [:prop-justify-content :alt 3] 100)
            (gen/tuple
              (gen/return "space-between")
              (gen/return " "))]
          [(get weights [:prop-justify-content :alt 4] 100)
            (gen/tuple
              (gen/return "space-around")
              (gen/return " "))]
          [(get weights [:prop-justify-content :alt 5] 100)
            (gen/tuple
              (gen/return "space-evenly")
              (gen/return " "))]])
        gmap (assoc gmap :prop-justify-content gen-prop-justify-content)

        gen-nonprop-font-variant-css21
        (gen/tuple
          (gen/frequency [
            [(get weights [:nonprop-font-variant-css21 :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "normal")
                (gen/return " "))]
            [(get weights [:nonprop-font-variant-css21 :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/return "small-caps")
                (gen/return " "))]])
          (gen/return " "))
        gmap (assoc gmap :nonprop-font-variant-css21 gen-nonprop-font-variant-css21)

        gen-prop-font
        (gen/frequency [
          [(get weights [:prop-font :alt 0] 100)
            (gen/tuple
              (gen/tuple
                (gen/one-of [
                  (gen/return "")
                  (gen/such-that not-empty (gen/vector
                    (gen/frequency [
                      [(get weights [:prop-font :alt 0 :cat 0 :cat 0 :opt :plus :alt 0] 100)
                        (gen/tuple
                          (:nonprop-font-style gmap)
                          (gen/return " "))]
                      [(get weights [:prop-font :alt 0 :cat 0 :cat 0 :opt :plus :alt 1] 100)
                        (gen/tuple
                          (:nonprop-font-variant-css21 gmap)
                          (gen/return " "))]
                      [(get weights [:prop-font :alt 0 :cat 0 :cat 0 :opt :plus :alt 2] 100)
                        (gen/tuple
                          (:nonprop-font-weight gmap)
                          (gen/return " "))]
                      [(get weights [:prop-font :alt 0 :cat 0 :cat 0 :opt :plus :alt 3] 100)
                        (gen/tuple
                          (:nonprop-font-stretch gmap)
                          (gen/return " "))]])))])
                (gen/return " ")
                (:nonprop-font-size gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/tuple
                    (gen/return "/")
                    (gen/return " ")
                    (:nonprop-line-height gmap)
                    (gen/return " "))])
                (gen/return " ")
                (:nonprop-font-family gmap)
                (gen/return " "))
              (gen/return " "))]
          [(get weights [:prop-font :alt 1] 100)
            (gen/tuple
              (gen/return "caption")
              (gen/return " "))]
          [(get weights [:prop-font :alt 2] 100)
            (gen/tuple
              (gen/return "icon")
              (gen/return " "))]
          [(get weights [:prop-font :alt 3] 100)
            (gen/tuple
              (gen/return "menu")
              (gen/return " "))]
          [(get weights [:prop-font :alt 4] 100)
            (gen/tuple
              (gen/return "message-box")
              (gen/return " "))]
          [(get weights [:prop-font :alt 5] 100)
            (gen/tuple
              (gen/return "small-caption")
              (gen/return " "))]
          [(get weights [:prop-font :alt 6] 100)
            (gen/tuple
              (gen/return "status-bar")
              (gen/return " "))]])
        gmap (assoc gmap :prop-font gen-prop-font)

        gen-prop-box-ordinal-group
        (gen/tuple
          (:nonprop-integer gmap)
          (gen/return " "))
        gmap (assoc gmap :prop-box-ordinal-group gen-prop-box-ordinal-group)

        gen-prop--webkit-border-before-width
        (gen/tuple
          (:nonprop-border-width gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--webkit-border-before-width gen-prop--webkit-border-before-width)

        gen-prop-empty-cells
        (gen/frequency [
          [(get weights [:prop-empty-cells :alt 0] 100)
            (gen/tuple
              (gen/return "show")
              (gen/return " "))]
          [(get weights [:prop-empty-cells :alt 1] 100)
            (gen/tuple
              (gen/return "hide")
              (gen/return " "))]])
        gmap (assoc gmap :prop-empty-cells gen-prop-empty-cells)

        gen-prop-box-decoration-break
        (gen/frequency [
          [(get weights [:prop-box-decoration-break :alt 0] 100)
            (gen/tuple
              (gen/return "slice")
              (gen/return " "))]
          [(get weights [:prop-box-decoration-break :alt 1] 100)
            (gen/tuple
              (gen/return "clone")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-decoration-break gen-prop-box-decoration-break)

        gen-prop-offset
        (gen/tuple
          (gen/tuple
            (gen/one-of [
              (gen/return "")
              (:nonprop-offset-position gmap)])
            (gen/return " ")
            (gen/one-of [
              (gen/return "")
              (gen/tuple
                (:nonprop-offset-path gmap)
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (gen/such-that not-empty (gen/vector
                    (gen/frequency [
                      [(get weights [:prop-offset :cat 0 :cat 2 :opt :cat 2 :opt :plus :alt 0] 100)
                        (gen/tuple
                          (:nonprop-offset-distance gmap)
                          (gen/return " "))]
                      [(get weights [:prop-offset :cat 0 :cat 2 :opt :cat 2 :opt :plus :alt 1] 100)
                        (gen/tuple
                          (:nonprop-offset-rotate gmap)
                          (gen/return " "))]])))])
                (gen/return " "))])
            (gen/return " "))
          (gen/return " ")
          (gen/one-of [
            (gen/return "")
            (gen/tuple
              (gen/return "/")
              (gen/return " ")
              (:nonprop-offset-anchor gmap)
              (gen/return " "))])
          (gen/return " "))
        gmap (assoc gmap :prop-offset gen-prop-offset)

        gen-prop-column-span
        (gen/frequency [
          [(get weights [:prop-column-span :alt 0] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-column-span :alt 1] 100)
            (gen/tuple
              (gen/return "all")
              (gen/return " "))]])
        gmap (assoc gmap :prop-column-span gen-prop-column-span)

        gen-prop--moz-outline-radius-topright
        (gen/tuple
          (:nonprop-outline-radius gmap)
          (gen/return " "))
        gmap (assoc gmap :prop--moz-outline-radius-topright gen-prop--moz-outline-radius-topright)

        gen-prop-background-position-x
        (gen/tuple
          (gen/frequency [
            [(get weights [:prop-background-position-x :cat 0 :alt 0] 100)
              (gen/tuple
                (gen/return "center")
                (gen/return " "))]
            [(get weights [:prop-background-position-x :cat 0 :alt 1] 100)
              (gen/tuple
                (gen/one-of [
                  (gen/return "")
                  (gen/frequency [
                    [(get weights [:prop-background-position-x :cat 0 :alt 1 :cat 0 :opt :alt 0] 100)
                      (gen/tuple
                        (gen/return "left")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-x :cat 0 :alt 1 :cat 0 :opt :alt 1] 100)
                      (gen/tuple
                        (gen/return "right")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-x :cat 0 :alt 1 :cat 0 :opt :alt 2] 100)
                      (gen/tuple
                        (gen/return "x-start")
                        (gen/return " "))]
                    [(get weights [:prop-background-position-x :cat 0 :alt 1 :cat 0 :opt :alt 3] 100)
                      (gen/tuple
                        (gen/return "x-end")
                        (gen/return " "))]])])
                (gen/return " ")
                (gen/one-of [
                  (gen/return "")
                  (:nonprop-length-percentage gmap)])
                (gen/return " "))]])
          (gen/vector
            (gen/tuple
              (gen/return ", ")
              (gen/frequency [
                [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 0] 100)
                  (gen/tuple
                    (gen/return "center")
                    (gen/return " "))]
                [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 1] 100)
                  (gen/tuple
                    (gen/one-of [
                      (gen/return "")
                      (gen/frequency [
                        [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 0] 100)
                          (gen/tuple
                            (gen/return "left")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 1] 100)
                          (gen/tuple
                            (gen/return "right")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 2] 100)
                          (gen/tuple
                            (gen/return "x-start")
                            (gen/return " "))]
                        [(get weights [:prop-background-position-x :cat 1 :star :cat 1 :alt 1 :cat 0 :opt :alt 3] 100)
                          (gen/tuple
                            (gen/return "x-end")
                            (gen/return " "))]])])
                    (gen/return " ")
                    (gen/one-of [
                      (gen/return "")
                      (:nonprop-length-percentage gmap)])
                    (gen/return " "))]])))
          (gen/return " "))
        gmap (assoc gmap :prop-background-position-x gen-prop-background-position-x)

        gen-prop-padding-right
        (gen/frequency [
          [(get weights [:prop-padding-right :alt 0] 100)
            (gen/tuple
              (:nonprop-length gmap)
              (gen/return " "))]
          [(get weights [:prop-padding-right :alt 1] 100)
            (gen/tuple
              (:nonprop-percentage gmap)
              (gen/return " "))]])
        gmap (assoc gmap :prop-padding-right gen-prop-padding-right)

        gen-prop-break-after
        (gen/frequency [
          [(get weights [:prop-break-after :alt 0] 100)
            (gen/tuple
              (gen/return "auto")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 1] 100)
            (gen/tuple
              (gen/return "avoid")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 2] 100)
            (gen/tuple
              (gen/return "avoid-page")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 3] 100)
            (gen/tuple
              (gen/return "page")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 4] 100)
            (gen/tuple
              (gen/return "left")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 5] 100)
            (gen/tuple
              (gen/return "right")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 6] 100)
            (gen/tuple
              (gen/return "recto")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 7] 100)
            (gen/tuple
              (gen/return "verso")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 8] 100)
            (gen/tuple
              (gen/return "avoid-column")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 9] 100)
            (gen/tuple
              (gen/return "column")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 10] 100)
            (gen/tuple
              (gen/return "avoid-region")
              (gen/return " "))]
          [(get weights [:prop-break-after :alt 11] 100)
            (gen/tuple
              (gen/return "region")
              (gen/return " "))]])
        gmap (assoc gmap :prop-break-after gen-prop-break-after)

        gen-prop-text-emphasis
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-text-emphasis :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-text-emphasis-style gmap)
                (gen/return " "))]
            [(get weights [:prop-text-emphasis :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-text-emphasis-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-text-emphasis gen-prop-text-emphasis)

        gen-prop-box-sizing
        (gen/frequency [
          [(get weights [:prop-box-sizing :alt 0] 100)
            (gen/tuple
              (gen/return "content-box")
              (gen/return " "))]
          [(get weights [:prop-box-sizing :alt 1] 100)
            (gen/tuple
              (gen/return "border-box")
              (gen/return " "))]])
        gmap (assoc gmap :prop-box-sizing gen-prop-box-sizing)

        gen-prop-border-left
        (gen/such-that not-empty (gen/vector
          (gen/frequency [
            [(get weights [:prop-border-left :plus :alt 0] 100)
              (gen/tuple
                (:nonprop-br-width gmap)
                (gen/return " "))]
            [(get weights [:prop-border-left :plus :alt 1] 100)
              (gen/tuple
                (:nonprop-br-style gmap)
                (gen/return " "))]
            [(get weights [:prop-border-left :plus :alt 2] 100)
              (gen/tuple
                (:nonprop-color gmap)
                (gen/return " "))]])))
        gmap (assoc gmap :prop-border-left gen-prop-border-left)

        gen-prop-object-fit
        (gen/frequency [
          [(get weights [:prop-object-fit :alt 0] 100)
            (gen/tuple
              (gen/return "fill")
              (gen/return " "))]
          [(get weights [:prop-object-fit :alt 1] 100)
            (gen/tuple
              (gen/return "contain")
              (gen/return " "))]
          [(get weights [:prop-object-fit :alt 2] 100)
            (gen/tuple
              (gen/return "cover")
              (gen/return " "))]
          [(get weights [:prop-object-fit :alt 3] 100)
            (gen/tuple
              (gen/return "none")
              (gen/return " "))]
          [(get weights [:prop-object-fit :alt 4] 100)
            (gen/tuple
              (gen/return "scale-down")
              (gen/return " "))]])
        gmap (assoc gmap :prop-object-fit gen-prop-object-fit)

        gen-css-assignment
        (gen/frequency [
          [(get weights [:css-assignment :alt 0] 100)
            (gen/tuple
              (gen/return "margin-block-end: ")
              (:prop-margin-block-end gmap))]
          [(get weights [:css-assignment :alt 1] 100)
            (gen/tuple
              (gen/return "-webkit-text-stroke-width: ")
              (:prop--webkit-text-stroke-width gmap))]
          [(get weights [:css-assignment :alt 2] 100)
            (gen/tuple
              (gen/return "transition-property: ")
              (:prop-transition-property gmap))]
          [(get weights [:css-assignment :alt 3] 100)
            (gen/tuple
              (gen/return "word-break: ")
              (:prop-word-break gmap))]
          [(get weights [:css-assignment :alt 4] 100)
            (gen/tuple
              (gen/return "background-origin: ")
              (:prop-background-origin gmap))]
          [(get weights [:css-assignment :alt 5] 100)
            (gen/tuple
              (gen/return "border-bottom-color: ")
              (:prop-border-bottom-color gmap))]
          [(get weights [:css-assignment :alt 6] 100)
            (gen/tuple
              (gen/return "-webkit-mask-attachment: ")
              (:prop--webkit-mask-attachment gmap))]
          [(get weights [:css-assignment :alt 7] 100)
            (gen/tuple
              (gen/return "-moz-user-focus: ")
              (:prop--moz-user-focus gmap))]
          [(get weights [:css-assignment :alt 8] 100)
            (gen/tuple
              (gen/return "margin-block-start: ")
              (:prop-margin-block-start gmap))]
          [(get weights [:css-assignment :alt 9] 100)
            (gen/tuple
              (gen/return "initial-letter: ")
              (:prop-initial-letter gmap))]
          [(get weights [:css-assignment :alt 10] 100)
            (gen/tuple
              (gen/return "border-block-end: ")
              (:prop-border-block-end gmap))]
          [(get weights [:css-assignment :alt 11] 100)
            (gen/tuple
              (gen/return "-webkit-mask: ")
              (:prop--webkit-mask gmap))]
          [(get weights [:css-assignment :alt 12] 100)
            (gen/tuple
              (gen/return "outline-color: ")
              (:prop-outline-color gmap))]
          [(get weights [:css-assignment :alt 13] 100)
            (gen/tuple
              (gen/return "border-block-start: ")
              (:prop-border-block-start gmap))]
          [(get weights [:css-assignment :alt 14] 100)
            (gen/tuple
              (gen/return "ruby-position: ")
              (:prop-ruby-position gmap))]
          [(get weights [:css-assignment :alt 15] 100)
            (gen/tuple
              (gen/return "border-block-start-width: ")
              (:prop-border-block-start-width gmap))]
          [(get weights [:css-assignment :alt 16] 100)
            (gen/tuple
              (gen/return "background: ")
              (:prop-background gmap))]
          [(get weights [:css-assignment :alt 17] 100)
            (gen/tuple
              (gen/return "box-orient: ")
              (:prop-box-orient gmap))]
          [(get weights [:css-assignment :alt 18] 100)
            (gen/tuple
              (gen/return "padding-top: ")
              (:prop-padding-top gmap))]
          [(get weights [:css-assignment :alt 19] 100)
            (gen/tuple
              (gen/return "align-items: ")
              (:prop-align-items gmap))]
          [(get weights [:css-assignment :alt 20] 100)
            (gen/tuple
              (gen/return "text-shadow: ")
              (:prop-text-shadow gmap))]
          [(get weights [:css-assignment :alt 21] 100)
            (gen/tuple
              (gen/return "box-lines: ")
              (:prop-box-lines gmap))]
          [(get weights [:css-assignment :alt 22] 100)
            (gen/tuple
              (gen/return "list-style-image: ")
              (:prop-list-style-image gmap))]
          [(get weights [:css-assignment :alt 23] 100)
            (gen/tuple
              (gen/return "page-break-inside: ")
              (:prop-page-break-inside gmap))]
          [(get weights [:css-assignment :alt 24] 100)
            (gen/tuple
              (gen/return "columns: ")
              (:prop-columns gmap))]
          [(get weights [:css-assignment :alt 25] 100)
            (gen/tuple
              (gen/return "text-emphasis-position: ")
              (:prop-text-emphasis-position gmap))]
          [(get weights [:css-assignment :alt 26] 100)
            (gen/tuple
              (gen/return "text-align-last: ")
              (:prop-text-align-last gmap))]
          [(get weights [:css-assignment :alt 27] 100)
            (gen/tuple
              (gen/return "border-inline-end-style: ")
              (:prop-border-inline-end-style gmap))]
          [(get weights [:css-assignment :alt 28] 100)
            (gen/tuple
              (gen/return "box-pack: ")
              (:prop-box-pack gmap))]
          [(get weights [:css-assignment :alt 29] 100)
            (gen/tuple
              (gen/return "min-height: ")
              (:prop-min-height gmap))]
          [(get weights [:css-assignment :alt 30] 100)
            (gen/tuple
              (gen/return "scroll-behavior: ")
              (:prop-scroll-behavior gmap))]
          [(get weights [:css-assignment :alt 31] 100)
            (gen/tuple
              (gen/return "-moz-outline-radius-topright: ")
              (:prop--moz-outline-radius-topright gmap))]
          [(get weights [:css-assignment :alt 32] 100)
            (gen/tuple
              (gen/return "box-flex-group: ")
              (:prop-box-flex-group gmap))]
          [(get weights [:css-assignment :alt 33] 100)
            (gen/tuple
              (gen/return "grid-row-end: ")
              (:prop-grid-row-end gmap))]
          [(get weights [:css-assignment :alt 34] 100)
            (gen/tuple
              (gen/return "-moz-border-left-colors: ")
              (:prop--moz-border-left-colors gmap))]
          [(get weights [:css-assignment :alt 35] 100)
            (gen/tuple
              (gen/return "border-radius: ")
              (:prop-border-radius gmap))]
          [(get weights [:css-assignment :alt 36] 100)
            (gen/tuple
              (gen/return "background-position: ")
              (:prop-background-position gmap))]
          [(get weights [:css-assignment :alt 37] 100)
            (gen/tuple
              (gen/return "-webkit-text-fill-color: ")
              (:prop--webkit-text-fill-color gmap))]
          [(get weights [:css-assignment :alt 38] 100)
            (gen/tuple
              (gen/return "transition-timing-function: ")
              (:prop-transition-timing-function gmap))]
          [(get weights [:css-assignment :alt 39] 100)
            (gen/tuple
              (gen/return "animation-iteration-count: ")
              (:prop-animation-iteration-count gmap))]
          [(get weights [:css-assignment :alt 40] 100)
            (gen/tuple
              (gen/return "box-direction: ")
              (:prop-box-direction gmap))]
          [(get weights [:css-assignment :alt 41] 100)
            (gen/tuple
              (gen/return "box-sizing: ")
              (:prop-box-sizing gmap))]
          [(get weights [:css-assignment :alt 42] 100)
            (gen/tuple
              (gen/return "padding-bottom: ")
              (:prop-padding-bottom gmap))]
          [(get weights [:css-assignment :alt 43] 100)
            (gen/tuple
              (gen/return "border-inline-start-width: ")
              (:prop-border-inline-start-width gmap))]
          [(get weights [:css-assignment :alt 44] 100)
            (gen/tuple
              (gen/return "border-right-width: ")
              (:prop-border-right-width gmap))]
          [(get weights [:css-assignment :alt 45] 100)
            (gen/tuple
              (gen/return "border-bottom-width: ")
              (:prop-border-bottom-width gmap))]
          [(get weights [:css-assignment :alt 46] 100)
            (gen/tuple
              (gen/return "-webkit-tap-highlight-color: ")
              (:prop--webkit-tap-highlight-color gmap))]
          [(get weights [:css-assignment :alt 47] 100)
            (gen/tuple
              (gen/return "padding-left: ")
              (:prop-padding-left gmap))]
          [(get weights [:css-assignment :alt 48] 100)
            (gen/tuple
              (gen/return "grid-row: ")
              (:prop-grid-row gmap))]
          [(get weights [:css-assignment :alt 49] 100)
            (gen/tuple
              (gen/return "text-decoration: ")
              (:prop-text-decoration gmap))]
          [(get weights [:css-assignment :alt 50] 100)
            (gen/tuple
              (gen/return "word-spacing: ")
              (:prop-word-spacing gmap))]
          [(get weights [:css-assignment :alt 51] 100)
            (gen/tuple
              (gen/return "border-inline-start-style: ")
              (:prop-border-inline-start-style gmap))]
          [(get weights [:css-assignment :alt 52] 100)
            (gen/tuple
              (gen/return "marker-offset: ")
              (:prop-marker-offset gmap))]
          [(get weights [:css-assignment :alt 53] 100)
            (gen/tuple
              (gen/return "-moz-force-broken-image-icon: ")
              (:prop--moz-force-broken-image-icon gmap))]
          [(get weights [:css-assignment :alt 54] 100)
            (gen/tuple
              (gen/return "display-list: ")
              (:prop-display-list gmap))]
          [(get weights [:css-assignment :alt 55] 100)
            (gen/tuple
              (gen/return "backface-visibility: ")
              (:prop-backface-visibility gmap))]
          [(get weights [:css-assignment :alt 56] 100)
            (gen/tuple
              (gen/return "padding: ")
              (:prop-padding gmap))]
          [(get weights [:css-assignment :alt 57] 100)
            (gen/tuple
              (gen/return "-webkit-touch-callout: ")
              (:prop--webkit-touch-callout gmap))]
          [(get weights [:css-assignment :alt 58] 100)
            (gen/tuple
              (gen/return "offset-anchor: ")
              (:prop-offset-anchor gmap))]
          [(get weights [:css-assignment :alt 59] 100)
            (gen/tuple
              (gen/return "font-stretch: ")
              (:prop-font-stretch gmap))]
          [(get weights [:css-assignment :alt 60] 100)
            (gen/tuple
              (gen/return "grid-auto-flow: ")
              (:prop-grid-auto-flow gmap))]
          [(get weights [:css-assignment :alt 61] 100)
            (gen/tuple
              (gen/return "border-left-style: ")
              (:prop-border-left-style gmap))]
          [(get weights [:css-assignment :alt 62] 100)
            (gen/tuple
              (gen/return "-moz-stack-sizing: ")
              (:prop--moz-stack-sizing gmap))]
          [(get weights [:css-assignment :alt 63] 100)
            (gen/tuple
              (gen/return "margin-inline-start: ")
              (:prop-margin-inline-start gmap))]
          [(get weights [:css-assignment :alt 64] 100)
            (gen/tuple
              (gen/return "-webkit-border-before-style: ")
              (:prop--webkit-border-before-style gmap))]
          [(get weights [:css-assignment :alt 65] 100)
            (gen/tuple
              (gen/return "list-style-type: ")
              (:prop-list-style-type gmap))]
          [(get weights [:css-assignment :alt 66] 100)
            (gen/tuple
              (gen/return "break-after: ")
              (:prop-break-after gmap))]
          [(get weights [:css-assignment :alt 67] 100)
            (gen/tuple
              (gen/return "backdrop-filter: ")
              (:prop-backdrop-filter gmap))]
          [(get weights [:css-assignment :alt 68] 100)
            (gen/tuple
              (gen/return "order: ")
              (:prop-order gmap))]
          [(get weights [:css-assignment :alt 69] 100)
            (gen/tuple
              (gen/return "border-bottom: ")
              (:prop-border-bottom gmap))]
          [(get weights [:css-assignment :alt 70] 100)
            (gen/tuple
              (gen/return "border-inline-end-color: ")
              (:prop-border-inline-end-color gmap))]
          [(get weights [:css-assignment :alt 71] 100)
            (gen/tuple
              (gen/return "-webkit-mask-composite: ")
              (:prop--webkit-mask-composite gmap))]
          [(get weights [:css-assignment :alt 72] 100)
            (gen/tuple
              (gen/return "azimuth: ")
              (:prop-azimuth gmap))]
          [(get weights [:css-assignment :alt 73] 100)
            (gen/tuple
              (gen/return "scroll-snap-type-x: ")
              (:prop-scroll-snap-type-x gmap))]
          [(get weights [:css-assignment :alt 74] 100)
            (gen/tuple
              (gen/return "column-span: ")
              (:prop-column-span gmap))]
          [(get weights [:css-assignment :alt 75] 100)
            (gen/tuple
              (gen/return "box-flex: ")
              (:prop-box-flex gmap))]
          [(get weights [:css-assignment :alt 76] 100)
            (gen/tuple
              (gen/return "transform-style: ")
              (:prop-transform-style gmap))]
          [(get weights [:css-assignment :alt 77] 100)
            (gen/tuple
              (gen/return "font-family: ")
              (:prop-font-family gmap))]
          [(get weights [:css-assignment :alt 78] 100)
            (gen/tuple
              (gen/return "column-rule: ")
              (:prop-column-rule gmap))]
          [(get weights [:css-assignment :alt 79] 100)
            (gen/tuple
              (gen/return "animation-duration: ")
              (:prop-animation-duration gmap))]
          [(get weights [:css-assignment :alt 80] 100)
            (gen/tuple
              (gen/return "border-block-end-color: ")
              (:prop-border-block-end-color gmap))]
          [(get weights [:css-assignment :alt 81] 100)
            (gen/tuple
              (gen/return "justify-content: ")
              (:prop-justify-content gmap))]
          [(get weights [:css-assignment :alt 82] 100)
            (gen/tuple
              (gen/return "text-decoration-line: ")
              (:prop-text-decoration-line gmap))]
          [(get weights [:css-assignment :alt 83] 100)
            (gen/tuple
              (gen/return "border-style: ")
              (:prop-border-style gmap))]
          [(get weights [:css-assignment :alt 84] 100)
            (gen/tuple
              (gen/return "resize: ")
              (:prop-resize gmap))]
          [(get weights [:css-assignment :alt 85] 100)
            (gen/tuple
              (gen/return "block-size: ")
              (:prop-block-size gmap))]
          [(get weights [:css-assignment :alt 86] 100)
            (gen/tuple
              (gen/return "text-transform: ")
              (:prop-text-transform gmap))]
          [(get weights [:css-assignment :alt 87] 100)
            (gen/tuple
              (gen/return "font-style: ")
              (:prop-font-style gmap))]
          [(get weights [:css-assignment :alt 88] 100)
            (gen/tuple
              (gen/return "-moz-appearance: ")
              (:prop--moz-appearance gmap))]
          [(get weights [:css-assignment :alt 89] 100)
            (gen/tuple
              (gen/return "mask-composite: ")
              (:prop-mask-composite gmap))]
          [(get weights [:css-assignment :alt 90] 100)
            (gen/tuple
              (gen/return "-moz-binding: ")
              (:prop--moz-binding gmap))]
          [(get weights [:css-assignment :alt 91] 100)
            (gen/tuple
              (gen/return "grid-gap: ")
              (:prop-grid-gap gmap))]
          [(get weights [:css-assignment :alt 92] 100)
            (gen/tuple
              (gen/return "perspective: ")
              (:prop-perspective gmap))]
          [(get weights [:css-assignment :alt 93] 100)
            (gen/tuple
              (gen/return "-moz-text-blink: ")
              (:prop--moz-text-blink gmap))]
          [(get weights [:css-assignment :alt 94] 100)
            (gen/tuple
              (gen/return "border-image-source: ")
              (:prop-border-image-source gmap))]
          [(get weights [:css-assignment :alt 95] 100)
            (gen/tuple
              (gen/return "-moz-float-edge: ")
              (:prop--moz-float-edge gmap))]
          [(get weights [:css-assignment :alt 96] 100)
            (gen/tuple
              (gen/return "line-height: ")
              (:prop-line-height gmap))]
          [(get weights [:css-assignment :alt 97] 100)
            (gen/tuple
              (gen/return "-moz-window-shadow: ")
              (:prop--moz-window-shadow gmap))]
          [(get weights [:css-assignment :alt 98] 100)
            (gen/tuple
              (gen/return "filter: ")
              (:prop-filter gmap))]
          [(get weights [:css-assignment :alt 99] 100)
            (gen/tuple
              (gen/return "box-shadow: ")
              (:prop-box-shadow gmap))]
          [(get weights [:css-assignment :alt 100] 100)
            (gen/tuple
              (gen/return "grid-template-areas: ")
              (:prop-grid-template-areas gmap))]
          [(get weights [:css-assignment :alt 101] 100)
            (gen/tuple
              (gen/return "border-left-width: ")
              (:prop-border-left-width gmap))]
          [(get weights [:css-assignment :alt 102] 100)
            (gen/tuple
              (gen/return "column-rule-color: ")
              (:prop-column-rule-color gmap))]
          [(get weights [:css-assignment :alt 103] 100)
            (gen/tuple
              (gen/return "grid-auto-rows: ")
              (:prop-grid-auto-rows gmap))]
          [(get weights [:css-assignment :alt 104] 100)
            (gen/tuple
              (gen/return "opacity: ")
              (:prop-opacity gmap))]
          [(get weights [:css-assignment :alt 105] 100)
            (gen/tuple
              (gen/return "counter-increment: ")
              (:prop-counter-increment gmap))]
          [(get weights [:css-assignment :alt 106] 100)
            (gen/tuple
              (gen/return "-moz-user-modify: ")
              (:prop--moz-user-modify gmap))]
          [(get weights [:css-assignment :alt 107] 100)
            (gen/tuple
              (gen/return "initial-letter-align: ")
              (:prop-initial-letter-align gmap))]
          [(get weights [:css-assignment :alt 108] 100)
            (gen/tuple
              (gen/return "min-block-size: ")
              (:prop-min-block-size gmap))]
          [(get weights [:css-assignment :alt 109] 100)
            (gen/tuple
              (gen/return "border-top-width: ")
              (:prop-border-top-width gmap))]
          [(get weights [:css-assignment :alt 110] 100)
            (gen/tuple
              (gen/return "image-orientation: ")
              (:prop-image-orientation gmap))]
          [(get weights [:css-assignment :alt 111] 100)
            (gen/tuple
              (gen/return "mask-size: ")
              (:prop-mask-size gmap))]
          [(get weights [:css-assignment :alt 112] 100)
            (gen/tuple
              (gen/return "border-image-repeat: ")
              (:prop-border-image-repeat gmap))]
          [(get weights [:css-assignment :alt 113] 100)
            (gen/tuple
              (gen/return "float: ")
              (:prop-float gmap))]
          [(get weights [:css-assignment :alt 114] 100)
            (gen/tuple
              (gen/return "font-language-override: ")
              (:prop-font-language-override gmap))]
          [(get weights [:css-assignment :alt 115] 100)
            (gen/tuple
              (gen/return "scroll-snap-destination: ")
              (:prop-scroll-snap-destination gmap))]
          [(get weights [:css-assignment :alt 116] 100)
            (gen/tuple
              (gen/return "grid-row-gap: ")
              (:prop-grid-row-gap gmap))]
          [(get weights [:css-assignment :alt 117] 100)
            (gen/tuple
              (gen/return "unicode-bidi: ")
              (:prop-unicode-bidi gmap))]
          [(get weights [:css-assignment :alt 118] 100)
            (gen/tuple
              (gen/return "transition: ")
              (:prop-transition gmap))]
          [(get weights [:css-assignment :alt 119] 100)
            (gen/tuple
              (gen/return "column-rule-width: ")
              (:prop-column-rule-width gmap))]
          [(get weights [:css-assignment :alt 120] 100)
            (gen/tuple
              (gen/return "offset-block-start: ")
              (:prop-offset-block-start gmap))]
          [(get weights [:css-assignment :alt 121] 100)
            (gen/tuple
              (gen/return "offset-distance: ")
              (:prop-offset-distance gmap))]
          [(get weights [:css-assignment :alt 122] 100)
            (gen/tuple
              (gen/return "mask-clip: ")
              (:prop-mask-clip gmap))]
          [(get weights [:css-assignment :alt 123] 100)
            (gen/tuple
              (gen/return "animation-direction: ")
              (:prop-animation-direction gmap))]
          [(get weights [:css-assignment :alt 124] 100)
            (gen/tuple
              (gen/return "offset-block-end: ")
              (:prop-offset-block-end gmap))]
          [(get weights [:css-assignment :alt 125] 100)
            (gen/tuple
              (gen/return "border-image-outset: ")
              (:prop-border-image-outset gmap))]
          [(get weights [:css-assignment :alt 126] 100)
            (gen/tuple
              (gen/return "font-variation-settings: ")
              (:prop-font-variation-settings gmap))]
          [(get weights [:css-assignment :alt 127] 100)
            (gen/tuple
              (gen/return "min-inline-size: ")
              (:prop-min-inline-size gmap))]
          [(get weights [:css-assignment :alt 128] 100)
            (gen/tuple
              (gen/return "caption-side: ")
              (:prop-caption-side gmap))]
          [(get weights [:css-assignment :alt 129] 100)
            (gen/tuple
              (gen/return "orphans: ")
              (:prop-orphans gmap))]
          [(get weights [:css-assignment :alt 130] 100)
            (gen/tuple
              (gen/return "margin-inline-end: ")
              (:prop-margin-inline-end gmap))]
          [(get weights [:css-assignment :alt 131] 100)
            (gen/tuple
              (gen/return "border-bottom-style: ")
              (:prop-border-bottom-style gmap))]
          [(get weights [:css-assignment :alt 132] 100)
            (gen/tuple
              (gen/return "grid-row-start: ")
              (:prop-grid-row-start gmap))]
          [(get weights [:css-assignment :alt 133] 100)
            (gen/tuple
              (gen/return "ime-mode: ")
              (:prop-ime-mode gmap))]
          [(get weights [:css-assignment :alt 134] 100)
            (gen/tuple
              (gen/return "top: ")
              (:prop-top gmap))]
          [(get weights [:css-assignment :alt 135] 100)
            (gen/tuple
              (gen/return "image-rendering: ")
              (:prop-image-rendering gmap))]
          [(get weights [:css-assignment :alt 136] 100)
            (gen/tuple
              (gen/return "shape-image-threshold: ")
              (:prop-shape-image-threshold gmap))]
          [(get weights [:css-assignment :alt 137] 100)
            (gen/tuple
              (gen/return "animation-name: ")
              (:prop-animation-name gmap))]
          [(get weights [:css-assignment :alt 138] 100)
            (gen/tuple
              (gen/return "right: ")
              (:prop-right gmap))]
          [(get weights [:css-assignment :alt 139] 100)
            (gen/tuple
              (gen/return "z-index: ")
              (:prop-z-index gmap))]
          [(get weights [:css-assignment :alt 140] 100)
            (gen/tuple
              (gen/return "background-blend-mode: ")
              (:prop-background-blend-mode gmap))]
          [(get weights [:css-assignment :alt 141] 100)
            (gen/tuple
              (gen/return "letter-spacing: ")
              (:prop-letter-spacing gmap))]
          [(get weights [:css-assignment :alt 142] 100)
            (gen/tuple
              (gen/return "list-style: ")
              (:prop-list-style gmap))]
          [(get weights [:css-assignment :alt 143] 100)
            (gen/tuple
              (gen/return "left: ")
              (:prop-left gmap))]
          [(get weights [:css-assignment :alt 144] 100)
            (gen/tuple
              (gen/return "width: ")
              (:prop-width gmap))]
          [(get weights [:css-assignment :alt 145] 100)
            (gen/tuple
              (gen/return "will-change: ")
              (:prop-will-change gmap))]
          [(get weights [:css-assignment :alt 146] 100)
            (gen/tuple
              (gen/return "font-synthesis: ")
              (:prop-font-synthesis gmap))]
          [(get weights [:css-assignment :alt 147] 100)
            (gen/tuple
              (gen/return "flex-flow: ")
              (:prop-flex-flow gmap))]
          [(get weights [:css-assignment :alt 148] 100)
            (gen/tuple
              (gen/return "background-size: ")
              (:prop-background-size gmap))]
          [(get weights [:css-assignment :alt 149] 100)
            (gen/tuple
              (gen/return "box-suppress: ")
              (:prop-box-suppress gmap))]
          [(get weights [:css-assignment :alt 150] 100)
            (gen/tuple
              (gen/return "background-clip: ")
              (:prop-background-clip gmap))]
          [(get weights [:css-assignment :alt 151] 100)
            (gen/tuple
              (gen/return "scroll-snap-points-x: ")
              (:prop-scroll-snap-points-x gmap))]
          [(get weights [:css-assignment :alt 152] 100)
            (gen/tuple
              (gen/return "animation: ")
              (:prop-animation gmap))]
          [(get weights [:css-assignment :alt 153] 100)
            (gen/tuple
              (gen/return "overflow: ")
              (:prop-overflow gmap))]
          [(get weights [:css-assignment :alt 154] 100)
            (gen/tuple
              (gen/return "-webkit-mask-clip: ")
              (:prop--webkit-mask-clip gmap))]
          [(get weights [:css-assignment :alt 155] 100)
            (gen/tuple
              (gen/return "font-size-adjust: ")
              (:prop-font-size-adjust gmap))]
          [(get weights [:css-assignment :alt 156] 100)
            (gen/tuple
              (gen/return "-moz-image-region: ")
              (:prop--moz-image-region gmap))]
          [(get weights [:css-assignment :alt 157] 100)
            (gen/tuple
              (gen/return "padding-inline-end: ")
              (:prop-padding-inline-end gmap))]
          [(get weights [:css-assignment :alt 158] 100)
            (gen/tuple
              (gen/return "counter-reset: ")
              (:prop-counter-reset gmap))]
          [(get weights [:css-assignment :alt 159] 100)
            (gen/tuple
              (gen/return "column-gap: ")
              (:prop-column-gap gmap))]
          [(get weights [:css-assignment :alt 160] 100)
            (gen/tuple
              (gen/return "border-color: ")
              (:prop-border-color gmap))]
          [(get weights [:css-assignment :alt 161] 100)
            (gen/tuple
              (gen/return "-webkit-mask-position-x: ")
              (:prop--webkit-mask-position-x gmap))]
          [(get weights [:css-assignment :alt 162] 100)
            (gen/tuple
              (gen/return "vertical-align: ")
              (:prop-vertical-align gmap))]
          [(get weights [:css-assignment :alt 163] 100)
            (gen/tuple
              (gen/return "display-inside: ")
              (:prop-display-inside gmap))]
          [(get weights [:css-assignment :alt 164] 100)
            (gen/tuple
              (gen/return "border-width: ")
              (:prop-border-width gmap))]
          [(get weights [:css-assignment :alt 165] 100)
            (gen/tuple
              (gen/return "quotes: ")
              (:prop-quotes gmap))]
          [(get weights [:css-assignment :alt 166] 100)
            (gen/tuple
              (gen/return "scroll-snap-points-y: ")
              (:prop-scroll-snap-points-y gmap))]
          [(get weights [:css-assignment :alt 167] 100)
            (gen/tuple
              (gen/return "grid-area: ")
              (:prop-grid-area gmap))]
          [(get weights [:css-assignment :alt 168] 100)
            (gen/tuple
              (gen/return "border-spacing: ")
              (:prop-border-spacing gmap))]
          [(get weights [:css-assignment :alt 169] 100)
            (gen/tuple
              (gen/return "border-top-style: ")
              (:prop-border-top-style gmap))]
          [(get weights [:css-assignment :alt 170] 100)
            (gen/tuple
              (gen/return "text-underline-position: ")
              (:prop-text-underline-position gmap))]
          [(get weights [:css-assignment :alt 171] 100)
            (gen/tuple
              (gen/return "grid-template-rows: ")
              (:prop-grid-template-rows gmap))]
          [(get weights [:css-assignment :alt 172] 100)
            (gen/tuple
              (gen/return "object-position: ")
              (:prop-object-position gmap))]
          [(get weights [:css-assignment :alt 173] 100)
            (gen/tuple
              (gen/return "border-block-start-style: ")
              (:prop-border-block-start-style gmap))]
          [(get weights [:css-assignment :alt 174] 100)
            (gen/tuple
              (gen/return "-moz-outline-radius: ")
              (:prop--moz-outline-radius gmap))]
          [(get weights [:css-assignment :alt 175] 100)
            (gen/tuple
              (gen/return "border-block-end-style: ")
              (:prop-border-block-end-style gmap))]
          [(get weights [:css-assignment :alt 176] 100)
            (gen/tuple
              (gen/return "padding-block-start: ")
              (:prop-padding-block-start gmap))]
          [(get weights [:css-assignment :alt 177] 100)
            (gen/tuple
              (gen/return "animation-delay: ")
              (:prop-animation-delay gmap))]
          [(get weights [:css-assignment :alt 178] 100)
            (gen/tuple
              (gen/return "-webkit-box-reflect: ")
              (:prop--webkit-box-reflect gmap))]
          [(get weights [:css-assignment :alt 179] 100)
            (gen/tuple
              (gen/return "-moz-orient: ")
              (:prop--moz-orient gmap))]
          [(get weights [:css-assignment :alt 180] 100)
            (gen/tuple
              (gen/return "border-inline-start: ")
              (:prop-border-inline-start gmap))]
          [(get weights [:css-assignment :alt 181] 100)
            (gen/tuple
              (gen/return "border-collapse: ")
              (:prop-border-collapse gmap))]
          [(get weights [:css-assignment :alt 182] 100)
            (gen/tuple
              (gen/return "border-image-slice: ")
              (:prop-border-image-slice gmap))]
          [(get weights [:css-assignment :alt 183] 100)
            (gen/tuple
              (gen/return "flex-direction: ")
              (:prop-flex-direction gmap))]
          [(get weights [:css-assignment :alt 184] 100)
            (gen/tuple
              (gen/return "color: ")
              (:prop-color gmap))]
          [(get weights [:css-assignment :alt 185] 100)
            (gen/tuple
              (gen/return "offset-position: ")
              (:prop-offset-position gmap))]
          [(get weights [:css-assignment :alt 186] 100)
            (gen/tuple
              (gen/return "background-image: ")
              (:prop-background-image gmap))]
          [(get weights [:css-assignment :alt 187] 100)
            (gen/tuple
              (gen/return "font-variant-caps: ")
              (:prop-font-variant-caps gmap))]
          [(get weights [:css-assignment :alt 188] 100)
            (gen/tuple
              (gen/return "-webkit-text-stroke: ")
              (:prop--webkit-text-stroke gmap))]
          [(get weights [:css-assignment :alt 189] 100)
            (gen/tuple
              (gen/return "border-top-right-radius: ")
              (:prop-border-top-right-radius gmap))]
          [(get weights [:css-assignment :alt 190] 100)
            (gen/tuple
              (gen/return "border-inline-end-width: ")
              (:prop-border-inline-end-width gmap))]
          [(get weights [:css-assignment :alt 191] 100)
            (gen/tuple
              (gen/return "text-emphasis-color: ")
              (:prop-text-emphasis-color gmap))]
          [(get weights [:css-assignment :alt 192] 100)
            (gen/tuple
              (gen/return "text-indent: ")
              (:prop-text-indent gmap))]
          [(get weights [:css-assignment :alt 193] 100)
            (gen/tuple
              (gen/return "mix-blend-mode: ")
              (:prop-mix-blend-mode gmap))]
          [(get weights [:css-assignment :alt 194] 100)
            (gen/tuple
              (gen/return "max-height: ")
              (:prop-max-height gmap))]
          [(get weights [:css-assignment :alt 195] 100)
            (gen/tuple
              (gen/return "mask-repeat: ")
              (:prop-mask-repeat gmap))]
          [(get weights [:css-assignment :alt 196] 100)
            (gen/tuple
              (gen/return "offset: ")
              (:prop-offset gmap))]
          [(get weights [:css-assignment :alt 197] 100)
            (gen/tuple
              (gen/return "touch-action: ")
              (:prop-touch-action gmap))]
          [(get weights [:css-assignment :alt 198] 100)
            (gen/tuple
              (gen/return "word-wrap: ")
              (:prop-word-wrap gmap))]
          [(get weights [:css-assignment :alt 199] 100)
            (gen/tuple
              (gen/return "isolation: ")
              (:prop-isolation gmap))]
          [(get weights [:css-assignment :alt 200] 100)
            (gen/tuple
              (gen/return "transition-duration: ")
              (:prop-transition-duration gmap))]
          [(get weights [:css-assignment :alt 201] 100)
            (gen/tuple
              (gen/return "-moz-user-input: ")
              (:prop--moz-user-input gmap))]
          [(get weights [:css-assignment :alt 202] 100)
            (gen/tuple
              (gen/return "grid-auto-columns: ")
              (:prop-grid-auto-columns gmap))]
          [(get weights [:css-assignment :alt 203] 100)
            (gen/tuple
              (gen/return "grid-column-end: ")
              (:prop-grid-column-end gmap))]
          [(get weights [:css-assignment :alt 204] 100)
            (gen/tuple
              (gen/return "align-content: ")
              (:prop-align-content gmap))]
          [(get weights [:css-assignment :alt 205] 100)
            (gen/tuple
              (gen/return "border-bottom-right-radius: ")
              (:prop-border-bottom-right-radius gmap))]
          [(get weights [:css-assignment :alt 206] 100)
            (gen/tuple
              (gen/return "grid-template: ")
              (:prop-grid-template gmap))]
          [(get weights [:css-assignment :alt 207] 100)
            (gen/tuple
              (gen/return "-webkit-mask-image: ")
              (:prop--webkit-mask-image gmap))]
          [(get weights [:css-assignment :alt 208] 100)
            (gen/tuple
              (gen/return "widows: ")
              (:prop-widows gmap))]
          [(get weights [:css-assignment :alt 209] 100)
            (gen/tuple
              (gen/return "background-position-y: ")
              (:prop-background-position-y gmap))]
          [(get weights [:css-assignment :alt 210] 100)
            (gen/tuple
              (gen/return "font-size: ")
              (:prop-font-size gmap))]
          [(get weights [:css-assignment :alt 211] 100)
            (gen/tuple
              (gen/return "border-right-style: ")
              (:prop-border-right-style gmap))]
          [(get weights [:css-assignment :alt 212] 100)
            (gen/tuple
              (gen/return "animation-timing-function: ")
              (:prop-animation-timing-function gmap))]
          [(get weights [:css-assignment :alt 213] 100)
            (gen/tuple
              (gen/return "inline-size: ")
              (:prop-inline-size gmap))]
          [(get weights [:css-assignment :alt 214] 100)
            (gen/tuple
              (gen/return "offset-inline-end: ")
              (:prop-offset-inline-end gmap))]
          [(get weights [:css-assignment :alt 215] 100)
            (gen/tuple
              (gen/return "font-variant-position: ")
              (:prop-font-variant-position gmap))]
          [(get weights [:css-assignment :alt 216] 100)
            (gen/tuple
              (gen/return "line-break: ")
              (:prop-line-break gmap))]
          [(get weights [:css-assignment :alt 217] 100)
            (gen/tuple
              (gen/return "overflow-y: ")
              (:prop-overflow-y gmap))]
          [(get weights [:css-assignment :alt 218] 100)
            (gen/tuple
              (gen/return "-webkit-border-before-color: ")
              (:prop--webkit-border-before-color gmap))]
          [(get weights [:css-assignment :alt 219] 100)
            (gen/tuple
              (gen/return "border-block-start-color: ")
              (:prop-border-block-start-color gmap))]
          [(get weights [:css-assignment :alt 220] 100)
            (gen/tuple
              (gen/return "clip: ")
              (:prop-clip gmap))]
          [(get weights [:css-assignment :alt 221] 100)
            (gen/tuple
              (gen/return "align-self: ")
              (:prop-align-self gmap))]
          [(get weights [:css-assignment :alt 222] 100)
            (gen/tuple
              (gen/return "border-top-color: ")
              (:prop-border-top-color gmap))]
          [(get weights [:css-assignment :alt 223] 100)
            (gen/tuple
              (gen/return "overflow-wrap: ")
              (:prop-overflow-wrap gmap))]
          [(get weights [:css-assignment :alt 224] 100)
            (gen/tuple
              (gen/return "flex: ")
              (:prop-flex gmap))]
          [(get weights [:css-assignment :alt 225] 100)
            (gen/tuple
              (gen/return "-webkit-mask-position-y: ")
              (:prop--webkit-mask-position-y gmap))]
          [(get weights [:css-assignment :alt 226] 100)
            (gen/tuple
              (gen/return "flex-basis: ")
              (:prop-flex-basis gmap))]
          [(get weights [:css-assignment :alt 227] 100)
            (gen/tuple
              (gen/return "font-variant-numeric: ")
              (:prop-font-variant-numeric gmap))]
          [(get weights [:css-assignment :alt 228] 100)
            (gen/tuple
              (gen/return "ruby-align: ")
              (:prop-ruby-align gmap))]
          [(get weights [:css-assignment :alt 229] 100)
            (gen/tuple
              (gen/return "-webkit-mask-repeat-y: ")
              (:prop--webkit-mask-repeat-y gmap))]
          [(get weights [:css-assignment :alt 230] 100)
            (gen/tuple
              (gen/return "position: ")
              (:prop-position gmap))]
          [(get weights [:css-assignment :alt 231] 100)
            (gen/tuple
              (gen/return "border-left-color: ")
              (:prop-border-left-color gmap))]
          [(get weights [:css-assignment :alt 232] 100)
            (gen/tuple
              (gen/return "-moz-border-bottom-colors: ")
              (:prop--moz-border-bottom-colors gmap))]
          [(get weights [:css-assignment :alt 233] 100)
            (gen/tuple
              (gen/return "margin-top: ")
              (:prop-margin-top gmap))]
          [(get weights [:css-assignment :alt 234] 100)
            (gen/tuple
              (gen/return "scroll-snap-type: ")
              (:prop-scroll-snap-type gmap))]
          [(get weights [:css-assignment :alt 235] 100)
            (gen/tuple
              (gen/return "-moz-border-right-colors: ")
              (:prop--moz-border-right-colors gmap))]
          [(get weights [:css-assignment :alt 236] 100)
            (gen/tuple
              (gen/return "display: ")
              (:prop-display gmap))]
          [(get weights [:css-assignment :alt 237] 100)
            (gen/tuple
              (gen/return "shape-outside: ")
              (:prop-shape-outside gmap))]
          [(get weights [:css-assignment :alt 238] 100)
            (gen/tuple
              (gen/return "padding-block-end: ")
              (:prop-padding-block-end gmap))]
          [(get weights [:css-assignment :alt 239] 100)
            (gen/tuple
              (gen/return "shape-margin: ")
              (:prop-shape-margin gmap))]
          [(get weights [:css-assignment :alt 240] 100)
            (gen/tuple
              (gen/return "box-ordinal-group: ")
              (:prop-box-ordinal-group gmap))]
          [(get weights [:css-assignment :alt 241] 100)
            (gen/tuple
              (gen/return "border-image-width: ")
              (:prop-border-image-width gmap))]
          [(get weights [:css-assignment :alt 242] 100)
            (gen/tuple
              (gen/return "padding-right: ")
              (:prop-padding-right gmap))]
          [(get weights [:css-assignment :alt 243] 100)
            (gen/tuple
              (gen/return "all: ")
              (:prop-all gmap))]
          [(get weights [:css-assignment :alt 244] 100)
            (gen/tuple
              (gen/return "font-feature-settings: ")
              (:prop-font-feature-settings gmap))]
          [(get weights [:css-assignment :alt 245] 100)
            (gen/tuple
              (gen/return "border-block-end-width: ")
              (:prop-border-block-end-width gmap))]
          [(get weights [:css-assignment :alt 246] 100)
            (gen/tuple
              (gen/return "border-right-color: ")
              (:prop-border-right-color gmap))]
          [(get weights [:css-assignment :alt 247] 100)
            (gen/tuple
              (gen/return "perspective-origin: ")
              (:prop-perspective-origin gmap))]
          [(get weights [:css-assignment :alt 248] 100)
            (gen/tuple
              (gen/return "font: ")
              (:prop-font gmap))]
          [(get weights [:css-assignment :alt 249] 100)
            (gen/tuple
              (gen/return "table-layout: ")
              (:prop-table-layout gmap))]
          [(get weights [:css-assignment :alt 250] 100)
            (gen/tuple
              (gen/return "bottom: ")
              (:prop-bottom gmap))]
          [(get weights [:css-assignment :alt 251] 100)
            (gen/tuple
              (gen/return "text-decoration-color: ")
              (:prop-text-decoration-color gmap))]
          [(get weights [:css-assignment :alt 252] 100)
            (gen/tuple
              (gen/return "grid: ")
              (:prop-grid gmap))]
          [(get weights [:css-assignment :alt 253] 100)
            (gen/tuple
              (gen/return "text-size-adjust: ")
              (:prop-text-size-adjust gmap))]
          [(get weights [:css-assignment :alt 254] 100)
            (gen/tuple
              (gen/return "overflow-x: ")
              (:prop-overflow-x gmap))]
          [(get weights [:css-assignment :alt 255] 100)
            (gen/tuple
              (gen/return "mask-type: ")
              (:prop-mask-type gmap))]
          [(get weights [:css-assignment :alt 256] 100)
            (gen/tuple
              (gen/return "-webkit-mask-origin: ")
              (:prop--webkit-mask-origin gmap))]
          [(get weights [:css-assignment :alt 257] 100)
            (gen/tuple
              (gen/return "-ms-overflow-style: ")
              (:prop--ms-overflow-style gmap))]
          [(get weights [:css-assignment :alt 258] 100)
            (gen/tuple
              (gen/return "empty-cells: ")
              (:prop-empty-cells gmap))]
          [(get weights [:css-assignment :alt 259] 100)
            (gen/tuple
              (gen/return "outline-width: ")
              (:prop-outline-width gmap))]
          [(get weights [:css-assignment :alt 260] 100)
            (gen/tuple
              (gen/return "transition-delay: ")
              (:prop-transition-delay gmap))]
          [(get weights [:css-assignment :alt 261] 100)
            (gen/tuple
              (gen/return "hyphens: ")
              (:prop-hyphens gmap))]
          [(get weights [:css-assignment :alt 262] 100)
            (gen/tuple
              (gen/return "offset-rotate: ")
              (:prop-offset-rotate gmap))]
          [(get weights [:css-assignment :alt 263] 100)
            (gen/tuple
              (gen/return "writing-mode: ")
              (:prop-writing-mode gmap))]
          [(get weights [:css-assignment :alt 264] 100)
            (gen/tuple
              (gen/return "display-outside: ")
              (:prop-display-outside gmap))]
          [(get weights [:css-assignment :alt 265] 100)
            (gen/tuple
              (gen/return "font-variant-east-asian: ")
              (:prop-font-variant-east-asian gmap))]
          [(get weights [:css-assignment :alt 266] 100)
            (gen/tuple
              (gen/return "text-decoration-style: ")
              (:prop-text-decoration-style gmap))]
          [(get weights [:css-assignment :alt 267] 100)
            (gen/tuple
              (gen/return "mask: ")
              (:prop-mask gmap))]
          [(get weights [:css-assignment :alt 268] 100)
            (gen/tuple
              (gen/return "contain: ")
              (:prop-contain gmap))]
          [(get weights [:css-assignment :alt 269] 100)
            (gen/tuple
              (gen/return "clear: ")
              (:prop-clear gmap))]
          [(get weights [:css-assignment :alt 270] 100)
            (gen/tuple
              (gen/return "scroll-snap-type-y: ")
              (:prop-scroll-snap-type-y gmap))]
          [(get weights [:css-assignment :alt 271] 100)
            (gen/tuple
              (gen/return "cursor: ")
              (:prop-cursor gmap))]
          [(get weights [:css-assignment :alt 272] 100)
            (gen/tuple
              (gen/return "break-inside: ")
              (:prop-break-inside gmap))]
          [(get weights [:css-assignment :alt 273] 100)
            (gen/tuple
              (gen/return "transform: ")
              (:prop-transform gmap))]
          [(get weights [:css-assignment :alt 274] 100)
            (gen/tuple
              (gen/return "-webkit-border-before-width: ")
              (:prop--webkit-border-before-width gmap))]
          [(get weights [:css-assignment :alt 275] 100)
            (gen/tuple
              (gen/return "font-variant: ")
              (:prop-font-variant gmap))]
          [(get weights [:css-assignment :alt 276] 100)
            (gen/tuple
              (gen/return "flex-shrink: ")
              (:prop-flex-shrink gmap))]
          [(get weights [:css-assignment :alt 277] 100)
            (gen/tuple
              (gen/return "background-color: ")
              (:prop-background-color gmap))]
          [(get weights [:css-assignment :alt 278] 100)
            (gen/tuple
              (gen/return "margin-left: ")
              (:prop-margin-left gmap))]
          [(get weights [:css-assignment :alt 279] 100)
            (gen/tuple
              (gen/return "text-emphasis-style: ")
              (:prop-text-emphasis-style gmap))]
          [(get weights [:css-assignment :alt 280] 100)
            (gen/tuple
              (gen/return "box-align: ")
              (:prop-box-align gmap))]
          [(get weights [:css-assignment :alt 281] 100)
            (gen/tuple
              (gen/return "outline-offset: ")
              (:prop-outline-offset gmap))]
          [(get weights [:css-assignment :alt 282] 100)
            (gen/tuple
              (gen/return "font-kerning: ")
              (:prop-font-kerning gmap))]
          [(get weights [:css-assignment :alt 283] 100)
            (gen/tuple
              (gen/return "flex-wrap: ")
              (:prop-flex-wrap gmap))]
          [(get weights [:css-assignment :alt 284] 100)
            (gen/tuple
              (gen/return "grid-column-gap: ")
              (:prop-grid-column-gap gmap))]
          [(get weights [:css-assignment :alt 285] 100)
            (gen/tuple
              (gen/return "max-block-size: ")
              (:prop-max-block-size gmap))]
          [(get weights [:css-assignment :alt 286] 100)
            (gen/tuple
              (gen/return "border-inline-start-color: ")
              (:prop-border-inline-start-color gmap))]
          [(get weights [:css-assignment :alt 287] 100)
            (gen/tuple
              (gen/return "-webkit-text-stroke-color: ")
              (:prop--webkit-text-stroke-color gmap))]
          [(get weights [:css-assignment :alt 288] 100)
            (gen/tuple
              (gen/return "height: ")
              (:prop-height gmap))]
          [(get weights [:css-assignment :alt 289] 100)
            (gen/tuple
              (gen/return "-webkit-mask-repeat-x: ")
              (:prop--webkit-mask-repeat-x gmap))]
          [(get weights [:css-assignment :alt 290] 100)
            (gen/tuple
              (gen/return "ruby-merge: ")
              (:prop-ruby-merge gmap))]
          [(get weights [:css-assignment :alt 291] 100)
            (gen/tuple
              (gen/return "grid-template-columns: ")
              (:prop-grid-template-columns gmap))]
          [(get weights [:css-assignment :alt 292] 100)
            (gen/tuple
              (gen/return "grid-column-start: ")
              (:prop-grid-column-start gmap))]
          [(get weights [:css-assignment :alt 293] 100)
            (gen/tuple
              (gen/return "object-fit: ")
              (:prop-object-fit gmap))]
          [(get weights [:css-assignment :alt 294] 100)
            (gen/tuple
              (gen/return "border-bottom-left-radius: ")
              (:prop-border-bottom-left-radius gmap))]
          [(get weights [:css-assignment :alt 295] 100)
            (gen/tuple
              (gen/return "mask-image: ")
              (:prop-mask-image gmap))]
          [(get weights [:css-assignment :alt 296] 100)
            (gen/tuple
              (gen/return "list-style-position: ")
              (:prop-list-style-position gmap))]
          [(get weights [:css-assignment :alt 297] 100)
            (gen/tuple
              (gen/return "break-before: ")
              (:prop-break-before gmap))]
          [(get weights [:css-assignment :alt 298] 100)
            (gen/tuple
              (gen/return "page-break-after: ")
              (:prop-page-break-after gmap))]
          [(get weights [:css-assignment :alt 299] 100)
            (gen/tuple
              (gen/return "margin: ")
              (:prop-margin gmap))]
          [(get weights [:css-assignment :alt 300] 100)
            (gen/tuple
              (gen/return "font-variant-alternates: ")
              (:prop-font-variant-alternates gmap))]
          [(get weights [:css-assignment :alt 301] 100)
            (gen/tuple
              (gen/return "margin-right: ")
              (:prop-margin-right gmap))]
          [(get weights [:css-assignment :alt 302] 100)
            (gen/tuple
              (gen/return "outline: ")
              (:prop-outline gmap))]
          [(get weights [:css-assignment :alt 303] 100)
            (gen/tuple
              (gen/return "border-inline-end: ")
              (:prop-border-inline-end gmap))]
          [(get weights [:css-assignment :alt 304] 100)
            (gen/tuple
              (gen/return "max-width: ")
              (:prop-max-width gmap))]
          [(get weights [:css-assignment :alt 305] 100)
            (gen/tuple
              (gen/return "border: ")
              (:prop-border gmap))]
          [(get weights [:css-assignment :alt 306] 100)
            (gen/tuple
              (gen/return "-webkit-border-before: ")
              (:prop--webkit-border-before gmap))]
          [(get weights [:css-assignment :alt 307] 100)
            (gen/tuple
              (gen/return "offset-inline-start: ")
              (:prop-offset-inline-start gmap))]
          [(get weights [:css-assignment :alt 308] 100)
            (gen/tuple
              (gen/return "column-width: ")
              (:prop-column-width gmap))]
          [(get weights [:css-assignment :alt 309] 100)
            (gen/tuple
              (gen/return "content: ")
              (:prop-content gmap))]
          [(get weights [:css-assignment :alt 310] 100)
            (gen/tuple
              (gen/return "mask-origin: ")
              (:prop-mask-origin gmap))]
          [(get weights [:css-assignment :alt 311] 100)
            (gen/tuple
              (gen/return "column-fill: ")
              (:prop-column-fill gmap))]
          [(get weights [:css-assignment :alt 312] 100)
            (gen/tuple
              (gen/return "pointer-events: ")
              (:prop-pointer-events gmap))]
          [(get weights [:css-assignment :alt 313] 100)
            (gen/tuple
              (gen/return "grid-column: ")
              (:prop-grid-column gmap))]
          [(get weights [:css-assignment :alt 314] 100)
            (gen/tuple
              (gen/return "outline-style: ")
              (:prop-outline-style gmap))]
          [(get weights [:css-assignment :alt 315] 100)
            (gen/tuple
              (gen/return "text-combine-upright: ")
              (:prop-text-combine-upright gmap))]
          [(get weights [:css-assignment :alt 316] 100)
            (gen/tuple
              (gen/return "scroll-snap-coordinate: ")
              (:prop-scroll-snap-coordinate gmap))]
          [(get weights [:css-assignment :alt 317] 100)
            (gen/tuple
              (gen/return "column-rule-style: ")
              (:prop-column-rule-style gmap))]
          [(get weights [:css-assignment :alt 318] 100)
            (gen/tuple
              (gen/return "column-count: ")
              (:prop-column-count gmap))]
          [(get weights [:css-assignment :alt 319] 100)
            (gen/tuple
              (gen/return "offset-path: ")
              (:prop-offset-path gmap))]
          [(get weights [:css-assignment :alt 320] 100)
            (gen/tuple
              (gen/return "animation-play-state: ")
              (:prop-animation-play-state gmap))]
          [(get weights [:css-assignment :alt 321] 100)
            (gen/tuple
              (gen/return "text-orientation: ")
              (:prop-text-orientation gmap))]
          [(get weights [:css-assignment :alt 322] 100)
            (gen/tuple
              (gen/return "page-break-before: ")
              (:prop-page-break-before gmap))]
          [(get weights [:css-assignment :alt 323] 100)
            (gen/tuple
              (gen/return "-moz-outline-radius-topleft: ")
              (:prop--moz-outline-radius-topleft gmap))]
          [(get weights [:css-assignment :alt 324] 100)
            (gen/tuple
              (gen/return "margin-bottom: ")
              (:prop-margin-bottom gmap))]
          [(get weights [:css-assignment :alt 325] 100)
            (gen/tuple
              (gen/return "appearance: ")
              (:prop-appearance gmap))]
          [(get weights [:css-assignment :alt 326] 100)
            (gen/tuple
              (gen/return "-webkit-mask-position: ")
              (:prop--webkit-mask-position gmap))]
          [(get weights [:css-assignment :alt 327] 100)
            (gen/tuple
              (gen/return "white-space: ")
              (:prop-white-space gmap))]
          [(get weights [:css-assignment :alt 328] 100)
            (gen/tuple
              (gen/return "text-emphasis: ")
              (:prop-text-emphasis gmap))]
          [(get weights [:css-assignment :alt 329] 100)
            (gen/tuple
              (gen/return "direction: ")
              (:prop-direction gmap))]
          [(get weights [:css-assignment :alt 330] 100)
            (gen/tuple
              (gen/return "text-align: ")
              (:prop-text-align gmap))]
          [(get weights [:css-assignment :alt 331] 100)
            (gen/tuple
              (gen/return "overflow-clip-box: ")
              (:prop-overflow-clip-box gmap))]
          [(get weights [:css-assignment :alt 332] 100)
            (gen/tuple
              (gen/return "mask-position: ")
              (:prop-mask-position gmap))]
          [(get weights [:css-assignment :alt 333] 100)
            (gen/tuple
              (gen/return "text-decoration-skip: ")
              (:prop-text-decoration-skip gmap))]
          [(get weights [:css-assignment :alt 334] 100)
            (gen/tuple
              (gen/return "flex-grow: ")
              (:prop-flex-grow gmap))]
          [(get weights [:css-assignment :alt 335] 100)
            (gen/tuple
              (gen/return "background-repeat: ")
              (:prop-background-repeat gmap))]
          [(get weights [:css-assignment :alt 336] 100)
            (gen/tuple
              (gen/return "font-weight: ")
              (:prop-font-weight gmap))]
          [(get weights [:css-assignment :alt 337] 100)
            (gen/tuple
              (gen/return "animation-fill-mode: ")
              (:prop-animation-fill-mode gmap))]
          [(get weights [:css-assignment :alt 338] 100)
            (gen/tuple
              (gen/return "border-image: ")
              (:prop-border-image gmap))]
          [(get weights [:css-assignment :alt 339] 100)
            (gen/tuple
              (gen/return "max-inline-size: ")
              (:prop-max-inline-size gmap))]
          [(get weights [:css-assignment :alt 340] 100)
            (gen/tuple
              (gen/return "background-position-x: ")
              (:prop-background-position-x gmap))]
          [(get weights [:css-assignment :alt 341] 100)
            (gen/tuple
              (gen/return "border-right: ")
              (:prop-border-right gmap))]
          [(get weights [:css-assignment :alt 342] 100)
            (gen/tuple
              (gen/return "-moz-border-top-colors: ")
              (:prop--moz-border-top-colors gmap))]
          [(get weights [:css-assignment :alt 343] 100)
            (gen/tuple
              (gen/return "transform-origin: ")
              (:prop-transform-origin gmap))]
          [(get weights [:css-assignment :alt 344] 100)
            (gen/tuple
              (gen/return "background-attachment: ")
              (:prop-background-attachment gmap))]
          [(get weights [:css-assignment :alt 345] 100)
            (gen/tuple
              (gen/return "tab-size: ")
              (:prop-tab-size gmap))]
          [(get weights [:css-assignment :alt 346] 100)
            (gen/tuple
              (gen/return "font-variant-ligatures: ")
              (:prop-font-variant-ligatures gmap))]
          [(get weights [:css-assignment :alt 347] 100)
            (gen/tuple
              (gen/return "border-left: ")
              (:prop-border-left gmap))]
          [(get weights [:css-assignment :alt 348] 100)
            (gen/tuple
              (gen/return "caret-color: ")
              (:prop-caret-color gmap))]
          [(get weights [:css-assignment :alt 349] 100)
            (gen/tuple
              (gen/return "padding-inline-start: ")
              (:prop-padding-inline-start gmap))]
          [(get weights [:css-assignment :alt 350] 100)
            (gen/tuple
              (gen/return "box-decoration-break: ")
              (:prop-box-decoration-break gmap))]
          [(get weights [:css-assignment :alt 351] 100)
            (gen/tuple
              (gen/return "-webkit-mask-repeat: ")
              (:prop--webkit-mask-repeat gmap))]
          [(get weights [:css-assignment :alt 352] 100)
            (gen/tuple
              (gen/return "border-top: ")
              (:prop-border-top gmap))]
          [(get weights [:css-assignment :alt 353] 100)
            (gen/tuple
              (gen/return "-moz-outline-radius-bottomleft: ")
              (:prop--moz-outline-radius-bottomleft gmap))]
          [(get weights [:css-assignment :alt 354] 100)
            (gen/tuple
              (gen/return "mask-mode: ")
              (:prop-mask-mode gmap))]
          [(get weights [:css-assignment :alt 355] 100)
            (gen/tuple
              (gen/return "min-width: ")
              (:prop-min-width gmap))]
          [(get weights [:css-assignment :alt 356] 100)
            (gen/tuple
              (gen/return "user-select: ")
              (:prop-user-select gmap))]
          [(get weights [:css-assignment :alt 357] 100)
            (gen/tuple
              (gen/return "visibility: ")
              (:prop-visibility gmap))]
          [(get weights [:css-assignment :alt 358] 100)
            (gen/tuple
              (gen/return "border-top-left-radius: ")
              (:prop-border-top-left-radius gmap))]
          [(get weights [:css-assignment :alt 359] 100)
            (gen/tuple
              (gen/return "-moz-outline-radius-bottomright: ")
              (:prop--moz-outline-radius-bottomright gmap))]
          [(get weights [:css-assignment :alt 360] 100)
            (gen/tuple
              (gen/return "text-overflow: ")
              (:prop-text-overflow gmap))]
          [(get weights [:css-assignment :alt 361] 100)
            (gen/tuple
              (gen/return "image-resolution: ")
              (:prop-image-resolution gmap))]
          [(get weights [:css-assignment :alt 362] 100)
            (gen/tuple
              (gen/return "clip-path: ")
              (:prop-clip-path gmap))]
          [(get weights [:css-assignment :alt 363] 100)
            (gen/tuple
              (gen/return "transform-box: ")
              (:prop-transform-box gmap))]
          [(get weights [:css-assignment :alt 364] 100)
            (gen/tuple
              (gen/return "text-rendering: ")
              (:prop-text-rendering gmap))]])
        gmap (assoc gmap :css-assignment gen-css-assignment)

        gen-nonprop-nth
        (gen/frequency [
          [(get weights [:nonprop-nth :alt 0] 100)
            (gen/tuple
              (:nonprop-an-plus-b gmap)
              (gen/return " "))]
          [(get weights [:nonprop-nth :alt 1] 100)
            (gen/tuple
              (gen/return "even")
              (gen/return " "))]
          [(get weights [:nonprop-nth :alt 2] 100)
            (gen/tuple
              (gen/return "odd")
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-nth gen-nonprop-nth)

        gen-css-assignments
        (gen/tuple
          (:css-assignment gmap)
          (gen/vector
            (gen/tuple
              (gen/return "; ")
              (:css-assignment gmap))))
        gmap (assoc gmap :css-assignments gen-css-assignments)

        gen-nonprop-symbol
        (gen/frequency [
          [(get weights [:nonprop-symbol :alt 0] 100)
            (gen/tuple
              (:nonprop-string gmap)
              (gen/return " "))]
          [(get weights [:nonprop-symbol :alt 1] 100)
            (gen/tuple
              (:nonprop-image gmap)
              (gen/return " "))]
          [(get weights [:nonprop-symbol :alt 2] 100)
            (gen/tuple
              (:nonprop-ident gmap)
              (gen/return " "))]])
        gmap (assoc gmap :nonprop-symbol gen-nonprop-symbol)]
    gmap))

(defn css3-generators [& [gmap weights]]
  (let [gmap (or gmap {})
        gmap (css3-generators-part-0 gmap weights)
        gmap (css3-generators-part-1 gmap weights)
        gmap (css3-generators-part-2 gmap weights)
        gmap (css3-generators-part-3 gmap weights)
        gmap (css3-generators-part-4 gmap weights)
        gmap (css3-generators-part-5 gmap weights)
        gmap (css3-generators-part-6 gmap weights)
        gmap (css3-generators-part-7 gmap weights)
        gmap (css3-generators-part-8 gmap weights)
        gmap (css3-generators-part-9 gmap weights)
        gmap (css3-generators-part-10 gmap weights)
        gmap (css3-generators-part-11 gmap weights)
        gmap (css3-generators-part-12 gmap weights)]
    gmap))
