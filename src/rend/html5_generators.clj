(ns rend.html5-generators
   (:require [clojure.test.check.generators :as gen]
             [com.gfredericks.test.chuck.generators :as chuck]
             [mend.util :as util]
             [rend.misc-generators :as misc-gen]))

;; Generated by mend.html5

(defn- html5-generators-part-0 [gmap weights]
  (let [
        gen-attr-val-dir
        (gen/frequency [
          [(get weights [:attr-val-dir :alt 0] 100)
            (gen/return "ltr")]
          [(get weights [:attr-val-dir :alt 1] 100)
            (gen/return "rtl")]
          [(get weights [:attr-val-dir :alt 2] 100)
            (gen/return "auto")]])
        gmap (assoc gmap :attr-val-dir gen-attr-val-dir)

        gen-attr-val-spellcheck
        (gen/frequency [
          [(get weights [:attr-val-spellcheck :alt 0] 100)
            (gen/return "default")]
          [(get weights [:attr-val-spellcheck :alt 1] 100)
            (gen/return "true")]
          [(get weights [:attr-val-spellcheck :alt 2] 100)
            (gen/return "false")]])
        gmap (assoc gmap :attr-val-spellcheck gen-attr-val-spellcheck)

        gen-attr-val-tabindex
        (gen/return "STUB_tabindex")
        gmap (assoc gmap :attr-val-tabindex gen-attr-val-tabindex)

        gen-attr-val-slot
        (gen/return "STUB_slot")
        gmap (assoc gmap :attr-val-slot gen-attr-val-slot)

        gen-attr-val-contextmenu
        (gen/return "STUB_contextmenu")
        gmap (assoc gmap :attr-val-contextmenu gen-attr-val-contextmenu)

        gen-attr-val-dropzone
        (gen/frequency [
          [(get weights [:attr-val-dropzone :alt 0] 100)
            (gen/return "copy")]
          [(get weights [:attr-val-dropzone :alt 1] 100)
            (gen/return "move")]
          [(get weights [:attr-val-dropzone :alt 2] 100)
            (gen/return "link")]])
        gmap (assoc gmap :attr-val-dropzone gen-attr-val-dropzone)

        gen-attr-val-style
        (:css-assignments gmap)
        gmap (assoc gmap :attr-val-style gen-attr-val-style)

        gen-attr-val-title
        (gen/return "STUB_title")
        gmap (assoc gmap :attr-val-title gen-attr-val-title)

        gen-attr-val-contenteditable
        (gen/frequency [
          [(get weights [:attr-val-contenteditable :alt 0] 100)
            (gen/return "")]
          [(get weights [:attr-val-contenteditable :alt 1] 100)
            (gen/return "true")]
          [(get weights [:attr-val-contenteditable :alt 2] 100)
            (gen/return "false")]])
        gmap (assoc gmap :attr-val-contenteditable gen-attr-val-contenteditable)

        gen-attr-val-itemprop
        (gen/return "STUB_itemprop")
        gmap (assoc gmap :attr-val-itemprop gen-attr-val-itemprop)

        gen-attr-val-class
        (gen/return "STUB_class")
        gmap (assoc gmap :attr-val-class gen-attr-val-class)

        gen-attr-val-lang
        (gen/return "STUB_lang")
        gmap (assoc gmap :attr-val-lang gen-attr-val-lang)

        gen-attr-val-accesskey
        (gen/such-that not-empty (gen/vector
          (chuck/string-from-regex #"[A-za-z]")))
        gmap (assoc gmap :attr-val-accesskey gen-attr-val-accesskey)

        gen-attr-val-id
        (gen/return "STUB_id")
        gmap (assoc gmap :attr-val-id gen-attr-val-id)

        gen-attr-val-draggable
        (gen/frequency [
          [(get weights [:attr-val-draggable :alt 0] 100)
            (gen/return "true")]
          [(get weights [:attr-val-draggable :alt 1] 100)
            (gen/return "false")]])
        gmap (assoc gmap :attr-val-draggable gen-attr-val-draggable)

        gen-global-attribute
        (gen/frequency [
          [(get weights [:global-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "accesskey=\"")
              (:attr-val-accesskey gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "class=\"")
              (:attr-val-class gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "contenteditable=\"")
              (:attr-val-contenteditable gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "contextmenu=\"")
              (:attr-val-contextmenu gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "dir=\"")
              (:attr-val-dir gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "draggable=\"")
              (:attr-val-draggable gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "dropzone=\"")
              (:attr-val-dropzone gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 7] 100)
            (gen/return "hidden")]
          [(get weights [:global-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "id=\"")
              (:attr-val-id gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "itemprop=\"")
              (:attr-val-itemprop gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 10] 100)
            (gen/tuple
              (gen/return "lang=\"")
              (:attr-val-lang gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 11] 100)
            (gen/tuple
              (gen/return "slot=\"")
              (:attr-val-slot gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 12] 100)
            (gen/tuple
              (gen/return "spellcheck=\"")
              (:attr-val-spellcheck gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 13] 10000)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "style=\"")
              (:attr-val-style gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 14] 100)
            (gen/tuple
              (gen/return "tabindex=\"")
              (:attr-val-tabindex gmap)
              (gen/return "\""))]
          [(get weights [:global-attribute :alt 15] 100)
            (gen/tuple
              (gen/return "title=\"")
              (:attr-val-title gmap)
              (gen/return "\""))]])
        gmap (assoc gmap :global-attribute gen-global-attribute)

        gen-frame-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :frame-attribute gen-frame-attribute)

        gen-attr-val-ismap
        (gen/return "")
        gmap (assoc gmap :attr-val-ismap gen-attr-val-ismap)

        gen-attr-val-code
        (gen/return "STUB_code")
        gmap (assoc gmap :attr-val-code gen-attr-val-code)

        gen-attr-val-form
        (gen/return "STUB_form")
        gmap (assoc gmap :attr-val-form gen-attr-val-form)

        gen-attr-val-keytype
        (gen/return "STUB_keytype")
        gmap (assoc gmap :attr-val-keytype gen-attr-val-keytype)

        gen-hgroup-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :hgroup-attribute gen-hgroup-attribute)

        gen-var-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :var-attribute gen-var-attribute)

        gen-spacer-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :spacer-attribute gen-spacer-attribute)

        gen-rp-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :rp-attribute gen-rp-attribute)

        gen-noscript-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :noscript-attribute gen-noscript-attribute)

        gen-attr-val-default
        (gen/return "STUB_default")
        gmap (assoc gmap :attr-val-default gen-attr-val-default)

        gen-attr-val-srclang
        (gen/return "STUB_srclang")
        gmap (assoc gmap :attr-val-srclang gen-attr-val-srclang)

        gen-attr-val-src
        (gen/return "STUB_src")
        gmap (assoc gmap :attr-val-src gen-attr-val-src)

        gen-attr-val-kind
        (gen/return "STUB_kind")
        gmap (assoc gmap :attr-val-kind gen-attr-val-kind)

        gen-attr-val-label
        (gen/return "STUB_label")
        gmap (assoc gmap :attr-val-label gen-attr-val-label)

        gen-track-attribute
        (gen/frequency [
          [(get weights [:track-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "default=\"")
              (:attr-val-default gmap)
              (gen/return "\""))]
          [(get weights [:track-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "kind=\"")
              (:attr-val-kind gmap)
              (gen/return "\""))]
          [(get weights [:track-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "label=\"")
              (:attr-val-label gmap)
              (gen/return "\""))]
          [(get weights [:track-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:track-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "srclang=\"")
              (:attr-val-srclang gmap)
              (gen/return "\""))]
          [(get weights [:track-attribute :alt 5] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :track-attribute gen-track-attribute)

        gen-attr-val-scope
        (gen/return "STUB_scope")
        gmap (assoc gmap :attr-val-scope gen-attr-val-scope)

        gen-strike-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :strike-attribute gen-strike-attribute)

        gen-attr-val-target
        (gen/return "STUB_target")
        gmap (assoc gmap :attr-val-target gen-attr-val-target)

        gen-section-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :section-attribute gen-section-attribute)

        gen-pre-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :pre-attribute gen-pre-attribute)

        gen-attr-val-width
        (gen/return "STUB_width")
        gmap (assoc gmap :attr-val-width gen-attr-val-width)

        gen-attr-val-autosave
        (gen/return "STUB_autosave")
        gmap (assoc gmap :attr-val-autosave gen-attr-val-autosave)

        gen-attr-val-align
        (gen/frequency [
          [(get weights [:attr-val-align :alt 0] 100)
            (gen/return "left")]
          [(get weights [:attr-val-align :alt 1] 100)
            (gen/return "right")]
          [(get weights [:attr-val-align :alt 2] 100)
            (gen/return "center")]
          [(get weights [:attr-val-align :alt 3] 100)
            (gen/return "justify")]
          [(get weights [:attr-val-align :alt 4] 100)
            (gen/return "char")]
          [(get weights [:attr-val-align :alt 5] 100)
            (gen/return "top")]
          [(get weights [:attr-val-align :alt 6] 100)
            (gen/return "middle")]
          [(get weights [:attr-val-align :alt 7] 100)
            (gen/return "bottom")]])
        gmap (assoc gmap :attr-val-align gen-attr-val-align)

        gen-thead-attribute
        (gen/frequency [
          [(get weights [:thead-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:thead-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :thead-attribute gen-thead-attribute)

        gen-plaintext-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :plaintext-attribute gen-plaintext-attribute)

        gen-attr-val-type
        (gen/frequency [
          [(get weights [:attr-val-type :alt 0] 100)
            (gen/return "button")]
          [(get weights [:attr-val-type :alt 1] 100)
            (gen/return "checkbox")]
          [(get weights [:attr-val-type :alt 2] 100)
            (gen/return "color")]
          [(get weights [:attr-val-type :alt 3] 100)
            (gen/return "date")]
          [(get weights [:attr-val-type :alt 4] 100)
            (gen/return "datetime")]
          [(get weights [:attr-val-type :alt 5] 100)
            (gen/return "datetime-local")]
          [(get weights [:attr-val-type :alt 6] 100)
            (gen/return "email")]
          [(get weights [:attr-val-type :alt 7] 100)
            (gen/return "file")]
          [(get weights [:attr-val-type :alt 8] 100)
            (gen/return "hidden")]
          [(get weights [:attr-val-type :alt 9] 100)
            (gen/return "image")]
          [(get weights [:attr-val-type :alt 10] 100)
            (gen/return "month")]
          [(get weights [:attr-val-type :alt 11] 100)
            (gen/return "number")]
          [(get weights [:attr-val-type :alt 12] 100)
            (gen/return "password")]
          [(get weights [:attr-val-type :alt 13] 100)
            (gen/return "radio")]
          [(get weights [:attr-val-type :alt 14] 100)
            (gen/return "range")]
          [(get weights [:attr-val-type :alt 15] 100)
            (gen/return "reset")]
          [(get weights [:attr-val-type :alt 16] 100)
            (gen/return "search")]
          [(get weights [:attr-val-type :alt 17] 100)
            (gen/return "submit")]
          [(get weights [:attr-val-type :alt 18] 100)
            (gen/return "tel")]
          [(get weights [:attr-val-type :alt 19] 100)
            (gen/return "text")]
          [(get weights [:attr-val-type :alt 20] 100)
            (gen/return "time")]
          [(get weights [:attr-val-type :alt 21] 100)
            (gen/return "url")]
          [(get weights [:attr-val-type :alt 22] 100)
            (gen/return "week")]])
        gmap (assoc gmap :attr-val-type gen-attr-val-type)

        gen-attr-val-height
        (gen/return "STUB_height")
        gmap (assoc gmap :attr-val-height gen-attr-val-height)

        gen-embed-attribute
        (gen/frequency [
          [(get weights [:embed-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:embed-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:embed-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:embed-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:embed-attribute :alt 4] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :embed-attribute gen-embed-attribute)

        gen-multicol-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :multicol-attribute gen-multicol-attribute)

        gen-p-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :p-attribute gen-p-attribute)

        gen-attr-val-name
        (gen/return "STUB_name")
        gmap (assoc gmap :attr-val-name gen-attr-val-name)

        gen-map-attribute
        (gen/frequency [
          [(get weights [:map-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:map-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :map-attribute gen-map-attribute)

        gen-attr-val-method
        (gen/return "STUB_method")
        gmap (assoc gmap :attr-val-method gen-attr-val-method)]
    gmap))

(defn- html5-generators-part-1 [gmap weights]
  (let [
        gen-attr-val-content
        (gen/return "STUB_content")
        gmap (assoc gmap :attr-val-content gen-attr-val-content)

        gen-strong-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :strong-attribute gen-strong-attribute)

        gen-small-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :small-attribute gen-small-attribute)

        gen-big-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :big-attribute gen-big-attribute)

        gen-attr-val-cols
        (gen/return "STUB_cols")
        gmap (assoc gmap :attr-val-cols gen-attr-val-cols)

        gen-wbr-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :wbr-attribute gen-wbr-attribute)

        gen-blink-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :blink-attribute gen-blink-attribute)

        gen-xmp-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :xmp-attribute gen-xmp-attribute)

        gen-attr-val-datetime
        (gen/return "STUB_datetime")
        gmap (assoc gmap :attr-val-datetime gen-attr-val-datetime)

        gen-time-attribute
        (gen/frequency [
          [(get weights [:time-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "datetime=\"")
              (:attr-val-datetime gmap)
              (gen/return "\""))]
          [(get weights [:time-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :time-attribute gen-time-attribute)

        gen-attr-val-preload
        (gen/frequency [
          [(get weights [:attr-val-preload :alt 0] 100)
            (gen/return "none")]
          [(get weights [:attr-val-preload :alt 1] 100)
            (gen/return "metadata")]
          [(get weights [:attr-val-preload :alt 2] 100)
            (gen/return "auto")]
          [(get weights [:attr-val-preload :alt 3] 100)
            (gen/return "")]])
        gmap (assoc gmap :attr-val-preload gen-attr-val-preload)

        gen-attr-val-min
        (gen/return "STUB_min")
        gmap (assoc gmap :attr-val-min gen-attr-val-min)

        gen-attr-val-value
        (gen/return "STUB_value")
        gmap (assoc gmap :attr-val-value gen-attr-val-value)

        gen-attr-val-formaction
        (gen/return "STUB_formaction")
        gmap (assoc gmap :attr-val-formaction gen-attr-val-formaction)

        gen-button-attribute
        (gen/frequency [
          [(get weights [:button-attribute :alt 0] 100)
            (gen/return "autofocus")]
          [(get weights [:button-attribute :alt 1] 100)
            (gen/return "disabled")]
          [(get weights [:button-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:button-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "formaction=\"")
              (:attr-val-formaction gmap)
              (gen/return "\""))]
          [(get weights [:button-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:button-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:button-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:button-attribute :alt 7] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :button-attribute gen-button-attribute)

        gen-content-type
        (gen/frequency [
          [(get weights [:content-type :alt 0] 100)
            (gen/return ".jpg")]
          [(get weights [:content-type :alt 1] 100)
            (gen/return ".png")]
          [(get weights [:content-type :alt 2] 100)
            (gen/return ".doc")]
          [(get weights [:content-type :alt 3] 100)
            (gen/return "audio/*")]
          [(get weights [:content-type :alt 4] 100)
            (gen/return "video/*")]
          [(get weights [:content-type :alt 5] 100)
            (gen/return "image/*")]])
        gmap (assoc gmap :content-type gen-content-type)

        gen-opt-space
        (gen/return "")
        gmap (assoc gmap :opt-space gen-opt-space)

        gen-attr-val-accept
        (gen/tuple
          (:content-type gmap)
          (gen/vector
            (gen/tuple
              (:opt-space gmap)
              (:content-type gmap))))
        gmap (assoc gmap :attr-val-accept gen-attr-val-accept)

        gen-samp-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :samp-attribute gen-samp-attribute)

        gen-STUB-color
        (gen/frequency [
          [(get weights [:STUB-color :alt 0] 100)
            (chuck/string-from-regex #"#[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]")]
          [(get weights [:STUB-color :alt 1] 100)
            (gen/return "black")]
          [(get weights [:STUB-color :alt 2] 100)
            (gen/return "silver")]
          [(get weights [:STUB-color :alt 3] 100)
            (gen/return "gray")]
          [(get weights [:STUB-color :alt 4] 100)
            (gen/return "white")]
          [(get weights [:STUB-color :alt 5] 100)
            (gen/return "maroon")]
          [(get weights [:STUB-color :alt 6] 100)
            (gen/return "red")]
          [(get weights [:STUB-color :alt 7] 100)
            (gen/return "purple")]
          [(get weights [:STUB-color :alt 8] 100)
            (gen/return "fuchsia")]
          [(get weights [:STUB-color :alt 9] 100)
            (gen/return "green")]
          [(get weights [:STUB-color :alt 10] 100)
            (gen/return "lime")]
          [(get weights [:STUB-color :alt 11] 100)
            (gen/return "olive")]
          [(get weights [:STUB-color :alt 12] 100)
            (gen/return "yellow")]
          [(get weights [:STUB-color :alt 13] 100)
            (gen/return "navy")]
          [(get weights [:STUB-color :alt 14] 100)
            (gen/return "blue")]
          [(get weights [:STUB-color :alt 15] 100)
            (gen/return "teal")]
          [(get weights [:STUB-color :alt 16] 100)
            (gen/return "aqua")]])
        gmap (assoc gmap :STUB-color gen-STUB-color)

        gen-attr-val-buffered
        (gen/return "STUB_buffered")
        gmap (assoc gmap :attr-val-buffered gen-attr-val-buffered)

        gen-attr-val-required
        (gen/return "STUB_required")
        gmap (assoc gmap :attr-val-required gen-attr-val-required)

        gen-attr-val-integrity
        (gen/return "STUB_integrity")
        gmap (assoc gmap :attr-val-integrity gen-attr-val-integrity)

        gen-dfn-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dfn-attribute gen-dfn-attribute)

        gen-attr-val-start
        (gen/return "STUB_start")
        gmap (assoc gmap :attr-val-start gen-attr-val-start)

        gen-attr-val-srcdoc
        (gen/return "STUB_srcdoc")
        gmap (assoc gmap :attr-val-srcdoc gen-attr-val-srcdoc)

        gen-attr-val-seamless
        (gen/return "STUB_seamless")
        gmap (assoc gmap :attr-val-seamless gen-attr-val-seamless)

        gen-attr-val-sandbox
        (gen/return "STUB_sandbox")
        gmap (assoc gmap :attr-val-sandbox gen-attr-val-sandbox)

        gen-iframe-attribute
        (gen/frequency [
          [(get weights [:iframe-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "sandbox=\"")
              (:attr-val-sandbox gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "seamless=\"")
              (:attr-val-seamless gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "srcdoc=\"")
              (:attr-val-srcdoc gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:iframe-attribute :alt 8] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :iframe-attribute gen-iframe-attribute)

        gen-attr-val-ping
        (gen/return "STUB_ping")
        gmap (assoc gmap :attr-val-ping gen-attr-val-ping)

        gen-attr-val-download
        (gen/return "STUB_download")
        gmap (assoc gmap :attr-val-download gen-attr-val-download)

        gen-attr-val-hreflang
        (gen/return "STUB_hreflang")
        gmap (assoc gmap :attr-val-hreflang gen-attr-val-hreflang)

        gen-attr-val-coords
        (gen/return "STUB_coords")
        gmap (assoc gmap :attr-val-coords gen-attr-val-coords)

        gen-attr-val-href
        (gen/return "STUB_href")
        gmap (assoc gmap :attr-val-href gen-attr-val-href)

        gen-attr-val-rel
        (gen/return "STUB_rel")
        gmap (assoc gmap :attr-val-rel gen-attr-val-rel)

        gen-attr-val-shape
        (gen/return "STUB_shape")
        gmap (assoc gmap :attr-val-shape gen-attr-val-shape)

        gen-attr-val-alt
        (gen/return "STUB: this is alternate text")
        gmap (assoc gmap :attr-val-alt gen-attr-val-alt)

        gen-attr-val-media
        (gen/return "STUB_media")
        gmap (assoc gmap :attr-val-media gen-attr-val-media)

        gen-area-attribute
        (gen/frequency [
          [(get weights [:area-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "alt=\"")
              (:attr-val-alt gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "coords=\"")
              (:attr-val-coords gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "download=\"")
              (:attr-val-download gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "href=\"")
              (:attr-val-href gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "hreflang=\"")
              (:attr-val-hreflang gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "media=\"")
              (:attr-val-media gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "ping=\"")
              (:attr-val-ping gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "rel=\"")
              (:attr-val-rel gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "shape=\"")
              (:attr-val-shape gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "target=\"")
              (:attr-val-target gmap)
              (gen/return "\""))]
          [(get weights [:area-attribute :alt 10] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :area-attribute gen-area-attribute)

        gen-attr-val-bgcolor
        (:STUB-color gmap)
        gmap (assoc gmap :attr-val-bgcolor gen-attr-val-bgcolor)

        gen-tbody-attribute
        (gen/frequency [
          [(get weights [:tbody-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:tbody-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:tbody-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :tbody-attribute gen-tbody-attribute)

        gen-dt-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dt-attribute gen-dt-attribute)

        gen-attr-val-color
        (gen/return "STUB_color")
        gmap (assoc gmap :attr-val-color gen-attr-val-color)

        gen-font-attribute
        (gen/frequency [
          [(get weights [:font-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "color=\"")
              (:attr-val-color gmap)
              (gen/return "\""))]
          [(get weights [:font-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :font-attribute gen-font-attribute)

        gen-summary-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :summary-attribute gen-summary-attribute)

        gen-attr-val-challenge
        (gen/return "STUB_challenge")
        gmap (assoc gmap :attr-val-challenge gen-attr-val-challenge)

        gen-attr-val-for
        (gen/return "STUB_for")
        gmap (assoc gmap :attr-val-for gen-attr-val-for)

        gen-output-attribute
        (gen/frequency [
          [(get weights [:output-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "for=\"")
              (:attr-val-for gmap)
              (gen/return "\""))]
          [(get weights [:output-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:output-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:output-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :output-attribute gen-output-attribute)

        gen-attr-val-span
        (gen/return "STUB_span")
        gmap (assoc gmap :attr-val-span gen-attr-val-span)

        gen-colgroup-attribute
        (gen/frequency [
          [(get weights [:colgroup-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:colgroup-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:colgroup-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "span=\"")
              (:attr-val-span gmap)
              (gen/return "\""))]
          [(get weights [:colgroup-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :colgroup-attribute gen-colgroup-attribute)]
    gmap))

(defn- html5-generators-part-2 [gmap weights]
  (let [
        gen-figure-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :figure-attribute gen-figure-attribute)

        gen-attr-val-high
        (gen/return "STUB_high")
        gmap (assoc gmap :attr-val-high gen-attr-val-high)

        gen-attr-val-multiple
        (gen/return "STUB_multiple")
        gmap (assoc gmap :attr-val-multiple gen-attr-val-multiple)

        gen-attr-val-scoped
        (gen/return "STUB_scoped")
        gmap (assoc gmap :attr-val-scoped gen-attr-val-scoped)

        gen-i-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :i-attribute gen-i-attribute)

        gen-ul-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :ul-attribute gen-ul-attribute)

        gen-attr-val-size
        (gen/return "STUB_size")
        gmap (assoc gmap :attr-val-size gen-attr-val-size)

        gen-body-attribute
        (gen/frequency [
          [(get weights [:body-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:body-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (:global-attribute gmap)]])
        gmap (assoc gmap :body-attribute gen-body-attribute)

        gen-kbd-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :kbd-attribute gen-kbd-attribute)

        gen-em-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :em-attribute gen-em-attribute)

        gen-attr-val-reversed
        (gen/return "STUB_reversed")
        gmap (assoc gmap :attr-val-reversed gen-attr-val-reversed)

        gen-ol-attribute
        (gen/frequency [
          [(get weights [:ol-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "reversed=\"")
              (:attr-val-reversed gmap)
              (gen/return "\""))]
          [(get weights [:ol-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "start=\"")
              (:attr-val-start gmap)
              (gen/return "\""))]
          [(get weights [:ol-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :ol-attribute gen-ol-attribute)

        gen-label-attribute
        (gen/frequency [
          [(get weights [:label-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "for=\"")
              (:attr-val-for gmap)
              (gen/return "\""))]
          [(get weights [:label-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:label-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :label-attribute gen-label-attribute)

        gen-attr-val-list
        (gen/return "STUB_list")
        gmap (assoc gmap :attr-val-list gen-attr-val-list)

        gen-attr-val-autocomplete
        (gen/frequency [
          [(get weights [:attr-val-autocomplete :alt 0] 100)
            (gen/return "off")]
          [(get weights [:attr-val-autocomplete :alt 1] 100)
            (gen/return "on")]
          [(get weights [:attr-val-autocomplete :alt 2] 100)
            (gen/return "name")]
          [(get weights [:attr-val-autocomplete :alt 3] 100)
            (gen/return "honorific-prefix")]
          [(get weights [:attr-val-autocomplete :alt 4] 100)
            (gen/return "given-name")]
          [(get weights [:attr-val-autocomplete :alt 5] 100)
            (gen/return "additional-name")]
          [(get weights [:attr-val-autocomplete :alt 6] 100)
            (gen/return "family-name")]
          [(get weights [:attr-val-autocomplete :alt 7] 100)
            (gen/return "honorific-suffix")]
          [(get weights [:attr-val-autocomplete :alt 8] 100)
            (gen/return "nickname")]
          [(get weights [:attr-val-autocomplete :alt 9] 100)
            (gen/return "email")]
          [(get weights [:attr-val-autocomplete :alt 10] 100)
            (gen/return "username")]
          [(get weights [:attr-val-autocomplete :alt 11] 100)
            (gen/return "new-password")]
          [(get weights [:attr-val-autocomplete :alt 12] 100)
            (gen/return "current-password")]
          [(get weights [:attr-val-autocomplete :alt 13] 100)
            (gen/return "organization-title")]
          [(get weights [:attr-val-autocomplete :alt 14] 100)
            (gen/return "organization")]
          [(get weights [:attr-val-autocomplete :alt 15] 100)
            (gen/return "street-address")]
          [(get weights [:attr-val-autocomplete :alt 16] 100)
            (gen/return "address-line1")]
          [(get weights [:attr-val-autocomplete :alt 17] 100)
            (gen/return "address-line2")]
          [(get weights [:attr-val-autocomplete :alt 18] 100)
            (gen/return "address-line3")]
          [(get weights [:attr-val-autocomplete :alt 19] 100)
            (gen/return "address-level4")]
          [(get weights [:attr-val-autocomplete :alt 20] 100)
            (gen/return "address-level3")]
          [(get weights [:attr-val-autocomplete :alt 21] 100)
            (gen/return "address-level2")]
          [(get weights [:attr-val-autocomplete :alt 22] 100)
            (gen/return "address-level1")]
          [(get weights [:attr-val-autocomplete :alt 23] 100)
            (gen/return "country")]
          [(get weights [:attr-val-autocomplete :alt 24] 100)
            (gen/return "country-name")]
          [(get weights [:attr-val-autocomplete :alt 25] 100)
            (gen/return "postal-code")]
          [(get weights [:attr-val-autocomplete :alt 26] 100)
            (gen/return "cc-name")]
          [(get weights [:attr-val-autocomplete :alt 27] 100)
            (gen/return "cc-given-name")]
          [(get weights [:attr-val-autocomplete :alt 28] 100)
            (gen/return "cc-additional-name")]
          [(get weights [:attr-val-autocomplete :alt 29] 100)
            (gen/return "cc-family-name")]
          [(get weights [:attr-val-autocomplete :alt 30] 100)
            (gen/return "cc-number")]
          [(get weights [:attr-val-autocomplete :alt 31] 100)
            (gen/return "cc-exp")]
          [(get weights [:attr-val-autocomplete :alt 32] 100)
            (gen/return "cc-exp-month")]
          [(get weights [:attr-val-autocomplete :alt 33] 100)
            (gen/return "cc-exp-year")]
          [(get weights [:attr-val-autocomplete :alt 34] 100)
            (gen/return "cc-csc")]
          [(get weights [:attr-val-autocomplete :alt 35] 100)
            (gen/return "cc-type")]
          [(get weights [:attr-val-autocomplete :alt 36] 100)
            (gen/return "transaction-currency")]
          [(get weights [:attr-val-autocomplete :alt 37] 100)
            (gen/return "transaction-amount")]
          [(get weights [:attr-val-autocomplete :alt 38] 100)
            (gen/return "language")]
          [(get weights [:attr-val-autocomplete :alt 39] 100)
            (gen/return "bday")]
          [(get weights [:attr-val-autocomplete :alt 40] 100)
            (gen/return "bday-day")]
          [(get weights [:attr-val-autocomplete :alt 41] 100)
            (gen/return "bday-month")]
          [(get weights [:attr-val-autocomplete :alt 42] 100)
            (gen/return "bday-year")]
          [(get weights [:attr-val-autocomplete :alt 43] 100)
            (gen/return "sex")]
          [(get weights [:attr-val-autocomplete :alt 44] 100)
            (gen/return "tel")]
          [(get weights [:attr-val-autocomplete :alt 45] 100)
            (gen/return "url")]
          [(get weights [:attr-val-autocomplete :alt 46] 100)
            (gen/return "photo")]])
        gmap (assoc gmap :attr-val-autocomplete gen-attr-val-autocomplete)

        gen-attr-val-step
        (gen/return "STUB_step")
        gmap (assoc gmap :attr-val-step gen-attr-val-step)

        gen-attr-val-max
        (gen/return "STUB_max")
        gmap (assoc gmap :attr-val-max gen-attr-val-max)

        gen-attr-val-pattern
        (gen/return "STUB_pattern")
        gmap (assoc gmap :attr-val-pattern gen-attr-val-pattern)

        gen-attr-val-maxlength
        (gen/return "STUB_maxlength")
        gmap (assoc gmap :attr-val-maxlength gen-attr-val-maxlength)

        gen-attr-val-usemap
        (gen/return "STUB_usemap")
        gmap (assoc gmap :attr-val-usemap gen-attr-val-usemap)

        gen-attr-val-dirname
        (gen/return "STUB_dirname")
        gmap (assoc gmap :attr-val-dirname gen-attr-val-dirname)

        gen-attr-val-placeholder
        (gen/return "STUB_placeholder")
        gmap (assoc gmap :attr-val-placeholder gen-attr-val-placeholder)

        gen-attr-val-readonly
        (gen/return "STUB_readonly")
        gmap (assoc gmap :attr-val-readonly gen-attr-val-readonly)

        gen-input-attribute
        (gen/frequency [
          [(get weights [:input-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "accept=\"")
              (:attr-val-accept gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "alt=\"")
              (:attr-val-alt gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "autocomplete=\"")
              (:attr-val-autocomplete gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 3] 100)
            (gen/return "autofocus")]
          [(get weights [:input-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "autosave=\"")
              (:attr-val-autosave gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 5] 100)
            (gen/return "checked")]
          [(get weights [:input-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "dirname=\"")
              (:attr-val-dirname gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 7] 100)
            (gen/return "disabled")]
          [(get weights [:input-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "formaction=\"")
              (:attr-val-formaction gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 10] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 11] 100)
            (gen/tuple
              (gen/return "list=\"")
              (:attr-val-list gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 12] 100)
            (gen/tuple
              (gen/return "max=\"")
              (:attr-val-max gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 13] 100)
            (gen/tuple
              (gen/return "maxlength=\"")
              (:attr-val-maxlength gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 14] 100)
            (gen/tuple
              (gen/return "min=\"")
              (:attr-val-min gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 15] 100)
            (gen/tuple
              (gen/return "multiple=\"")
              (:attr-val-multiple gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 16] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 17] 100)
            (gen/tuple
              (gen/return "pattern=\"")
              (:attr-val-pattern gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 18] 100)
            (gen/tuple
              (gen/return "placeholder=\"")
              (:attr-val-placeholder gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 19] 100)
            (gen/tuple
              (gen/return "readonly=\"")
              (:attr-val-readonly gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 20] 100)
            (gen/tuple
              (gen/return "required=\"")
              (:attr-val-required gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 21] 100)
            (gen/tuple
              (gen/return "size=\"")
              (:attr-val-size gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 22] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 23] 100)
            (gen/tuple
              (gen/return "step=\"")
              (:attr-val-step gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 24] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 25] 100)
            (gen/tuple
              (gen/return "usemap=\"")
              (:attr-val-usemap gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 26] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 27] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:input-attribute :alt 28] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :input-attribute gen-input-attribute)

        gen-STUB-width
        (gen/frequency [
          [(get weights [:STUB-width :alt 0] 100)
            (gen/return "0")]
          [(get weights [:STUB-width :alt 1] 100)
            (chuck/string-from-regex #"[0-9]")]
          [(get weights [:STUB-width :alt 2] 100)
            (chuck/string-from-regex #"[0-9][0-9]")]
          [(get weights [:STUB-width :alt 3] 100)
            (chuck/string-from-regex #"[0-9][0-9][0-9]")]])
        gmap (assoc gmap :STUB-width gen-STUB-width)

        gen-s-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :s-attribute gen-s-attribute)

        gen-menu-attribute
        (gen/frequency [
          [(get weights [:menu-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:menu-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :menu-attribute gen-menu-attribute)

        gen-keygen-attribute
        (gen/frequency [
          [(get weights [:keygen-attribute :alt 0] 100)
            (gen/return "autofocus")]
          [(get weights [:keygen-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "challenge=\"")
              (:attr-val-challenge gmap)
              (gen/return "\""))]
          [(get weights [:keygen-attribute :alt 2] 100)
            (gen/return "disabled")]
          [(get weights [:keygen-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:keygen-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "keytype=\"")
              (:attr-val-keytype gmap)
              (gen/return "\""))]
          [(get weights [:keygen-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:keygen-attribute :alt 6] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :keygen-attribute gen-keygen-attribute)

        gen-attr-val-codebase
        (gen/return "STUB_codebase")
        gmap (assoc gmap :attr-val-codebase gen-attr-val-codebase)

        gen-applet-attribute
        (gen/frequency [
          [(get weights [:applet-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:applet-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "alt=\"")
              (:attr-val-alt gmap)
              (gen/return "\""))]
          [(get weights [:applet-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "code=\"")
              (:attr-val-code gmap)
              (gen/return "\""))]
          [(get weights [:applet-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "codebase=\"")
              (:attr-val-codebase gmap)
              (gen/return "\""))]
          [(get weights [:applet-attribute :alt 4] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :applet-attribute gen-applet-attribute)

        gen-attr-val-selected
        (gen/return "STUB_selected")
        gmap (assoc gmap :attr-val-selected gen-attr-val-selected)

        gen-rt-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :rt-attribute gen-rt-attribute)

        gen-comment
        (gen/tuple
          (gen/return "<!--")
          (chuck/string-from-regex #"(?:[A-Za-z0-9_<>/\\ .]|-[A-Za-z0-9_<>/\\ .])*")
          (gen/return "-->"))
        gmap (assoc gmap :comment gen-comment)

        gen-element-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :element-attribute gen-element-attribute)

        gen-attr-val-poster
        (gen/return "STUB_poster")
        gmap (assoc gmap :attr-val-poster gen-attr-val-poster)

        gen-attr-val-icon
        (gen/return "STUB_icon")
        gmap (assoc gmap :attr-val-icon gen-attr-val-icon)

        gen-address-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :address-attribute gen-address-attribute)

        gen-isindex-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :isindex-attribute gen-isindex-attribute)

        gen-attr-val-novalidate
        (gen/return "STUB_novalidate")
        gmap (assoc gmap :attr-val-novalidate gen-attr-val-novalidate)

        gen-figcaption-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :figcaption-attribute gen-figcaption-attribute)

        gen-shadow-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :shadow-attribute gen-shadow-attribute)

        gen-optgroup-attribute
        (gen/frequency [
          [(get weights [:optgroup-attribute :alt 0] 100)
            (gen/return "disabled")]
          [(get weights [:optgroup-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :optgroup-attribute gen-optgroup-attribute)

        gen-bgsound-attribute
        (gen/frequency [
          [(get weights [:bgsound-attribute :alt 0] 100)
            (gen/return "loop")]
          [(get weights [:bgsound-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :bgsound-attribute gen-bgsound-attribute)

        gen-progress-attribute
        (gen/frequency [
          [(get weights [:progress-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:progress-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "max=\"")
              (:attr-val-max gmap)
              (gen/return "\""))]
          [(get weights [:progress-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:progress-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :progress-attribute gen-progress-attribute)

        gen-attr-val-cite
        (gen/return "STUB_cite")
        gmap (assoc gmap :attr-val-cite gen-attr-val-cite)

        gen-del-attribute
        (gen/frequency [
          [(get weights [:del-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "cite=\"")
              (:attr-val-cite gmap)
              (gen/return "\""))]
          [(get weights [:del-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "datetime=\"")
              (:attr-val-datetime gmap)
              (gen/return "\""))]
          [(get weights [:del-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :del-attribute gen-del-attribute)

        gen-attr-val-rowspan
        (gen/return "STUB_rowspan")
        gmap (assoc gmap :attr-val-rowspan gen-attr-val-rowspan)

        gen-span-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :span-attribute gen-span-attribute)

        gen-attr-val-open
        (gen/return "STUB_open")
        gmap (assoc gmap :attr-val-open gen-attr-val-open)

        gen-style-attribute
        (gen/frequency [
          [(get weights [:style-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "media=\"")
              (:attr-val-media gmap)
              (gen/return "\""))]
          [(get weights [:style-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "scoped=\"")
              (:attr-val-scoped gmap)
              (gen/return "\""))]
          [(get weights [:style-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:style-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :style-attribute gen-style-attribute)]
    gmap))

(defn- html5-generators-part-3 [gmap weights]
  (let [
        gen-frameset-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :frameset-attribute gen-frameset-attribute)

        gen-ins-attribute
        (gen/frequency [
          [(get weights [:ins-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "cite=\"")
              (:attr-val-cite gmap)
              (gen/return "\""))]
          [(get weights [:ins-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "datetime=\"")
              (:attr-val-datetime gmap)
              (gen/return "\""))]
          [(get weights [:ins-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :ins-attribute gen-ins-attribute)

        gen-nav-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :nav-attribute gen-nav-attribute)

        gen-name
        (chuck/string-from-regex #"[A-Za-z_:][A-Za-z_:\-.0-9]*")
        gmap (assoc gmap :name gen-name)

        gen-entity-ref
        (gen/tuple
          (gen/return "&")
          (:name gmap)
          (gen/return ";"))
        gmap (assoc gmap :entity-ref gen-entity-ref)

        gen-attr-val-radiogroup
        (gen/return "STUB_radiogroup")
        gmap (assoc gmap :attr-val-radiogroup gen-attr-val-radiogroup)

        gen-rtc-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :rtc-attribute gen-rtc-attribute)

        gen-datalist-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :datalist-attribute gen-datalist-attribute)

        gen-code-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :code-attribute gen-code-attribute)

        gen-abbr-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :abbr-attribute gen-abbr-attribute)

        gen-attr-val-headers
        (gen/return "STUB_headers")
        gmap (assoc gmap :attr-val-headers gen-attr-val-headers)

        gen-attr-val-srcset
        (gen/return "STUB_srcset")
        gmap (assoc gmap :attr-val-srcset gen-attr-val-srcset)

        gen-attr-val-data
        (gen/return "STUB_data")
        gmap (assoc gmap :attr-val-data gen-attr-val-data)

        gen-attr-val-border
        (:STUB-width gmap)
        gmap (assoc gmap :attr-val-border gen-attr-val-border)

        gen-object-attribute
        (gen/frequency [
          [(get weights [:object-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "border=\"")
              (:attr-val-border gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "data=\"")
              (:attr-val-data gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "usemap=\"")
              (:attr-val-usemap gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:object-attribute :alt 8] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :object-attribute gen-object-attribute)

        gen-tr-attribute
        (gen/frequency [
          [(get weights [:tr-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:tr-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:tr-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :tr-attribute gen-tr-attribute)

        gen-dir-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dir-attribute gen-dir-attribute)

        gen-STUB-uri
        (gen/frequency [
          [(get weights [:STUB-uri :alt 0] 100)
            (gen/return "http://STUB.com/STUB/STUB")]
          [(get weights [:STUB-uri :alt 1] 100)
            (gen/return "https://STUB.com/STUB/STUB")]])
        gmap (assoc gmap :STUB-uri gen-STUB-uri)

        gen-attr-val-action
        (:STUB-uri gmap)
        gmap (assoc gmap :attr-val-action gen-attr-val-action)

        gen-char-ref-dec
        (gen/frequency [
          [(get weights [:char-ref-dec :alt 0] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 1] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1-9][0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 2] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1-9][0-9][0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 3] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1-9][0-9][0-9][0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 4] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1-9][0-9][0-9][0-9][0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 5] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1-9][0-9][0-9][0-9][0-9][0-9]")
              (gen/return ";"))]
          [(get weights [:char-ref-dec :alt 6] 100)
            (gen/tuple
              (gen/return "&#")
              (chuck/string-from-regex #"[1][0-9][0-9][0-9][0-9][0-9][0-9]")
              (gen/return ";"))]])
        gmap (assoc gmap :char-ref-dec gen-char-ref-dec)

        gen-char-ref-hex
        (gen/frequency [
          [(get weights [:char-ref-hex :alt 0] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[0-9A-F]")
              (gen/return ";"))]
          [(get weights [:char-ref-hex :alt 1] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[1-9A-F][0-9A-F]")
              (gen/return ";"))]
          [(get weights [:char-ref-hex :alt 2] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[1-9A-F][0-9A-F][0-9A-F]")
              (gen/return ";"))]
          [(get weights [:char-ref-hex :alt 3] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[1-9A-F][0-9A-F][0-9A-F][0-9A-F]")
              (gen/return ";"))]
          [(get weights [:char-ref-hex :alt 4] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[1-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]")
              (gen/return ";"))]
          [(get weights [:char-ref-hex :alt 5] 100)
            (gen/tuple
              (gen/return "&#x")
              (chuck/string-from-regex #"[1][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]")
              (gen/return ";"))]])
        gmap (assoc gmap :char-ref-hex gen-char-ref-hex)

        gen-reference
        (gen/frequency [
          [(get weights [:reference :alt 0] 100)
            (:entity-ref gmap)]
          [(get weights [:reference :alt 1] 100)
            (:char-ref-dec gmap)]
          [(get weights [:reference :alt 2] 100)
            (:char-ref-hex gmap)]])
        gmap (assoc gmap :reference gen-reference)

        gen-attr-val-summary
        (gen/return "STUB_summary")
        gmap (assoc gmap :attr-val-summary gen-attr-val-summary)

        gen-attr-val-rows
        (gen/return "STUB_rows")
        gmap (assoc gmap :attr-val-rows gen-attr-val-rows)

        gen-sup-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :sup-attribute gen-sup-attribute)

        gen-attr-val-colspan
        (gen/return "STUB_colspan")
        gmap (assoc gmap :attr-val-colspan gen-attr-val-colspan)

        gen-th-attribute
        (gen/frequency [
          [(get weights [:th-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "colspan=\"")
              (:attr-val-colspan gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "headers=\"")
              (:attr-val-headers gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "rowspan=\"")
              (:attr-val-rowspan gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "scope=\"")
              (:attr-val-scope gmap)
              (gen/return "\""))]
          [(get weights [:th-attribute :alt 6] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :th-attribute gen-th-attribute)

        gen-slot-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :slot-attribute gen-slot-attribute)

        gen-nextid-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :nextid-attribute gen-nextid-attribute)

        gen-dd-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dd-attribute gen-dd-attribute)

        gen-option-attribute
        (gen/frequency [
          [(get weights [:option-attribute :alt 0] 100)
            (gen/return "disabled")]
          [(get weights [:option-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "selected=\"")
              (:attr-val-selected gmap)
              (gen/return "\""))]
          [(get weights [:option-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:option-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :option-attribute gen-option-attribute)

        gen-select-attribute
        (gen/frequency [
          [(get weights [:select-attribute :alt 0] 100)
            (gen/return "autofocus")]
          [(get weights [:select-attribute :alt 1] 100)
            (gen/return "disabled")]
          [(get weights [:select-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:select-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "multiple=\"")
              (:attr-val-multiple gmap)
              (gen/return "\""))]
          [(get weights [:select-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:select-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "required=\"")
              (:attr-val-required gmap)
              (gen/return "\""))]
          [(get weights [:select-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "size=\"")
              (:attr-val-size gmap)
              (gen/return "\""))]
          [(get weights [:select-attribute :alt 7] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :select-attribute gen-select-attribute)

        gen-sub-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :sub-attribute gen-sub-attribute)

        gen-footer-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :footer-attribute gen-footer-attribute)

        gen-caption-attribute
        (gen/frequency [
          [(get weights [:caption-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:caption-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :caption-attribute gen-caption-attribute)

        gen-tfoot-attribute
        (gen/frequency [
          [(get weights [:tfoot-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:tfoot-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:tfoot-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :tfoot-attribute gen-tfoot-attribute)

        gen-char-encoding
        (gen/frequency [
          [(get weights [:char-encoding :alt 0] 100)
            (gen/return "UTF-8")]
          [(get weights [:char-encoding :alt 1] 100)
            (gen/return "UTF8")]
          [(get weights [:char-encoding :alt 2] 100)
            (gen/return "UTF8")]
          [(get weights [:char-encoding :alt 3] 100)
            (gen/return "ISO-8859-8-I")]
          [(get weights [:char-encoding :alt 4] 100)
            (gen/return "US-ASCII")]
          [(get weights [:char-encoding :alt 5] 100)
            (gen/return "ISO-8859-1")]])
        gmap (assoc gmap :char-encoding gen-char-encoding)

        gen-attr-val-charset
        (:char-encoding gmap)
        gmap (assoc gmap :attr-val-charset gen-attr-val-charset)

        gen-template-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :template-attribute gen-template-attribute)

        gen-main-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :main-attribute gen-main-attribute)

        gen-video-attribute
        (gen/frequency [
          [(get weights [:video-attribute :alt 0] 100)
            (gen/return "autoplay")]
          [(get weights [:video-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "buffered=\"")
              (:attr-val-buffered gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 2] 100)
            (gen/return "controls")]
          [(get weights [:video-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 4] 100)
            (gen/return "loop")]
          [(get weights [:video-attribute :alt 5] 100)
            (gen/return "muted")]
          [(get weights [:video-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "poster=\"")
              (:attr-val-poster gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "preload=\"")
              (:attr-val-preload gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:video-attribute :alt 10] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :video-attribute gen-video-attribute)

        gen-attr-val-wrap
        (gen/return "STUB_wrap")
        gmap (assoc gmap :attr-val-wrap gen-attr-val-wrap)

        gen-textarea-attribute
        (gen/frequency [
          [(get weights [:textarea-attribute :alt 0] 100)
            (gen/return "autofocus")]
          [(get weights [:textarea-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "cols=\"")
              (:attr-val-cols gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "dirname=\"")
              (:attr-val-dirname gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 3] 100)
            (gen/return "disabled")]
          [(get weights [:textarea-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "maxlength=\"")
              (:attr-val-maxlength gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "placeholder=\"")
              (:attr-val-placeholder gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "readonly=\"")
              (:attr-val-readonly gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "required=\"")
              (:attr-val-required gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 10] 100)
            (gen/tuple
              (gen/return "rows=\"")
              (:attr-val-rows gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 11] 100)
            (gen/tuple
              (gen/return "wrap=\"")
              (:attr-val-wrap gmap)
              (gen/return "\""))]
          [(get weights [:textarea-attribute :alt 12] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :textarea-attribute gen-textarea-attribute)

        gen-attr-val-enctype
        (gen/return "STUB_enctype")
        gmap (assoc gmap :attr-val-enctype gen-attr-val-enctype)

        gen-acronym-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :acronym-attribute gen-acronym-attribute)

        gen-attr-val-sizes
        (gen/return "STUB_sizes")
        gmap (assoc gmap :attr-val-sizes gen-attr-val-sizes)

        gen-link-attribute
        (gen/frequency [
          [(get weights [:link-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "href=\"")
              (:attr-val-href gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "hreflang=\"")
              (:attr-val-hreflang gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "integrity=\"")
              (:attr-val-integrity gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "media=\"")
              (:attr-val-media gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "rel=\"")
              (:attr-val-rel gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "sizes=\"")
              (:attr-val-sizes gmap)
              (gen/return "\""))]
          [(get weights [:link-attribute :alt 6] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :link-attribute gen-link-attribute)

        gen-base-attribute
        (gen/frequency [
          [(get weights [:base-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "href=\"")
              (:attr-val-href gmap)
              (gen/return "\""))]
          [(get weights [:base-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "target=\"")
              (:attr-val-target gmap)
              (gen/return "\""))]
          [(get weights [:base-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :base-attribute gen-base-attribute)

        gen-dl-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dl-attribute gen-dl-attribute)

        gen-hr-attribute
        (gen/frequency [
          [(get weights [:hr-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:hr-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "color=\"")
              (:attr-val-color gmap)
              (gen/return "\""))]
          [(get weights [:hr-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :hr-attribute gen-hr-attribute)]
    gmap))

(defn- html5-generators-part-4 [gmap weights]
  (let [
        gen-audio-attribute
        (gen/frequency [
          [(get weights [:audio-attribute :alt 0] 100)
            (gen/return "autoplay")]
          [(get weights [:audio-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "buffered=\"")
              (:attr-val-buffered gmap)
              (gen/return "\""))]
          [(get weights [:audio-attribute :alt 2] 100)
            (gen/return "controls")]
          [(get weights [:audio-attribute :alt 3] 100)
            (gen/return "loop")]
          [(get weights [:audio-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "preload=\"")
              (:attr-val-preload gmap)
              (gen/return "\""))]
          [(get weights [:audio-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:audio-attribute :alt 6] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :audio-attribute gen-audio-attribute)

        gen-mark-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :mark-attribute gen-mark-attribute)

        gen-tt-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :tt-attribute gen-tt-attribute)

        gen-blockquote-attribute
        (gen/frequency [
          [(get weights [:blockquote-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "cite=\"")
              (:attr-val-cite gmap)
              (gen/return "\""))]
          [(get weights [:blockquote-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :blockquote-attribute gen-blockquote-attribute)

        gen-attr-val-http-equiv
        (gen/return "STUB_http-equiv")
        gmap (assoc gmap :attr-val-http-equiv gen-attr-val-http-equiv)

        gen-command-attribute
        (gen/frequency [
          [(get weights [:command-attribute :alt 0] 100)
            (gen/return "checked")]
          [(get weights [:command-attribute :alt 1] 100)
            (gen/return "disabled")]
          [(get weights [:command-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "icon=\"")
              (:attr-val-icon gmap)
              (gen/return "\""))]
          [(get weights [:command-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "radiogroup=\"")
              (:attr-val-radiogroup gmap)
              (gen/return "\""))]
          [(get weights [:command-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:command-attribute :alt 5] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :command-attribute gen-command-attribute)

        gen-attr-val-low
        (gen/return "STUB_low")
        gmap (assoc gmap :attr-val-low gen-attr-val-low)

        gen-marquee-attribute
        (gen/frequency [
          [(get weights [:marquee-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:marquee-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/return "loop")]
          [(get weights [:marquee-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :marquee-attribute gen-marquee-attribute)

        gen-b-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :b-attribute gen-b-attribute)

        gen-details-attribute
        (gen/frequency [
          [(get weights [:details-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "open=\"")
              (:attr-val-open gmap)
              (gen/return "\""))]
          [(get weights [:details-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :details-attribute gen-details-attribute)

        gen-meta-attribute
        (gen/frequency [
          [(get weights [:meta-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "charset=\"")
              (:attr-val-charset gmap)
              (gen/return "\""))]
          [(get weights [:meta-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "content=\"")
              (:attr-val-content gmap)
              (gen/return "\""))]
          [(get weights [:meta-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "http-equiv=\"")
              (:attr-val-http-equiv gmap)
              (gen/return "\""))]
          [(get weights [:meta-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:meta-attribute :alt 4] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :meta-attribute gen-meta-attribute)

        gen-space
        (gen/tuple (gen/return " "))
        gmap (assoc gmap :space gen-space)

        gen-attr-val-accept-charset
        (gen/frequency [
          [(get weights [:attr-val-accept-charset :alt 0] 100)
            (gen/return "UNKNOWN")]
          [(get weights [:attr-val-accept-charset :alt 1] 100)
            (gen/tuple
              (:char-encoding gmap)
              (gen/vector
                (gen/tuple
                  (:space gmap)
                  (:char-encoding gmap))))]])
        gmap (assoc gmap :attr-val-accept-charset gen-attr-val-accept-charset)

        gen-header-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :header-attribute gen-header-attribute)

        gen-attr-val-optimum
        (gen/return "STUB_optimum")
        gmap (assoc gmap :attr-val-optimum gen-attr-val-optimum)

        gen-meter-attribute
        (gen/frequency [
          [(get weights [:meter-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "high=\"")
              (:attr-val-high gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "low=\"")
              (:attr-val-low gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "max=\"")
              (:attr-val-max gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "min=\"")
              (:attr-val-min gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "optimum=\"")
              (:attr-val-optimum gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:meter-attribute :alt 7] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :meter-attribute gen-meter-attribute)

        gen-br-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :br-attribute gen-br-attribute)

        gen-listing-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :listing-attribute gen-listing-attribute)

        gen-center-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :center-attribute gen-center-attribute)

        gen-td-attribute
        (gen/frequency [
          [(get weights [:td-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:td-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:td-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "colspan=\"")
              (:attr-val-colspan gmap)
              (gen/return "\""))]
          [(get weights [:td-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "headers=\"")
              (:attr-val-headers gmap)
              (gen/return "\""))]
          [(get weights [:td-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "rowspan=\"")
              (:attr-val-rowspan gmap)
              (gen/return "\""))]
          [(get weights [:td-attribute :alt 5] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :td-attribute gen-td-attribute)

        gen-aside-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :aside-attribute gen-aside-attribute)

        gen-char-data
        (gen/frequency [
          [(get weights [:char-data :alt 0] 100)
            (gen/return " ")]
          [(get weights [:char-data :alt 1] 100)
            (gen/return "p")]
          [(get weights [:char-data :alt 2] 100)
            (gen/return "&#x00c9;")]
          [(get weights [:char-data :alt 3] 100)
            (gen/return "X")]])
        gmap (assoc gmap :char-data gen-char-data)

        gen-content
        (gen/frequency [
          [(get weights [:content :alt 0] 100)
            (:char-data gmap)]
          [(get weights [:content :alt 1] 0)    ;; ** adjusted by config ***
            (:reference gmap)]
          [(get weights [:content :alt 2] 100)
            (:comment gmap)]])
        gmap (assoc gmap :content gen-content)

        gen-attr-val-language
        (gen/return "STUB_language")
        gmap (assoc gmap :attr-val-language gen-attr-val-language)

        gen-script-attribute
        (gen/frequency [
          [(get weights [:script-attribute :alt 0] 100)
            (gen/return "async")]
          [(get weights [:script-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "charset=\"")
              (:attr-val-charset gmap)
              (gen/return "\""))]
          [(get weights [:script-attribute :alt 2] 100)
            (gen/return "defer")]
          [(get weights [:script-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "integrity=\"")
              (:attr-val-integrity gmap)
              (gen/return "\""))]
          [(get weights [:script-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "language=\"")
              (:attr-val-language gmap)
              (gen/return "\""))]
          [(get weights [:script-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:script-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:script-attribute :alt 7] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :script-attribute gen-script-attribute)

        gen-data-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :data-attribute gen-data-attribute)

        gen-bdo-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :bdo-attribute gen-bdo-attribute)

        gen-li-attribute
        (gen/frequency [
          [(get weights [:li-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:li-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :li-attribute gen-li-attribute)

        gen-u-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :u-attribute gen-u-attribute)

        gen-basefont-attribute
        (gen/frequency [
          [(get weights [:basefont-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "color=\"")
              (:attr-val-color gmap)
              (gen/return "\""))]
          [(get weights [:basefont-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :basefont-attribute gen-basefont-attribute)

        gen-a-attribute
        (gen/frequency [
          [(get weights [:a-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "download=\"")
              (:attr-val-download gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "href=\"")
              (:attr-val-href gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "hreflang=\"")
              (:attr-val-hreflang gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "media=\"")
              (:attr-val-media gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "ping=\"")
              (:attr-val-ping gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "rel=\"")
              (:attr-val-rel gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "shape=\"")
              (:attr-val-shape gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "target=\"")
              (:attr-val-target gmap)
              (gen/return "\""))]
          [(get weights [:a-attribute :alt 8] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :a-attribute gen-a-attribute)

        gen-dialog-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :dialog-attribute gen-dialog-attribute)

        gen-menuitem-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :menuitem-attribute gen-menuitem-attribute)

        gen-h1–h6-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :h1–h6-attribute gen-h1–h6-attribute)

        gen-ruby-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :ruby-attribute gen-ruby-attribute)

        gen-legend-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :legend-attribute gen-legend-attribute)

        gen-col-attribute
        (gen/frequency [
          [(get weights [:col-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:col-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:col-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "span=\"")
              (:attr-val-span gmap)
              (gen/return "\""))]
          [(get weights [:col-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :col-attribute gen-col-attribute)

        gen-cite-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :cite-attribute gen-cite-attribute)

        gen-canvas-attribute
        (gen/frequency [
          [(get weights [:canvas-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:canvas-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:canvas-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :canvas-attribute gen-canvas-attribute)

        gen-table-attribute
        (gen/frequency [
          [(get weights [:table-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:table-attribute :alt 1] 10)    ;; ** adjusted by config ***
            (gen/tuple
              (gen/return "bgcolor=\"")
              (:attr-val-bgcolor gmap)
              (gen/return "\""))]
          [(get weights [:table-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "border=\"")
              (:attr-val-border gmap)
              (gen/return "\""))]
          [(get weights [:table-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "summary=\"")
              (:attr-val-summary gmap)
              (gen/return "\""))]
          [(get weights [:table-attribute :alt 4] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :table-attribute gen-table-attribute)

        gen-form-attribute
        (gen/frequency [
          [(get weights [:form-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "accept=\"")
              (:attr-val-accept gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "accept-charset=\"")
              (:attr-val-accept-charset gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "action=\"")
              (:attr-val-action gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "autocomplete=\"")
              (:attr-val-autocomplete gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 4] 100)
            (gen/tuple
              (gen/return "enctype=\"")
              (:attr-val-enctype gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "method=\"")
              (:attr-val-method gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "novalidate=\"")
              (:attr-val-novalidate gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "target=\"")
              (:attr-val-target gmap)
              (gen/return "\""))]
          [(get weights [:form-attribute :alt 9] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :form-attribute gen-form-attribute)

        gen-noembed-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :noembed-attribute gen-noembed-attribute)

        gen-param-attribute
        (gen/frequency [
          [(get weights [:param-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:param-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "value=\"")
              (:attr-val-value gmap)
              (gen/return "\""))]
          [(get weights [:param-attribute :alt 2] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :param-attribute gen-param-attribute)

        gen-article-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :article-attribute gen-article-attribute)

        gen-q-attribute
        (gen/frequency [
          [(get weights [:q-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "cite=\"")
              (:attr-val-cite gmap)
              (gen/return "\""))]
          [(get weights [:q-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :q-attribute gen-q-attribute)

        gen-fieldset-attribute
        (gen/frequency [
          [(get weights [:fieldset-attribute :alt 0] 100)
            (gen/return "disabled")]
          [(get weights [:fieldset-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "form=\"")
              (:attr-val-form gmap)
              (gen/return "\""))]
          [(get weights [:fieldset-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "name=\"")
              (:attr-val-name gmap)
              (gen/return "\""))]
          [(get weights [:fieldset-attribute :alt 3] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :fieldset-attribute gen-fieldset-attribute)

        gen-img-attribute
        (gen/frequency [
          [(get weights [:img-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "align=\"")
              (:attr-val-align gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "alt=\"")
              (:attr-val-alt gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "border=\"")
              (:attr-val-border gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "height=\"")
              (:attr-val-height gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 4] 100)
            (gen/return "ismap")]
          [(get weights [:img-attribute :alt 5] 100)
            (gen/tuple
              (gen/return "sizes=\"")
              (:attr-val-sizes gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 6] 100)
            (gen/tuple
              (gen/return "src=\"")
              misc-gen/image-path
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 7] 100)
            (gen/tuple
              (gen/return "srcset=\"")
              (:attr-val-srcset gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 8] 100)
            (gen/tuple
              (gen/return "usemap=\"")
              (:attr-val-usemap gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 9] 100)
            (gen/tuple
              (gen/return "width=\"")
              (:attr-val-width gmap)
              (gen/return "\""))]
          [(get weights [:img-attribute :alt 10] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :img-attribute gen-img-attribute)

        gen-bdi-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :bdi-attribute gen-bdi-attribute)

        gen-source-attribute
        (gen/frequency [
          [(get weights [:source-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "media=\"")
              (:attr-val-media gmap)
              (gen/return "\""))]
          [(get weights [:source-attribute :alt 1] 100)
            (gen/tuple
              (gen/return "sizes=\"")
              (:attr-val-sizes gmap)
              (gen/return "\""))]
          [(get weights [:source-attribute :alt 2] 100)
            (gen/tuple
              (gen/return "src=\"")
              (:attr-val-src gmap)
              (gen/return "\""))]
          [(get weights [:source-attribute :alt 3] 100)
            (gen/tuple
              (gen/return "type=\"")
              (:attr-val-type gmap)
              (gen/return "\""))]
          [(get weights [:source-attribute :alt 4] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :source-attribute gen-source-attribute)

        gen-div-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :div-attribute gen-div-attribute)]
    gmap))

(defn- html5-generators-part-5 [gmap weights]
  (let [
        gen-content-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :content-attribute gen-content-attribute)

        gen-element
        (gen/recursive-gen
          (fn [inner]
            (gen/frequency [
              [(get weights [:element :alt 0] 100)
                (gen/tuple
                  (gen/return "<a")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:a-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 0 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 0 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</a>"))]
              [(get weights [:element :alt 1] 100)
                (gen/tuple
                  (gen/return "<abbr")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:abbr-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 1 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 1 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</abbr>"))]
              [(get weights [:element :alt 2] 100)
                (gen/tuple
                  (gen/return "<acronym")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:acronym-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 2 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 2 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</acronym>"))]
              [(get weights [:element :alt 3] 100)
                (gen/tuple
                  (gen/return "<address")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:address-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 3 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 3 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</address>"))]
              [(get weights [:element :alt 4] 100)
                (gen/tuple
                  (gen/return "<applet")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:applet-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 4 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 4 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</applet>"))]
              [(get weights [:element :alt 5] 100)
                (gen/tuple
                  (gen/return "<area")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:area-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 6] 100)
                (gen/tuple
                  (gen/return "<article")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:article-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 6 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 6 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</article>"))]
              [(get weights [:element :alt 7] 100)
                (gen/tuple
                  (gen/return "<aside")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:aside-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 7 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 7 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</aside>"))]
              [(get weights [:element :alt 8] 100)
                (gen/tuple
                  (gen/return "<audio")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:audio-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 8 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 8 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</audio>"))]
              [(get weights [:element :alt 9] 100)
                (gen/tuple
                  (gen/return "<b")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:b-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 9 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 9 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</b>"))]
              [(get weights [:element :alt 10] 100)
                (gen/tuple
                  (gen/return "<base")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:base-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 11] 100)
                (gen/tuple
                  (gen/return "<basefont")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:basefont-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 11 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 11 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</basefont>"))]
              [(get weights [:element :alt 12] 100)
                (gen/tuple
                  (gen/return "<bdi")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:bdi-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 12 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 12 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</bdi>"))]
              [(get weights [:element :alt 13] 100)
                (gen/tuple
                  (gen/return "<bdo")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:bdo-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 13 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 13 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</bdo>"))]
              [(get weights [:element :alt 14] 100)
                (gen/tuple
                  (gen/return "<bgsound")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:bgsound-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 14 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 14 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</bgsound>"))]
              [(get weights [:element :alt 15] 100)
                (gen/tuple
                  (gen/return "<big")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:big-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 15 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 15 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</big>"))]
              [(get weights [:element :alt 16] 100)
                (gen/tuple
                  (gen/return "<blink")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:blink-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 16 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 16 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</blink>"))]
              [(get weights [:element :alt 17] 100)
                (gen/tuple
                  (gen/return "<blockquote")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:blockquote-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 17 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 17 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</blockquote>"))]
              [(get weights [:element :alt 18] 100)
                (gen/tuple
                  (gen/return "<br")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:br-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 19] 100)
                (gen/tuple
                  (gen/return "<button")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:button-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 19 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 19 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</button>"))]
              [(get weights [:element :alt 20] 100)
                (gen/tuple
                  (gen/return "<canvas")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:canvas-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 20 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 20 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</canvas>"))]
              [(get weights [:element :alt 21] 100)
                (gen/tuple
                  (gen/return "<caption")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:caption-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 21 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 21 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</caption>"))]
              [(get weights [:element :alt 22] 100)
                (gen/tuple
                  (gen/return "<center")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:center-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 22 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 22 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</center>"))]
              [(get weights [:element :alt 23] 100)
                (gen/tuple
                  (gen/return "<cite")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:cite-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 23 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 23 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</cite>"))]
              [(get weights [:element :alt 24] 100)
                (gen/tuple
                  (gen/return "<code")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:code-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 24 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 24 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</code>"))]
              [(get weights [:element :alt 25] 100)
                (gen/tuple
                  (gen/return "<col")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:col-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 26] 100)
                (gen/tuple
                  (gen/return "<colgroup")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:colgroup-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 26 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 26 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</colgroup>"))]
              [(get weights [:element :alt 27] 100)
                (gen/tuple
                  (gen/return "<command")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:command-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 27 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 27 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</command>"))]
              [(get weights [:element :alt 28] 100)
                (gen/tuple
                  (gen/return "<content")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:content-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 28 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 28 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</content>"))]
              [(get weights [:element :alt 29] 100)
                (gen/tuple
                  (gen/return "<data")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:data-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 29 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 29 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</data>"))]
              [(get weights [:element :alt 30] 100)
                (gen/tuple
                  (gen/return "<datalist")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:datalist-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 30 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 30 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</datalist>"))]
              [(get weights [:element :alt 31] 100)
                (gen/tuple
                  (gen/return "<dd")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dd-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 31 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 31 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dd>"))]
              [(get weights [:element :alt 32] 100)
                (gen/tuple
                  (gen/return "<del")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:del-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 32 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 32 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</del>"))]
              [(get weights [:element :alt 33] 100)
                (gen/tuple
                  (gen/return "<details")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:details-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 33 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 33 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</details>"))]
              [(get weights [:element :alt 34] 100)
                (gen/tuple
                  (gen/return "<dfn")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dfn-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 34 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 34 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dfn>"))]
              [(get weights [:element :alt 35] 100)
                (gen/tuple
                  (gen/return "<dialog")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dialog-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 35 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 35 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dialog>"))]
              [(get weights [:element :alt 36] 100)
                (gen/tuple
                  (gen/return "<dir")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dir-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 36 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 36 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dir>"))]
              [(get weights [:element :alt 37] 100)
                (gen/tuple
                  (gen/return "<div")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:div-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 37 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 37 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</div>"))]
              [(get weights [:element :alt 38] 100)
                (gen/tuple
                  (gen/return "<dl")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dl-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 38 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 38 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dl>"))]
              [(get weights [:element :alt 39] 100)
                (gen/tuple
                  (gen/return "<dt")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:dt-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 39 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 39 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</dt>"))]
              [(get weights [:element :alt 40] 100)
                (gen/tuple
                  (gen/return "<element")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:element-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 40 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 40 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</element>"))]
              [(get weights [:element :alt 41] 100)
                (gen/tuple
                  (gen/return "<em")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:em-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 41 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 41 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</em>"))]
              [(get weights [:element :alt 42] 100)
                (gen/tuple
                  (gen/return "<embed")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:embed-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 43] 100)
                (gen/tuple
                  (gen/return "<fieldset")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:fieldset-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 43 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 43 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</fieldset>"))]
              [(get weights [:element :alt 44] 100)
                (gen/tuple
                  (gen/return "<figcaption")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:figcaption-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 44 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 44 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</figcaption>"))]
              [(get weights [:element :alt 45] 100)
                (gen/tuple
                  (gen/return "<figure")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:figure-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 45 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 45 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</figure>"))]
              [(get weights [:element :alt 46] 100)
                (gen/tuple
                  (gen/return "<font")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:font-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 46 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 46 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</font>"))]
              [(get weights [:element :alt 47] 100)
                (gen/tuple
                  (gen/return "<footer")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:footer-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 47 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 47 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</footer>"))]
              [(get weights [:element :alt 48] 100)
                (gen/tuple
                  (gen/return "<form")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:form-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 48 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 48 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</form>"))]
              [(get weights [:element :alt 49] 100)
                (gen/tuple
                  (gen/return "<frame")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:frame-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 49 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 49 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</frame>"))]
              [(get weights [:element :alt 50] 100)
                (gen/tuple
                  (gen/return "<frameset")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:frameset-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 50 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 50 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</frameset>"))]
              [(get weights [:element :alt 51] 100)
                (gen/tuple
                  (gen/return "<h1–h6")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:h1–h6-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 51 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 51 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</h1–h6>"))]
              [(get weights [:element :alt 52] 100)
                (gen/tuple
                  (gen/return "<header")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:header-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 52 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 52 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</header>"))]
              [(get weights [:element :alt 53] 100)
                (gen/tuple
                  (gen/return "<hgroup")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:hgroup-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 53 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 53 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</hgroup>"))]
              [(get weights [:element :alt 54] 100)
                (gen/tuple
                  (gen/return "<hr")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:hr-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 55] 100)
                (gen/tuple
                  (gen/return "<i")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:i-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 55 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 55 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</i>"))]
              [(get weights [:element :alt 56] 100)
                (gen/tuple
                  (gen/return "<iframe")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:iframe-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 56 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 56 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</iframe>"))]
              [(get weights [:element :alt 57] 100)
                (gen/tuple
                  (gen/return "<img")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:img-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 58] 100)
                (gen/tuple
                  (gen/return "<input")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:input-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 59] 100)
                (gen/tuple
                  (gen/return "<ins")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:ins-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 59 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 59 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</ins>"))]
              [(get weights [:element :alt 60] 100)
                (gen/tuple
                  (gen/return "<isindex")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:isindex-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 60 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 60 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</isindex>"))]
              [(get weights [:element :alt 61] 100)
                (gen/tuple
                  (gen/return "<kbd")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:kbd-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 61 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 61 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</kbd>"))]
              [(get weights [:element :alt 62] 100)
                (gen/tuple
                  (gen/return "<keygen")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:keygen-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 62 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 62 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</keygen>"))]
              [(get weights [:element :alt 63] 100)
                (gen/tuple
                  (gen/return "<label")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:label-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 63 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 63 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</label>"))]
              [(get weights [:element :alt 64] 100)
                (gen/tuple
                  (gen/return "<legend")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:legend-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 64 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 64 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</legend>"))]
              [(get weights [:element :alt 65] 100)
                (gen/tuple
                  (gen/return "<li")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:li-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 65 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 65 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</li>"))]
              [(get weights [:element :alt 66] 100)
                (gen/tuple
                  (gen/return "<link")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:link-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 67] 100)
                (gen/tuple
                  (gen/return "<listing")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:listing-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 67 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 67 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</listing>"))]
              [(get weights [:element :alt 68] 100)
                (gen/tuple
                  (gen/return "<main")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:main-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 68 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 68 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</main>"))]
              [(get weights [:element :alt 69] 100)
                (gen/tuple
                  (gen/return "<map")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:map-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 69 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 69 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</map>"))]
              [(get weights [:element :alt 70] 10000)    ;; ** adjusted by config ***
                (gen/tuple
                  (gen/return "<mark")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:mark-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 70 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 70 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</mark>"))]
              [(get weights [:element :alt 71] 10000)    ;; ** adjusted by config ***
                (gen/tuple
                  (gen/return "<marquee")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:marquee-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 71 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 71 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</marquee>"))]
              [(get weights [:element :alt 72] 100)
                (gen/tuple
                  (gen/return "<menu")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:menu-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 72 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 72 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</menu>"))]
              [(get weights [:element :alt 73] 100)
                (gen/tuple
                  (gen/return "<menuitem")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:menuitem-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 73 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 73 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</menuitem>"))]
              [(get weights [:element :alt 74] 100)
                (gen/tuple
                  (gen/return "<meta")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:meta-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 75] 100)
                (gen/tuple
                  (gen/return "<meter")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:meter-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 75 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 75 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</meter>"))]
              [(get weights [:element :alt 76] 100)
                (gen/tuple
                  (gen/return "<multicol")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:multicol-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 76 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 76 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</multicol>"))]
              [(get weights [:element :alt 77] 100)
                (gen/tuple
                  (gen/return "<nav")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:nav-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 77 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 77 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</nav>"))]
              [(get weights [:element :alt 78] 100)
                (gen/tuple
                  (gen/return "<nextid")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:nextid-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 78 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 78 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</nextid>"))]
              [(get weights [:element :alt 79] 100)
                (gen/tuple
                  (gen/return "<noembed")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:noembed-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 79 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 79 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</noembed>"))]
              [(get weights [:element :alt 80] 100)
                (gen/tuple
                  (gen/return "<noscript")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:noscript-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 80 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 80 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</noscript>"))]
              [(get weights [:element :alt 81] 100)
                (gen/tuple
                  (gen/return "<object")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:object-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 81 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 81 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</object>"))]
              [(get weights [:element :alt 82] 100)
                (gen/tuple
                  (gen/return "<ol")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:ol-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 82 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 82 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</ol>"))]
              [(get weights [:element :alt 83] 100)
                (gen/tuple
                  (gen/return "<optgroup")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:optgroup-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 83 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 83 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</optgroup>"))]
              [(get weights [:element :alt 84] 100)
                (gen/tuple
                  (gen/return "<option")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:option-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 84 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 84 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</option>"))]
              [(get weights [:element :alt 85] 100)
                (gen/tuple
                  (gen/return "<output")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:output-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 85 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 85 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</output>"))]
              [(get weights [:element :alt 86] 100)
                (gen/tuple
                  (gen/return "<p")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:p-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 86 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 86 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</p>"))]
              [(get weights [:element :alt 87] 100)
                (gen/tuple
                  (gen/return "<param")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:param-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 88] 100)
                (gen/tuple
                  (gen/return "<plaintext")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:plaintext-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 88 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 88 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</plaintext>"))]
              [(get weights [:element :alt 89] 100)
                (gen/tuple
                  (gen/return "<pre")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:pre-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 89 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 89 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</pre>"))]
              [(get weights [:element :alt 90] 100)
                (gen/tuple
                  (gen/return "<progress")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:progress-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 90 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 90 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</progress>"))]
              [(get weights [:element :alt 91] 100)
                (gen/tuple
                  (gen/return "<q")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:q-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 91 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 91 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</q>"))]
              [(get weights [:element :alt 92] 100)
                (gen/tuple
                  (gen/return "<rp")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:rp-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 92 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 92 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</rp>"))]
              [(get weights [:element :alt 93] 100)
                (gen/tuple
                  (gen/return "<rt")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:rt-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 93 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 93 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</rt>"))]
              [(get weights [:element :alt 94] 100)
                (gen/tuple
                  (gen/return "<rtc")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:rtc-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 94 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 94 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</rtc>"))]
              [(get weights [:element :alt 95] 100)
                (gen/tuple
                  (gen/return "<ruby")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:ruby-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 95 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 95 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</ruby>"))]
              [(get weights [:element :alt 96] 100)
                (gen/tuple
                  (gen/return "<s")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:s-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 96 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 96 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</s>"))]
              [(get weights [:element :alt 97] 100)
                (gen/tuple
                  (gen/return "<samp")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:samp-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 97 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 97 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</samp>"))]
              [(get weights [:element :alt 98] 100)
                (gen/tuple
                  (gen/return "<script")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:script-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 98 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 98 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</script>"))]
              [(get weights [:element :alt 99] 100)
                (gen/tuple
                  (gen/return "<section")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:section-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 99 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 99 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</section>"))]
              [(get weights [:element :alt 100] 100)
                (gen/tuple
                  (gen/return "<select")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:select-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 100 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 100 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</select>"))]
              [(get weights [:element :alt 101] 100)
                (gen/tuple
                  (gen/return "<shadow")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:shadow-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 101 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 101 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</shadow>"))]
              [(get weights [:element :alt 102] 100)
                (gen/tuple
                  (gen/return "<slot")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:slot-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 102 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 102 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</slot>"))]
              [(get weights [:element :alt 103] 100)
                (gen/tuple
                  (gen/return "<small")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:small-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 103 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 103 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</small>"))]
              [(get weights [:element :alt 104] 100)
                (gen/tuple
                  (gen/return "<source")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:source-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 105] 100)
                (gen/tuple
                  (gen/return "<spacer")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:spacer-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 105 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 105 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</spacer>"))]
              [(get weights [:element :alt 106] 100)
                (gen/tuple
                  (gen/return "<span")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:span-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 106 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 106 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</span>"))]
              [(get weights [:element :alt 107] 100)
                (gen/tuple
                  (gen/return "<strike")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:strike-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 107 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 107 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</strike>"))]
              [(get weights [:element :alt 108] 100)
                (gen/tuple
                  (gen/return "<strong")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:strong-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 108 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 108 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</strong>"))]
              [(get weights [:element :alt 109] 100)
                (gen/tuple
                  (gen/return "<style")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:style-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 109 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 109 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</style>"))]
              [(get weights [:element :alt 110] 100)
                (gen/tuple
                  (gen/return "<sub")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:sub-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 110 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 110 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</sub>"))]
              [(get weights [:element :alt 111] 100)
                (gen/tuple
                  (gen/return "<summary")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:summary-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 111 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 111 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</summary>"))]
              [(get weights [:element :alt 112] 100)
                (gen/tuple
                  (gen/return "<sup")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:sup-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 112 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 112 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</sup>"))]
              [(get weights [:element :alt 113] 100)
                (gen/tuple
                  (gen/return "<table")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:table-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 113 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 113 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</table>"))]
              [(get weights [:element :alt 114] 100)
                (gen/tuple
                  (gen/return "<tbody")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:tbody-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 114 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 114 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</tbody>"))]
              [(get weights [:element :alt 115] 100)
                (gen/tuple
                  (gen/return "<td")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:td-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 115 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 115 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</td>"))]
              [(get weights [:element :alt 116] 100)
                (gen/tuple
                  (gen/return "<template")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:template-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 116 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 116 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</template>"))]
              [(get weights [:element :alt 117] 100)
                (gen/tuple
                  (gen/return "<textarea")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:textarea-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 117 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 117 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</textarea>"))]
              [(get weights [:element :alt 118] 100)
                (gen/tuple
                  (gen/return "<tfoot")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:tfoot-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 118 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 118 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</tfoot>"))]
              [(get weights [:element :alt 119] 100)
                (gen/tuple
                  (gen/return "<th")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:th-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 119 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 119 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</th>"))]
              [(get weights [:element :alt 120] 100)
                (gen/tuple
                  (gen/return "<thead")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:thead-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 120 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 120 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</thead>"))]
              [(get weights [:element :alt 121] 100)
                (gen/tuple
                  (gen/return "<time")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:time-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 121 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 121 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</time>"))]
              [(get weights [:element :alt 122] 100)
                (gen/tuple
                  (gen/return "<tr")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:tr-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 122 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 122 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</tr>"))]
              [(get weights [:element :alt 123] 100)
                (gen/tuple
                  (gen/return "<track")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:track-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 124] 100)
                (gen/tuple
                  (gen/return "<tt")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:tt-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 124 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 124 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</tt>"))]
              [(get weights [:element :alt 125] 100)
                (gen/tuple
                  (gen/return "<u")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:u-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 125 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 125 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</u>"))]
              [(get weights [:element :alt 126] 100)
                (gen/tuple
                  (gen/return "<ul")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:ul-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 126 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 126 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</ul>"))]
              [(get weights [:element :alt 127] 100)
                (gen/tuple
                  (gen/return "<var")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:var-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 127 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 127 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</var>"))]
              [(get weights [:element :alt 128] 100)
                (gen/tuple
                  (gen/return "<video")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:video-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 128 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 128 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</video>"))]
              [(get weights [:element :alt 129] 100)
                (gen/tuple
                  (gen/return "<wbr")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:wbr-attribute gmap)))
                  (gen/return ">"))]
              [(get weights [:element :alt 130] 100)
                (gen/tuple
                  (gen/return "<xmp")
                  (gen/vector
                    (gen/tuple
                      (:space gmap)
                      (:xmp-attribute gmap)))
                  (gen/return ">")
                  (gen/vector
                    (gen/frequency [
                      [(get weights [:element :alt 130 :cat 3 :star :alt 0] 100)
                        inner]
                      [(get weights [:element :alt 130 :cat 3 :star :alt 1] 100)
                        (:content gmap)]]))
                  (gen/return "</xmp>"))]]))
          (gen/frequency [
            [(get weights [:element :alt 0] 100)
              (gen/tuple
                (gen/return "<a")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:a-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</a>"))]
            [(get weights [:element :alt 1] 100)
              (gen/tuple
                (gen/return "<abbr")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:abbr-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</abbr>"))]
            [(get weights [:element :alt 2] 100)
              (gen/tuple
                (gen/return "<acronym")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:acronym-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</acronym>"))]
            [(get weights [:element :alt 3] 100)
              (gen/tuple
                (gen/return "<address")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:address-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</address>"))]
            [(get weights [:element :alt 4] 100)
              (gen/tuple
                (gen/return "<applet")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:applet-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</applet>"))]
            [(get weights [:element :alt 5] 100)
              (gen/tuple
                (gen/return "<area")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:area-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 6] 100)
              (gen/tuple
                (gen/return "<article")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:article-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</article>"))]
            [(get weights [:element :alt 7] 100)
              (gen/tuple
                (gen/return "<aside")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:aside-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</aside>"))]
            [(get weights [:element :alt 8] 100)
              (gen/tuple
                (gen/return "<audio")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:audio-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</audio>"))]
            [(get weights [:element :alt 9] 100)
              (gen/tuple
                (gen/return "<b")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:b-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</b>"))]
            [(get weights [:element :alt 10] 100)
              (gen/tuple
                (gen/return "<base")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:base-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 11] 100)
              (gen/tuple
                (gen/return "<basefont")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:basefont-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</basefont>"))]
            [(get weights [:element :alt 12] 100)
              (gen/tuple
                (gen/return "<bdi")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:bdi-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</bdi>"))]
            [(get weights [:element :alt 13] 100)
              (gen/tuple
                (gen/return "<bdo")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:bdo-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</bdo>"))]
            [(get weights [:element :alt 14] 100)
              (gen/tuple
                (gen/return "<bgsound")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:bgsound-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</bgsound>"))]
            [(get weights [:element :alt 15] 100)
              (gen/tuple
                (gen/return "<big")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:big-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</big>"))]
            [(get weights [:element :alt 16] 100)
              (gen/tuple
                (gen/return "<blink")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:blink-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</blink>"))]
            [(get weights [:element :alt 17] 100)
              (gen/tuple
                (gen/return "<blockquote")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:blockquote-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</blockquote>"))]
            [(get weights [:element :alt 18] 100)
              (gen/tuple
                (gen/return "<br")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:br-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 19] 100)
              (gen/tuple
                (gen/return "<button")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:button-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</button>"))]
            [(get weights [:element :alt 20] 100)
              (gen/tuple
                (gen/return "<canvas")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:canvas-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</canvas>"))]
            [(get weights [:element :alt 21] 100)
              (gen/tuple
                (gen/return "<caption")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:caption-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</caption>"))]
            [(get weights [:element :alt 22] 100)
              (gen/tuple
                (gen/return "<center")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:center-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</center>"))]
            [(get weights [:element :alt 23] 100)
              (gen/tuple
                (gen/return "<cite")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:cite-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</cite>"))]
            [(get weights [:element :alt 24] 100)
              (gen/tuple
                (gen/return "<code")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:code-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</code>"))]
            [(get weights [:element :alt 25] 100)
              (gen/tuple
                (gen/return "<col")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:col-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 26] 100)
              (gen/tuple
                (gen/return "<colgroup")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:colgroup-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</colgroup>"))]
            [(get weights [:element :alt 27] 100)
              (gen/tuple
                (gen/return "<command")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:command-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</command>"))]
            [(get weights [:element :alt 28] 100)
              (gen/tuple
                (gen/return "<content")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:content-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</content>"))]
            [(get weights [:element :alt 29] 100)
              (gen/tuple
                (gen/return "<data")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:data-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</data>"))]
            [(get weights [:element :alt 30] 100)
              (gen/tuple
                (gen/return "<datalist")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:datalist-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</datalist>"))]
            [(get weights [:element :alt 31] 100)
              (gen/tuple
                (gen/return "<dd")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dd-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dd>"))]
            [(get weights [:element :alt 32] 100)
              (gen/tuple
                (gen/return "<del")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:del-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</del>"))]
            [(get weights [:element :alt 33] 100)
              (gen/tuple
                (gen/return "<details")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:details-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</details>"))]
            [(get weights [:element :alt 34] 100)
              (gen/tuple
                (gen/return "<dfn")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dfn-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dfn>"))]
            [(get weights [:element :alt 35] 100)
              (gen/tuple
                (gen/return "<dialog")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dialog-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dialog>"))]
            [(get weights [:element :alt 36] 100)
              (gen/tuple
                (gen/return "<dir")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dir-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dir>"))]
            [(get weights [:element :alt 37] 100)
              (gen/tuple
                (gen/return "<div")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:div-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</div>"))]
            [(get weights [:element :alt 38] 100)
              (gen/tuple
                (gen/return "<dl")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dl-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dl>"))]
            [(get weights [:element :alt 39] 100)
              (gen/tuple
                (gen/return "<dt")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:dt-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</dt>"))]
            [(get weights [:element :alt 40] 100)
              (gen/tuple
                (gen/return "<element")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:element-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</element>"))]
            [(get weights [:element :alt 41] 100)
              (gen/tuple
                (gen/return "<em")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:em-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</em>"))]
            [(get weights [:element :alt 42] 100)
              (gen/tuple
                (gen/return "<embed")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:embed-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 43] 100)
              (gen/tuple
                (gen/return "<fieldset")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:fieldset-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</fieldset>"))]
            [(get weights [:element :alt 44] 100)
              (gen/tuple
                (gen/return "<figcaption")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:figcaption-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</figcaption>"))]
            [(get weights [:element :alt 45] 100)
              (gen/tuple
                (gen/return "<figure")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:figure-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</figure>"))]
            [(get weights [:element :alt 46] 100)
              (gen/tuple
                (gen/return "<font")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:font-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</font>"))]
            [(get weights [:element :alt 47] 100)
              (gen/tuple
                (gen/return "<footer")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:footer-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</footer>"))]
            [(get weights [:element :alt 48] 100)
              (gen/tuple
                (gen/return "<form")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:form-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</form>"))]
            [(get weights [:element :alt 49] 100)
              (gen/tuple
                (gen/return "<frame")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:frame-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</frame>"))]
            [(get weights [:element :alt 50] 100)
              (gen/tuple
                (gen/return "<frameset")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:frameset-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</frameset>"))]
            [(get weights [:element :alt 51] 100)
              (gen/tuple
                (gen/return "<h1–h6")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:h1–h6-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</h1–h6>"))]
            [(get weights [:element :alt 52] 100)
              (gen/tuple
                (gen/return "<header")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:header-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</header>"))]
            [(get weights [:element :alt 53] 100)
              (gen/tuple
                (gen/return "<hgroup")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:hgroup-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</hgroup>"))]
            [(get weights [:element :alt 54] 100)
              (gen/tuple
                (gen/return "<hr")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:hr-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 55] 100)
              (gen/tuple
                (gen/return "<i")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:i-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</i>"))]
            [(get weights [:element :alt 56] 100)
              (gen/tuple
                (gen/return "<iframe")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:iframe-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</iframe>"))]
            [(get weights [:element :alt 57] 100)
              (gen/tuple
                (gen/return "<img")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:img-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 58] 100)
              (gen/tuple
                (gen/return "<input")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:input-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 59] 100)
              (gen/tuple
                (gen/return "<ins")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:ins-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</ins>"))]
            [(get weights [:element :alt 60] 100)
              (gen/tuple
                (gen/return "<isindex")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:isindex-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</isindex>"))]
            [(get weights [:element :alt 61] 100)
              (gen/tuple
                (gen/return "<kbd")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:kbd-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</kbd>"))]
            [(get weights [:element :alt 62] 100)
              (gen/tuple
                (gen/return "<keygen")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:keygen-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</keygen>"))]
            [(get weights [:element :alt 63] 100)
              (gen/tuple
                (gen/return "<label")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:label-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</label>"))]
            [(get weights [:element :alt 64] 100)
              (gen/tuple
                (gen/return "<legend")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:legend-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</legend>"))]
            [(get weights [:element :alt 65] 100)
              (gen/tuple
                (gen/return "<li")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:li-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</li>"))]
            [(get weights [:element :alt 66] 100)
              (gen/tuple
                (gen/return "<link")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:link-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 67] 100)
              (gen/tuple
                (gen/return "<listing")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:listing-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</listing>"))]
            [(get weights [:element :alt 68] 100)
              (gen/tuple
                (gen/return "<main")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:main-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</main>"))]
            [(get weights [:element :alt 69] 100)
              (gen/tuple
                (gen/return "<map")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:map-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</map>"))]
            [(get weights [:element :alt 70] 10000)    ;; ** adjusted by config ***
              (gen/tuple
                (gen/return "<mark")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:mark-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</mark>"))]
            [(get weights [:element :alt 71] 10000)    ;; ** adjusted by config ***
              (gen/tuple
                (gen/return "<marquee")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:marquee-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</marquee>"))]
            [(get weights [:element :alt 72] 100)
              (gen/tuple
                (gen/return "<menu")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:menu-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</menu>"))]
            [(get weights [:element :alt 73] 100)
              (gen/tuple
                (gen/return "<menuitem")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:menuitem-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</menuitem>"))]
            [(get weights [:element :alt 74] 100)
              (gen/tuple
                (gen/return "<meta")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:meta-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 75] 100)
              (gen/tuple
                (gen/return "<meter")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:meter-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</meter>"))]
            [(get weights [:element :alt 76] 100)
              (gen/tuple
                (gen/return "<multicol")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:multicol-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</multicol>"))]
            [(get weights [:element :alt 77] 100)
              (gen/tuple
                (gen/return "<nav")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:nav-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</nav>"))]
            [(get weights [:element :alt 78] 100)
              (gen/tuple
                (gen/return "<nextid")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:nextid-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</nextid>"))]
            [(get weights [:element :alt 79] 100)
              (gen/tuple
                (gen/return "<noembed")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:noembed-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</noembed>"))]
            [(get weights [:element :alt 80] 100)
              (gen/tuple
                (gen/return "<noscript")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:noscript-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</noscript>"))]
            [(get weights [:element :alt 81] 100)
              (gen/tuple
                (gen/return "<object")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:object-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</object>"))]
            [(get weights [:element :alt 82] 100)
              (gen/tuple
                (gen/return "<ol")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:ol-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</ol>"))]
            [(get weights [:element :alt 83] 100)
              (gen/tuple
                (gen/return "<optgroup")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:optgroup-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</optgroup>"))]
            [(get weights [:element :alt 84] 100)
              (gen/tuple
                (gen/return "<option")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:option-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</option>"))]
            [(get weights [:element :alt 85] 100)
              (gen/tuple
                (gen/return "<output")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:output-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</output>"))]
            [(get weights [:element :alt 86] 100)
              (gen/tuple
                (gen/return "<p")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:p-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</p>"))]
            [(get weights [:element :alt 87] 100)
              (gen/tuple
                (gen/return "<param")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:param-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 88] 100)
              (gen/tuple
                (gen/return "<plaintext")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:plaintext-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</plaintext>"))]
            [(get weights [:element :alt 89] 100)
              (gen/tuple
                (gen/return "<pre")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:pre-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</pre>"))]
            [(get weights [:element :alt 90] 100)
              (gen/tuple
                (gen/return "<progress")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:progress-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</progress>"))]
            [(get weights [:element :alt 91] 100)
              (gen/tuple
                (gen/return "<q")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:q-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</q>"))]
            [(get weights [:element :alt 92] 100)
              (gen/tuple
                (gen/return "<rp")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:rp-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</rp>"))]
            [(get weights [:element :alt 93] 100)
              (gen/tuple
                (gen/return "<rt")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:rt-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</rt>"))]
            [(get weights [:element :alt 94] 100)
              (gen/tuple
                (gen/return "<rtc")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:rtc-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</rtc>"))]
            [(get weights [:element :alt 95] 100)
              (gen/tuple
                (gen/return "<ruby")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:ruby-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</ruby>"))]
            [(get weights [:element :alt 96] 100)
              (gen/tuple
                (gen/return "<s")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:s-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</s>"))]
            [(get weights [:element :alt 97] 100)
              (gen/tuple
                (gen/return "<samp")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:samp-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</samp>"))]
            [(get weights [:element :alt 98] 100)
              (gen/tuple
                (gen/return "<script")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:script-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</script>"))]
            [(get weights [:element :alt 99] 100)
              (gen/tuple
                (gen/return "<section")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:section-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</section>"))]
            [(get weights [:element :alt 100] 100)
              (gen/tuple
                (gen/return "<select")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:select-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</select>"))]
            [(get weights [:element :alt 101] 100)
              (gen/tuple
                (gen/return "<shadow")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:shadow-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</shadow>"))]
            [(get weights [:element :alt 102] 100)
              (gen/tuple
                (gen/return "<slot")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:slot-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</slot>"))]
            [(get weights [:element :alt 103] 100)
              (gen/tuple
                (gen/return "<small")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:small-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</small>"))]
            [(get weights [:element :alt 104] 100)
              (gen/tuple
                (gen/return "<source")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:source-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 105] 100)
              (gen/tuple
                (gen/return "<spacer")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:spacer-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</spacer>"))]
            [(get weights [:element :alt 106] 100)
              (gen/tuple
                (gen/return "<span")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:span-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</span>"))]
            [(get weights [:element :alt 107] 100)
              (gen/tuple
                (gen/return "<strike")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:strike-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</strike>"))]
            [(get weights [:element :alt 108] 100)
              (gen/tuple
                (gen/return "<strong")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:strong-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</strong>"))]
            [(get weights [:element :alt 109] 100)
              (gen/tuple
                (gen/return "<style")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:style-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</style>"))]
            [(get weights [:element :alt 110] 100)
              (gen/tuple
                (gen/return "<sub")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:sub-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</sub>"))]
            [(get weights [:element :alt 111] 100)
              (gen/tuple
                (gen/return "<summary")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:summary-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</summary>"))]
            [(get weights [:element :alt 112] 100)
              (gen/tuple
                (gen/return "<sup")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:sup-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</sup>"))]
            [(get weights [:element :alt 113] 100)
              (gen/tuple
                (gen/return "<table")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:table-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</table>"))]
            [(get weights [:element :alt 114] 100)
              (gen/tuple
                (gen/return "<tbody")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:tbody-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</tbody>"))]
            [(get weights [:element :alt 115] 100)
              (gen/tuple
                (gen/return "<td")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:td-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</td>"))]
            [(get weights [:element :alt 116] 100)
              (gen/tuple
                (gen/return "<template")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:template-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</template>"))]
            [(get weights [:element :alt 117] 100)
              (gen/tuple
                (gen/return "<textarea")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:textarea-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</textarea>"))]
            [(get weights [:element :alt 118] 100)
              (gen/tuple
                (gen/return "<tfoot")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:tfoot-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</tfoot>"))]
            [(get weights [:element :alt 119] 100)
              (gen/tuple
                (gen/return "<th")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:th-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</th>"))]
            [(get weights [:element :alt 120] 100)
              (gen/tuple
                (gen/return "<thead")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:thead-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</thead>"))]
            [(get weights [:element :alt 121] 100)
              (gen/tuple
                (gen/return "<time")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:time-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</time>"))]
            [(get weights [:element :alt 122] 100)
              (gen/tuple
                (gen/return "<tr")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:tr-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</tr>"))]
            [(get weights [:element :alt 123] 100)
              (gen/tuple
                (gen/return "<track")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:track-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 124] 100)
              (gen/tuple
                (gen/return "<tt")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:tt-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</tt>"))]
            [(get weights [:element :alt 125] 100)
              (gen/tuple
                (gen/return "<u")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:u-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</u>"))]
            [(get weights [:element :alt 126] 100)
              (gen/tuple
                (gen/return "<ul")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:ul-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</ul>"))]
            [(get weights [:element :alt 127] 100)
              (gen/tuple
                (gen/return "<var")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:var-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</var>"))]
            [(get weights [:element :alt 128] 100)
              (gen/tuple
                (gen/return "<video")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:video-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</video>"))]
            [(get weights [:element :alt 129] 100)
              (gen/tuple
                (gen/return "<wbr")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:wbr-attribute gmap)))
                (gen/return ">"))]
            [(get weights [:element :alt 130] 100)
              (gen/tuple
                (gen/return "<xmp")
                (gen/vector
                  (gen/tuple
                    (:space gmap)
                    (:xmp-attribute gmap)))
                (gen/return ">")
                (gen/vector
                  (:content gmap))
                (gen/return "</xmp>"))]]))
        gmap (assoc gmap :element gen-element)

        gen-body
        (gen/tuple
          (gen/return "<")
          (gen/return "body style=\"background: #1289ef; font: 25px/1 Ahem\"")
          (gen/vector
            (gen/tuple
              (:space gmap)
              (:body-attribute gmap)))
          (:opt-space gmap)
          (gen/return ">")
          (gen/vector
            (gen/frequency [
              [(get weights [:body :cat 5 :star :alt 0] 100)
                (:element gmap)]
              [(get weights [:body :cat 5 :star :alt 1] 100)
                (:content gmap)]]))
          (gen/return "</")
          (gen/return "body")
          (:opt-space gmap)
          (gen/return ">")
          (:opt-space gmap))
        gmap (assoc gmap :body gen-body)

        gen-title-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :title-attribute gen-title-attribute)

        gen-title
        (gen/tuple
          (gen/return "<")
          (gen/return "title")
          (gen/vector
            (gen/tuple
              (:space gmap)
              (:title-attribute gmap)))
          (:opt-space gmap)
          (gen/return ">")
          (gen/vector
            (:content gmap))
          (gen/return "</")
          (gen/return "title")
          (:opt-space gmap)
          (gen/return ">")
          (:opt-space gmap))
        gmap (assoc gmap :title gen-title)

        gen-head
        (gen/tuple
          (gen/return "<")
          (gen/return "head")
          (:opt-space gmap)
          (gen/return ">")
          (gen/one-of [
            (gen/return "")
            (:title gmap)])
          (gen/return "</")
          (gen/return "head")
          (:opt-space gmap)
          (gen/return ">")
          (:opt-space gmap))
        gmap (assoc gmap :head gen-head)

        gen-html
        (gen/tuple
          (gen/return "<")
          (gen/return "html")
          (:opt-space gmap)
          (gen/return ">")
          (gen/one-of [
            (gen/return "")
            (:head gmap)])
          (:body gmap)
          (gen/return "</")
          (gen/return "html")
          (:opt-space gmap)
          (gen/return ">")
          (:opt-space gmap))
        gmap (assoc gmap :html gen-html)

        gen-attr-val-loop
        (gen/return "")
        gmap (assoc gmap :attr-val-loop gen-attr-val-loop)

        gen-attr-val-defer
        (gen/return "")
        gmap (assoc gmap :attr-val-defer gen-attr-val-defer)

        gen-attr-val-manifest
        (gen/return "STUB_manifest")
        gmap (assoc gmap :attr-val-manifest gen-attr-val-manifest)

        gen-html-attribute
        (gen/frequency [
          [(get weights [:html-attribute :alt 0] 100)
            (gen/tuple
              (gen/return "manifest=\"")
              (:attr-val-manifest gmap)
              (gen/return "\""))]
          [(get weights [:html-attribute :alt 1] 100)
            (:global-attribute gmap)]])
        gmap (assoc gmap :html-attribute gen-html-attribute)

        gen-attr-val-autoplay
        (gen/return "")
        gmap (assoc gmap :attr-val-autoplay gen-attr-val-autoplay)

        gen-attr-val-controls
        (gen/return "")
        gmap (assoc gmap :attr-val-controls gen-attr-val-controls)

        gen-attribute-value
        (gen/frequency [
          [(get weights [:attribute-value :alt 0] 100)
            (gen/tuple
              (gen/return "\"")
              (gen/vector
                (gen/frequency [
                  [(get weights [:attribute-value :alt 0 :cat 1 :star :alt 0] 100)
                    (chuck/string-from-regex #"[A-Za-z0-9_<>/\\ .]*")]
                  [(get weights [:attribute-value :alt 0 :cat 1 :star :alt 1] 100)
                    (:reference gmap)]]))
              (gen/return "\""))]
          [(get weights [:attribute-value :alt 1] 100)
            (gen/tuple
              (gen/return "'")
              (gen/vector
                (gen/frequency [
                  [(get weights [:attribute-value :alt 1 :cat 1 :star :alt 0] 100)
                    (chuck/string-from-regex #"[A-Za-z0-9_<>/\\ .]*")]
                  [(get weights [:attribute-value :alt 1 :cat 1 :star :alt 1] 100)
                    (:reference gmap)]]))
              (gen/return "'"))]])
        gmap (assoc gmap :attribute-value gen-attribute-value)

        gen-attr-val-hidden
        (gen/return "")
        gmap (assoc gmap :attr-val-hidden gen-attr-val-hidden)

        gen-attr-val-muted
        (gen/return "")
        gmap (assoc gmap :attr-val-muted gen-attr-val-muted)

        gen-head-attribute
        (:global-attribute gmap)
        gmap (assoc gmap :head-attribute gen-head-attribute)

        gen-attr-val-checked
        (gen/return "")
        gmap (assoc gmap :attr-val-checked gen-attr-val-checked)

        gen-attr-val-autofocus
        (gen/return "")
        gmap (assoc gmap :attr-val-autofocus gen-attr-val-autofocus)

        gen-eq
        (gen/tuple
          (:opt-space gmap)
          (gen/return "=")
          (:opt-space gmap))
        gmap (assoc gmap :eq gen-eq)

        gen-attr-val-async
        (gen/return "")
        gmap (assoc gmap :attr-val-async gen-attr-val-async)

        gen-attribute
        (gen/tuple
          (:name gmap)
          (:eq gmap)
          (:attribute-value gmap))
        gmap (assoc gmap :attribute gen-attribute)

        gen-attr-val-disabled
        (gen/return "")
        gmap (assoc gmap :attr-val-disabled gen-attr-val-disabled)]
    gmap))

(defn html5-generators [& [gmap weights]]
  (let [gmap (or gmap {})
        gmap (html5-generators-part-0 gmap weights)
        gmap (html5-generators-part-1 gmap weights)
        gmap (html5-generators-part-2 gmap weights)
        gmap (html5-generators-part-3 gmap weights)
        gmap (html5-generators-part-4 gmap weights)
        gmap (html5-generators-part-5 gmap weights)]
    gmap))
